{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"hydrus network - client and server \u00b6 The hydrus network client is a desktop application written for Anonymous and other internet enthusiasts with large media collections. It organises your files into an internal database and browses them with tags instead of folders, a little like a booru on your desktop. Tags and files can be anonymously shared through custom servers that any user may run. Everything is free, nothing phones home, and the source code is included with the release. It is developed mostly for Windows, but builds for Linux and macOS are available (perhaps with some limitations, depending on your situation). The software is constantly being improved. I try to put out a new release every Wednesday by 8pm Eastern. Currently importable filetypes are: images - jpg, gif (including animated), png (including animated!), tiff, webp, bmp video - webm, mp4, mpeg, avi, mov, mkv, flv, wmv audio - mp3, flac, ogg, wma misc - swf, pdf, psd, zip, rar, 7z On the Windows and Linux builds, an MPV window is embedded to play video and audio smoothly. For files like pdf, which cannot currently be viewed in the client, it is easy to launch any file with your OS's default program. The client can download files and parse tags from a number of websites, including by default: 4chan and other imageboards, with a thread watcher the popular boorus gallery sites like deviant art, hentai foundry, and pixiv tumblr and twitter And can be extended to download from more locations using easily shareable user-made downloaders. It can also be set to 'subscribe' to any gallery search, repeating it every few days to keep up with new results. The program's emphasis is on your freedom. There is no DRM, no spying, no censorship. The program never phones home. If you would like to try it, I strongly recommend you check out the help and getting started guide . A copy is included with the release as well.' Screenshots \u00b6","title":"Home"},{"location":"index.html#hydrus_network_-_client_and_server","text":"The hydrus network client is a desktop application written for Anonymous and other internet enthusiasts with large media collections. It organises your files into an internal database and browses them with tags instead of folders, a little like a booru on your desktop. Tags and files can be anonymously shared through custom servers that any user may run. Everything is free, nothing phones home, and the source code is included with the release. It is developed mostly for Windows, but builds for Linux and macOS are available (perhaps with some limitations, depending on your situation). The software is constantly being improved. I try to put out a new release every Wednesday by 8pm Eastern. Currently importable filetypes are: images - jpg, gif (including animated), png (including animated!), tiff, webp, bmp video - webm, mp4, mpeg, avi, mov, mkv, flv, wmv audio - mp3, flac, ogg, wma misc - swf, pdf, psd, zip, rar, 7z On the Windows and Linux builds, an MPV window is embedded to play video and audio smoothly. For files like pdf, which cannot currently be viewed in the client, it is easy to launch any file with your OS's default program. The client can download files and parse tags from a number of websites, including by default: 4chan and other imageboards, with a thread watcher the popular boorus gallery sites like deviant art, hentai foundry, and pixiv tumblr and twitter And can be extended to download from more locations using easily shareable user-made downloaders. It can also be set to 'subscribe' to any gallery search, repeating it every few days to keep up with new results. The program's emphasis is on your freedom. There is no DRM, no spying, no censorship. The program never phones home. If you would like to try it, I strongly recommend you check out the help and getting started guide . A copy is included with the release as well.'","title":"hydrus network - client and server"},{"location":"index.html#screenshots","text":"","title":"Screenshots"},{"location":"Fixing_Hydrus_Random_Crashes_Under_Linux.html","text":"Virtual Memory Under Linux \u00b6 Why does hydrus keep crashing under Linux when it has lots of virtual memory? \u00b6 Symptoms \u00b6 Hydrus crashes without a crash log Standard error reads Killed System logs say OOMKiller Programs appear to havevery high virtual memory utilization despite low real memory. tl;dr :: The fix \u00b6 Add the followng line to the end of /etc/sysctl.conf . You will need admin, so use sudo nano /etc/sysctl.conf or sudo gedit /etc/sysctl.conf vm.min_free_kbytes = 1153434 vm.overcommit_memory = 1 Check that you have (enough) swap space or you might still run out of memory. sudo swapon --show If you need swap sudo fallocate -l 16G /swapfile #make 16GiB of swap sudo chmod 600 /swapfile sudo mkswap /swapfile Add to /etc/fstab so your swap is mounted on reboot /swapfile swap swap defaults 0 0 You may add as many swapfiles as you like, and should add a new swapfile before you delete an old one if you plan to do so, as unmounting a swapfile will evict its contents back in to real memory. You may also wish to use a swapfile type that uses compression, this saves you some disk space for a little bit of a performance hit, but also significantly saves on mostly empty memory. Reboot for all changes to take effect, or use sysctl to set vm variables. Details \u00b6 Linux's memory allocator is lazy and does not perform opportunistic reclaim. This means that the system will continue to give your process memory from the real and virtual memory pool(swap) until there is none left. Linux will only cleanup if the available total real and virtual memory falls below the watermark as defined in the system control configuration file /etc/sysctl.conf . The watermark's name is vm.min_free_kbytes , it is the number of kilobytes the system keeps in reserve, and therefore the maximum amount of memory the system can allocate in one go before needing to reclaim memory it gave eariler but which is no longer in use. The default value is vm.min_free_kbytes=65536 , which means 66MiB (megabytes). If for a given request the amount of memory asked to be allocated is under vm.min_free_kbytes , but this would result in an ammount of total free memory less than vm.min_free_kbytes then the OS will clean up memory to service the request. If vm.min_free_kbytes is less than the ammount requested and there is no virtual memory left, then the system is officially unable to service the request and will lauch the OOMKiller (Out of Memory Killer) to free memory by kiling memory glut processes. Increase the vm.min_free_kbytes value to prevent this scenario. The OOM Killer \u00b6 The OOM kill decides which program to kill to reclaim memory, since hydrus loves memory it is usually picked first, even if another program asking for memory caused the OOM condition. Setting the minimum free kilobytes higher will avoid the running of the OOMkiller which is always preferable, and almost always preventable. Memory Overcommmit \u00b6 We mentioned that Linux will keep giving out memory, but actually it's possible for Linux to launch the OOM killer if it just feel like our program is aking for too much memory too quickly. Since hydrus is a heavyweight scientific processing package we need to turn this feature off. To turn it off change the value of vm.overcommit_memory which defaults to 2 . Set vm.overcommit_memory=1 this prevents the OS from using a heuristic and it will just always give memory to anyone who asks for it. What about swappiness? \u00b6 Swapiness is a setting you might have seen, but it only determines Linux's desire to spend a little bit of time moving memory you haven't touched in a while out of real memory and into virtual memory, it will not prevent the OOM condition it just determines how much time to use for moving things into swap. Why does my Linux system studder or become unresponsive when hydrus has been running a while? \u00b6 You are running out of pages because Linux releases I/O buffer pages only when a file is closed. Thus the OS is waiting for you to hit the watermark(as described in \"why is hydrus crashing\") to start freeing pages, which causes the chug. When contents is written from memory to disk the page is retained so that if you reread that part of the disk the OS does not need to access disk it just pulls it from the much faster memory. This is usually a good thing, but Hydrus does not close database files so it eats up pages over time. This is really good for hydrus but sucks for the responsiveness of other apps, and will cause hydrus to consume pages after doing a lengthy operation in anticipation of needing them again, even when it is thereafter idle. You need to set vm.dirtytime_expire_seconds to a lower value. vm.dirtytime_expire_seconds When a lazytime inode is constantly having its pages dirtied, the inode with an updated timestamp will never get chance to be written out. And, if the only thing that has happened on the file system is a dirtytime inode caused by an atime update, a worker will be scheduled to make sure that inode eventually gets pushed out to disk. This tunable is used to define when dirty inode is old enough to be eligible for writeback by the kernel flusher threads. And, it is also used as the interval to wakeup dirtytime writeback thread. On many distros this happens only once every 12 hours, try setting it close to every one hour or 2. This will cause the OS to drop pages that were written over 1-2 hours ago. Returning them to the free store for use by other programs. https://www.kernel.org/doc/Documentation/sysctl/vm.txt Why does everything become clunky for a bit if I have tuned all of the above settings? \u00b6 The kernel launches a process called kswapd to swap and reclaim memory pages, its behaviour is goverened by the following two values vm.vfs_cache_pressure The tendancy for the kernel to reclaim I/O cache for files and directories. Default=100, set to 110 to bias the kernel into reclaiming I/O pages over keeping them at a \"fair rate\" compared to other pages. Hydrus tends to write a lot of files and then ignore them for a long time, so its a good idea to prefer freeing pages for infrequent I/O. Note : Increasing vfs_cache_pressure significantly beyond 100 may have negative performance impact. Reclaim code needs to take various locks to find freeable directory and inode objects. With vfs_cache_pressure=1000 , it will look for ten times more freeable objects than there are. watermark_scale_factor This factor controls the aggressiveness of kswapd. It defines the amount of memory left in a node/system before kswapd is woken up and how much memory needs to be free before kswapd goes back to sleep. The unit is in fractions of 10,000. The default value of 10 means the distances between watermarks are 0.1% of the available memory in the node/system. The maximum value is 1000, or 10% of memory. A high rate of threads entering direct reclaim (allocstall) or kswapd going to sleep prematurely (kswapd_low_wmark_hit_quickly) can indicate that the number of free pages kswapd maintains for latency reasons is too small for the allocation bursts occurring in the system. This knob can then be used to tune kswapd aggressiveness accordingly. I like to keep watermark_scale_factor at 70 (70/10,000)=0.7%, so kswapd will run until at least 0.7% of system memory has been reclaimed. i.e. If 32GiB (real and virt) of memory, it will try to keep at least 0.224 GiB immediately available. Virtual Memory Under Linux 4: Unleash the memory \u00b6 An example /etc/sysctl.conf section for virtual memory settings. ######## # virtual memory ######## #1 always overcommit, prevents the kernel from using a heuristic to decide that a process is bad for asking for a lot of memory at once and killing it. #https://www.kernel.org/doc/Documentation/vm/overcommit-accounting vm.overcommit_memory = 1 #force linux to reclaim pages if under a gigabyte #is available so large chunk allocates don't fire off the OOM killer vm.min_free_kbytes = 1153434 #Start freeing up pages that have been written but which are in open files, after 2 hours. #Allows pages in long lived files to be reclaimed vm.dirtytime_expire_seconds = 7200 #Have kswapd try to reclaim .7% = 70/10000 of pages before returning to sleep #This increases responsiveness by reclaiming a larger portion of pages in low memory condition #So that the next time you make a large allocation the kernel doesn't have to stall and look for pages to free immediately. vm.watermark_scale_factor = 70 #Have the kernel prefer to reclaim I/O pages at 110% of the rate at which it frees other pages. #Don't set this value much over 100 or the kernel will spend all its time reclaiming I/O pages vm.vfs_cache_pressure = 110","title":"Virtual Memory Under Linux"},{"location":"Fixing_Hydrus_Random_Crashes_Under_Linux.html#virtual_memory_under_linux","text":"","title":"Virtual Memory Under Linux"},{"location":"Fixing_Hydrus_Random_Crashes_Under_Linux.html#why_does_hydrus_keep_crashing_under_linux_when_it_has_lots_of_virtual_memory","text":"","title":"Why does hydrus keep crashing under Linux when it has lots of virtual memory?"},{"location":"Fixing_Hydrus_Random_Crashes_Under_Linux.html#symptoms","text":"Hydrus crashes without a crash log Standard error reads Killed System logs say OOMKiller Programs appear to havevery high virtual memory utilization despite low real memory.","title":"Symptoms"},{"location":"Fixing_Hydrus_Random_Crashes_Under_Linux.html#tldr_the_fix","text":"Add the followng line to the end of /etc/sysctl.conf . You will need admin, so use sudo nano /etc/sysctl.conf or sudo gedit /etc/sysctl.conf vm.min_free_kbytes = 1153434 vm.overcommit_memory = 1 Check that you have (enough) swap space or you might still run out of memory. sudo swapon --show If you need swap sudo fallocate -l 16G /swapfile #make 16GiB of swap sudo chmod 600 /swapfile sudo mkswap /swapfile Add to /etc/fstab so your swap is mounted on reboot /swapfile swap swap defaults 0 0 You may add as many swapfiles as you like, and should add a new swapfile before you delete an old one if you plan to do so, as unmounting a swapfile will evict its contents back in to real memory. You may also wish to use a swapfile type that uses compression, this saves you some disk space for a little bit of a performance hit, but also significantly saves on mostly empty memory. Reboot for all changes to take effect, or use sysctl to set vm variables.","title":"tl;dr :: The fix"},{"location":"Fixing_Hydrus_Random_Crashes_Under_Linux.html#details","text":"Linux's memory allocator is lazy and does not perform opportunistic reclaim. This means that the system will continue to give your process memory from the real and virtual memory pool(swap) until there is none left. Linux will only cleanup if the available total real and virtual memory falls below the watermark as defined in the system control configuration file /etc/sysctl.conf . The watermark's name is vm.min_free_kbytes , it is the number of kilobytes the system keeps in reserve, and therefore the maximum amount of memory the system can allocate in one go before needing to reclaim memory it gave eariler but which is no longer in use. The default value is vm.min_free_kbytes=65536 , which means 66MiB (megabytes). If for a given request the amount of memory asked to be allocated is under vm.min_free_kbytes , but this would result in an ammount of total free memory less than vm.min_free_kbytes then the OS will clean up memory to service the request. If vm.min_free_kbytes is less than the ammount requested and there is no virtual memory left, then the system is officially unable to service the request and will lauch the OOMKiller (Out of Memory Killer) to free memory by kiling memory glut processes. Increase the vm.min_free_kbytes value to prevent this scenario.","title":"Details"},{"location":"Fixing_Hydrus_Random_Crashes_Under_Linux.html#the_oom_killer","text":"The OOM kill decides which program to kill to reclaim memory, since hydrus loves memory it is usually picked first, even if another program asking for memory caused the OOM condition. Setting the minimum free kilobytes higher will avoid the running of the OOMkiller which is always preferable, and almost always preventable.","title":"The OOM Killer"},{"location":"Fixing_Hydrus_Random_Crashes_Under_Linux.html#memory_overcommmit","text":"We mentioned that Linux will keep giving out memory, but actually it's possible for Linux to launch the OOM killer if it just feel like our program is aking for too much memory too quickly. Since hydrus is a heavyweight scientific processing package we need to turn this feature off. To turn it off change the value of vm.overcommit_memory which defaults to 2 . Set vm.overcommit_memory=1 this prevents the OS from using a heuristic and it will just always give memory to anyone who asks for it.","title":"Memory Overcommmit"},{"location":"Fixing_Hydrus_Random_Crashes_Under_Linux.html#what_about_swappiness","text":"Swapiness is a setting you might have seen, but it only determines Linux's desire to spend a little bit of time moving memory you haven't touched in a while out of real memory and into virtual memory, it will not prevent the OOM condition it just determines how much time to use for moving things into swap.","title":"What about swappiness?"},{"location":"Fixing_Hydrus_Random_Crashes_Under_Linux.html#why_does_my_linux_system_studder_or_become_unresponsive_when_hydrus_has_been_running_a_while","text":"You are running out of pages because Linux releases I/O buffer pages only when a file is closed. Thus the OS is waiting for you to hit the watermark(as described in \"why is hydrus crashing\") to start freeing pages, which causes the chug. When contents is written from memory to disk the page is retained so that if you reread that part of the disk the OS does not need to access disk it just pulls it from the much faster memory. This is usually a good thing, but Hydrus does not close database files so it eats up pages over time. This is really good for hydrus but sucks for the responsiveness of other apps, and will cause hydrus to consume pages after doing a lengthy operation in anticipation of needing them again, even when it is thereafter idle. You need to set vm.dirtytime_expire_seconds to a lower value. vm.dirtytime_expire_seconds When a lazytime inode is constantly having its pages dirtied, the inode with an updated timestamp will never get chance to be written out. And, if the only thing that has happened on the file system is a dirtytime inode caused by an atime update, a worker will be scheduled to make sure that inode eventually gets pushed out to disk. This tunable is used to define when dirty inode is old enough to be eligible for writeback by the kernel flusher threads. And, it is also used as the interval to wakeup dirtytime writeback thread. On many distros this happens only once every 12 hours, try setting it close to every one hour or 2. This will cause the OS to drop pages that were written over 1-2 hours ago. Returning them to the free store for use by other programs. https://www.kernel.org/doc/Documentation/sysctl/vm.txt","title":"Why does my Linux system studder or become unresponsive when hydrus has been running a while?"},{"location":"Fixing_Hydrus_Random_Crashes_Under_Linux.html#why_does_everything_become_clunky_for_a_bit_if_i_have_tuned_all_of_the_above_settings","text":"The kernel launches a process called kswapd to swap and reclaim memory pages, its behaviour is goverened by the following two values vm.vfs_cache_pressure The tendancy for the kernel to reclaim I/O cache for files and directories. Default=100, set to 110 to bias the kernel into reclaiming I/O pages over keeping them at a \"fair rate\" compared to other pages. Hydrus tends to write a lot of files and then ignore them for a long time, so its a good idea to prefer freeing pages for infrequent I/O. Note : Increasing vfs_cache_pressure significantly beyond 100 may have negative performance impact. Reclaim code needs to take various locks to find freeable directory and inode objects. With vfs_cache_pressure=1000 , it will look for ten times more freeable objects than there are. watermark_scale_factor This factor controls the aggressiveness of kswapd. It defines the amount of memory left in a node/system before kswapd is woken up and how much memory needs to be free before kswapd goes back to sleep. The unit is in fractions of 10,000. The default value of 10 means the distances between watermarks are 0.1% of the available memory in the node/system. The maximum value is 1000, or 10% of memory. A high rate of threads entering direct reclaim (allocstall) or kswapd going to sleep prematurely (kswapd_low_wmark_hit_quickly) can indicate that the number of free pages kswapd maintains for latency reasons is too small for the allocation bursts occurring in the system. This knob can then be used to tune kswapd aggressiveness accordingly. I like to keep watermark_scale_factor at 70 (70/10,000)=0.7%, so kswapd will run until at least 0.7% of system memory has been reclaimed. i.e. If 32GiB (real and virt) of memory, it will try to keep at least 0.224 GiB immediately available.","title":"Why does everything become clunky for a bit if I have tuned all of the above settings?"},{"location":"Fixing_Hydrus_Random_Crashes_Under_Linux.html#virtual_memory_under_linux_4_unleash_the_memory","text":"An example /etc/sysctl.conf section for virtual memory settings. ######## # virtual memory ######## #1 always overcommit, prevents the kernel from using a heuristic to decide that a process is bad for asking for a lot of memory at once and killing it. #https://www.kernel.org/doc/Documentation/vm/overcommit-accounting vm.overcommit_memory = 1 #force linux to reclaim pages if under a gigabyte #is available so large chunk allocates don't fire off the OOM killer vm.min_free_kbytes = 1153434 #Start freeing up pages that have been written but which are in open files, after 2 hours. #Allows pages in long lived files to be reclaimed vm.dirtytime_expire_seconds = 7200 #Have kswapd try to reclaim .7% = 70/10000 of pages before returning to sleep #This increases responsiveness by reclaiming a larger portion of pages in low memory condition #So that the next time you make a large allocation the kernel doesn't have to stall and look for pages to free immediately. vm.watermark_scale_factor = 70 #Have the kernel prefer to reclaim I/O pages at 110% of the rate at which it frees other pages. #Don't set this value much over 100 or the kernel will spend all its time reclaiming I/O pages vm.vfs_cache_pressure = 110","title":"Virtual Memory Under Linux 4: Unleash the memory"},{"location":"PTR.html","text":"PTR for Dummies \u00b6 or Myths and facts about the Public Tag Repository What is the PTR? \u00b6 Short for P ublic T ag R epository, a now community managed repository of tags. Locally it acts as a tag service, just like my tags . At the time of writing 54 million files have tags on it. The PTR only store the sha256 hash and tag mappings of a file, not the files themselves or any non-tag meta data. In other words: If you don not see it in the tag list then it is not stored. Most of the things in this document also applies to self-hosted servers , except for tag guidelines. Connecting to the PTR \u00b6 The easiest method is to use the built in function, found under help -> add the public tag repository . For adding it manually, if you so desire, read the Hydrus help document on access keys . If you are starting out completely fresh you can also download a fully synced client here After losing the processed client in a crash or something similar Koto has decided against maintaining a quicksync, you will have to download and process it yourself. Though possibly a bit (couple of days or so usually) out of date it will none the less save time. Some settings may differ from the defaults of an official installation. Once you are connected Hydrus will proceed to download and then process the update files. The progress of this can be seen under services -> review services -> remote -> tag repositories -> public tag repository . Here you can view its status, your account (the default account is a shared public account. Currently only janitors and the administrator have personal accounts), tag status, and how synced you are. Being behind on the sync by a certain amount makes you unable to push tags and petitions until you are caught up again. How does it work? \u00b6 For something to end up on the PTR it has to be pushed there. Tags can either be entered into the tag service manually by the user through the manage tags window, or be routed there by a parser when downloading files. See parsing tags . Once tags have been entered into the PTR tag service they are pending until pushed. This is indicated by the pending () that will appear between tags and help in the menu bar. Here you can chose to either push your changes to the PTR or discard them. Adding tags pass automatically. Deleting (petitioning) tags requires janitor action. If a tag has been deleted from a file it will not be added again. Currently there is no way for a normal user to re-add a deleted tag. If it gets deleted then it is gone. A janitor can undelete tags manually. Adding and petitioning siblings and parents all require janitor action. The client always assumes the server approves any petition. If your petition gets rejected you wont know. When making petitions it is important to remember that janitors are only human. We do not necessarily know everything about every niche. We do not necessarily have the files you are making changes for and we will only see a blank thumbnail if we do not have the file. Explain why you are making a petition. Try and keep the number of files manageable. If a janitor at any point is unsure if the petition is correct they are likely to deny the entire petition rather than risk losing good tags. Some users have pushed changes regarding hundreds of tags over thousands of files at once, but due to disregarding PTR tagging practices or being lazy with justification the petition has been denied entirely. Or they have just been plain wrong, trying to impose frankly stupid tagging methods. Furthermore, if you are two weeks out of sync with PTR you are unable to push additions or deletions until you're back within the threshold. Q: Does this automagically tag my files? A: No. Until we get machine learning based auto-tagging nothing is truly automatic. All tags on the PTR were uploaded by another user, so if nobody uploaded tags associated with the hash of your file it won't have any tags in the PTR. Q: How good is the PTR at tagging [insert file format or thing from site here]? A: That depends largely on if there's a scrapable database of tags for whatever you're asking about. Anything that comes from a booru or site that supports tags is fairly likely to have something on the PTR. Original content on some obscure chan-style imageboard is less so. Q: Help! My files don't have any tags! What do!? A: As stated above, some things are just very likely to not have any tags. It is also possible that the files have been altered by whichever service you downloaded from. Imgur, Reddit, Discord, and many other sites and services recompress images to save space which might give it a different hash even if it looks indistinguishable from the original file. Use one of the IQDB lookup programs linked in Cuddle's wiki . Q: Why is my database so big!? This can't be right. A: It is working as intended. The size is because you are literally downloading and processing the entire tag database and history of the PTR. It is done this way to ensure redundancy and privacy. Redundancy because anybody with an up-to-date PTR sync can just start their own. Privacy because nobody can tell what files you have since you are downloading the tags for everything the PTR has. Q: Does that mean I can't do anything about the size? A: Correct. There are some plans to crunch the size through a few methods but there are a lot of other far more requested features being, well, requested. Speaking crassly if you are bothered by the size requirement of the PTR you probably don't have a big enough library to really benefit and would be better of just using the IQDB script. Janitors \u00b6 Janitors are the people that review petitions. You can meet us at the community Discord to ask questions or see us bitch about some of the silly stuff boorus and users cause to end up in the PTR. Tag Guidelines \u00b6 These are a mix of standard practice used by various boorus and changes made by Hydrus Developer and PTR users, ratified by the janitors that actually have to manage all of this. The \"full\" document is viewable at Cuddle's git repo . See Hydrus Developer's thoughts on a public tagging schema . If you are looking to help out by tagging low tag-count files, remember to keep the tags objective, start simple by for example adding the characters/persons and big obvious things in the image or what else. Tagging every little thing and detail is a sure path to burnout. If you are looking to petition removal of tags then it is preferable to sibling common misspellings, underscores, and defunct tags rather than deleting them outright. The exception is for ambiguous tags where it is better to delete and replace with a less ambiguous tag. When deleting tags that don't belong in the image it can be helpful if you include a short description as to why. It's also helpful if you sanitise downloaded tags from sites with tagged galleries before pushing them to the PTR. For example Pixiv, where you can have a gallery of multiple images, each containing one character, and all of the characters being tagged. Consequently all images in that gallery will have all of the character tags despite no image having more than one character. Siblings and parents \u00b6 When making siblings, go for the closest less-bad tag. Example: bad_tag -> bad tag , rather than going for what the top level sibling might be. This creates less potential future work in case standards change and makes it so your request is less likely to be denied by a janitor not being entirely certain that what you're asking is right. Be careful about creating siblings for potentially ambiguous tags. Is james bond supposed to be character:james bond or is it series:james bond ? This is a bit of a bad example due to having the case of the character always belonging to the series, so you can safely sibling it to series:james bond since all instances of the character will also have the series, but not all instances of the series will have the character. So let us look at another example: how about wool ? Is it the material harvested from sheep, or is it the Malaysian artist that likes to draw Touhou? In doubtful cases it's better to leave it as is, petition the tag for deletion if it's incorrect and add the correct tag. When making parents, make sure it's an always factually correct relationship. character:james bond always belongs to series:james bond . But character:james bond is not always person:pierce brosnan . Common examples of not-always true relationships: gender (genderbending), species (furrynisation/humanisation/anthropomorphism), hair colour, eye colour, and other mutable traits. Namespaces \u00b6 creator: Used for the creator of the tagged piece of media. Hydrus being primarily used for images it will often be the artist that drew the image. Other potential examples are the author of a book or musician for a song. character: Refers to characters. James Bond is a character. person: Refers to real persons. Pierce Brosnan is a person. series: Used for series. James Bond is a series tag and so is GoldenEye . Due to usage being different on some boorus chance is that you will also see things like Absolut Vodka and other brands in it. photoset: Used for photosets. Primarily seen for content from idols, cosplayers, and gravure idols. studio: Is used for the entity that facilitated the production of the file or what's in it. Eon Productions for the James Bond movies. species: Species of the depicted characters/people/animals. Somewhat controversial for being needlessly detailed, some janitors not liking the namespace at all. Primarily used for furry content. title: The title of the file. One of the tags Hydrus uses for various purposes such as sorting and collecting. Somewhat tainted by rampant Reddit parsers. medium: Used for tags about the image and how it's made. Photography, water painting, napkin sketch as a few examples. White background, simple background, checkered background as a few others. What you see about the image. meta: This namespace is used for information that isn't visible in the image itself or where you might need to go to the source. Some examples include: third-party edit, paid reward (patreon/enty/gumroad/fantia/fanbox), translated, commentary, and such. What you know about the image. Namespaces not listed above are not \"supported\" by the janitors and are liable to get siblinged out, removed, and/or mocked if judged being bad and annoying enough to justify the work. Do not take this to mean that all un-listed namespaces are bad, some are created and used by parsers to indicate where an image came from which can be helpful if somebody else wants to fetch the original or check source tags against the PTR tags. But do exercise some care in what you put on the PTR if you use custom namespaces. Recently clothing: was removed due to being disliked, no booru using it, and the person(s) pushing for it seeming to have disappeared, leaving a less-than-finished mess behind. It was also rife with lossy siblings and things that just plain don't belong with clothing, such as clothing:brown hair .","title":"PTR Guide"},{"location":"PTR.html#ptr_for_dummies","text":"or Myths and facts about the Public Tag Repository","title":"PTR for Dummies"},{"location":"PTR.html#what_is_the_ptr","text":"Short for P ublic T ag R epository, a now community managed repository of tags. Locally it acts as a tag service, just like my tags . At the time of writing 54 million files have tags on it. The PTR only store the sha256 hash and tag mappings of a file, not the files themselves or any non-tag meta data. In other words: If you don not see it in the tag list then it is not stored. Most of the things in this document also applies to self-hosted servers , except for tag guidelines.","title":"What is the PTR?"},{"location":"PTR.html#connecting_to_the_ptr","text":"The easiest method is to use the built in function, found under help -> add the public tag repository . For adding it manually, if you so desire, read the Hydrus help document on access keys . If you are starting out completely fresh you can also download a fully synced client here After losing the processed client in a crash or something similar Koto has decided against maintaining a quicksync, you will have to download and process it yourself. Though possibly a bit (couple of days or so usually) out of date it will none the less save time. Some settings may differ from the defaults of an official installation. Once you are connected Hydrus will proceed to download and then process the update files. The progress of this can be seen under services -> review services -> remote -> tag repositories -> public tag repository . Here you can view its status, your account (the default account is a shared public account. Currently only janitors and the administrator have personal accounts), tag status, and how synced you are. Being behind on the sync by a certain amount makes you unable to push tags and petitions until you are caught up again.","title":"Connecting to the PTR"},{"location":"PTR.html#how_does_it_work","text":"For something to end up on the PTR it has to be pushed there. Tags can either be entered into the tag service manually by the user through the manage tags window, or be routed there by a parser when downloading files. See parsing tags . Once tags have been entered into the PTR tag service they are pending until pushed. This is indicated by the pending () that will appear between tags and help in the menu bar. Here you can chose to either push your changes to the PTR or discard them. Adding tags pass automatically. Deleting (petitioning) tags requires janitor action. If a tag has been deleted from a file it will not be added again. Currently there is no way for a normal user to re-add a deleted tag. If it gets deleted then it is gone. A janitor can undelete tags manually. Adding and petitioning siblings and parents all require janitor action. The client always assumes the server approves any petition. If your petition gets rejected you wont know. When making petitions it is important to remember that janitors are only human. We do not necessarily know everything about every niche. We do not necessarily have the files you are making changes for and we will only see a blank thumbnail if we do not have the file. Explain why you are making a petition. Try and keep the number of files manageable. If a janitor at any point is unsure if the petition is correct they are likely to deny the entire petition rather than risk losing good tags. Some users have pushed changes regarding hundreds of tags over thousands of files at once, but due to disregarding PTR tagging practices or being lazy with justification the petition has been denied entirely. Or they have just been plain wrong, trying to impose frankly stupid tagging methods. Furthermore, if you are two weeks out of sync with PTR you are unable to push additions or deletions until you're back within the threshold. Q: Does this automagically tag my files? A: No. Until we get machine learning based auto-tagging nothing is truly automatic. All tags on the PTR were uploaded by another user, so if nobody uploaded tags associated with the hash of your file it won't have any tags in the PTR. Q: How good is the PTR at tagging [insert file format or thing from site here]? A: That depends largely on if there's a scrapable database of tags for whatever you're asking about. Anything that comes from a booru or site that supports tags is fairly likely to have something on the PTR. Original content on some obscure chan-style imageboard is less so. Q: Help! My files don't have any tags! What do!? A: As stated above, some things are just very likely to not have any tags. It is also possible that the files have been altered by whichever service you downloaded from. Imgur, Reddit, Discord, and many other sites and services recompress images to save space which might give it a different hash even if it looks indistinguishable from the original file. Use one of the IQDB lookup programs linked in Cuddle's wiki . Q: Why is my database so big!? This can't be right. A: It is working as intended. The size is because you are literally downloading and processing the entire tag database and history of the PTR. It is done this way to ensure redundancy and privacy. Redundancy because anybody with an up-to-date PTR sync can just start their own. Privacy because nobody can tell what files you have since you are downloading the tags for everything the PTR has. Q: Does that mean I can't do anything about the size? A: Correct. There are some plans to crunch the size through a few methods but there are a lot of other far more requested features being, well, requested. Speaking crassly if you are bothered by the size requirement of the PTR you probably don't have a big enough library to really benefit and would be better of just using the IQDB script.","title":"How does it work?"},{"location":"PTR.html#janitors","text":"Janitors are the people that review petitions. You can meet us at the community Discord to ask questions or see us bitch about some of the silly stuff boorus and users cause to end up in the PTR.","title":"Janitors"},{"location":"PTR.html#tag_guidelines","text":"These are a mix of standard practice used by various boorus and changes made by Hydrus Developer and PTR users, ratified by the janitors that actually have to manage all of this. The \"full\" document is viewable at Cuddle's git repo . See Hydrus Developer's thoughts on a public tagging schema . If you are looking to help out by tagging low tag-count files, remember to keep the tags objective, start simple by for example adding the characters/persons and big obvious things in the image or what else. Tagging every little thing and detail is a sure path to burnout. If you are looking to petition removal of tags then it is preferable to sibling common misspellings, underscores, and defunct tags rather than deleting them outright. The exception is for ambiguous tags where it is better to delete and replace with a less ambiguous tag. When deleting tags that don't belong in the image it can be helpful if you include a short description as to why. It's also helpful if you sanitise downloaded tags from sites with tagged galleries before pushing them to the PTR. For example Pixiv, where you can have a gallery of multiple images, each containing one character, and all of the characters being tagged. Consequently all images in that gallery will have all of the character tags despite no image having more than one character.","title":"Tag Guidelines"},{"location":"PTR.html#siblings_and_parents","text":"When making siblings, go for the closest less-bad tag. Example: bad_tag -> bad tag , rather than going for what the top level sibling might be. This creates less potential future work in case standards change and makes it so your request is less likely to be denied by a janitor not being entirely certain that what you're asking is right. Be careful about creating siblings for potentially ambiguous tags. Is james bond supposed to be character:james bond or is it series:james bond ? This is a bit of a bad example due to having the case of the character always belonging to the series, so you can safely sibling it to series:james bond since all instances of the character will also have the series, but not all instances of the series will have the character. So let us look at another example: how about wool ? Is it the material harvested from sheep, or is it the Malaysian artist that likes to draw Touhou? In doubtful cases it's better to leave it as is, petition the tag for deletion if it's incorrect and add the correct tag. When making parents, make sure it's an always factually correct relationship. character:james bond always belongs to series:james bond . But character:james bond is not always person:pierce brosnan . Common examples of not-always true relationships: gender (genderbending), species (furrynisation/humanisation/anthropomorphism), hair colour, eye colour, and other mutable traits.","title":"Siblings and parents"},{"location":"PTR.html#namespaces","text":"creator: Used for the creator of the tagged piece of media. Hydrus being primarily used for images it will often be the artist that drew the image. Other potential examples are the author of a book or musician for a song. character: Refers to characters. James Bond is a character. person: Refers to real persons. Pierce Brosnan is a person. series: Used for series. James Bond is a series tag and so is GoldenEye . Due to usage being different on some boorus chance is that you will also see things like Absolut Vodka and other brands in it. photoset: Used for photosets. Primarily seen for content from idols, cosplayers, and gravure idols. studio: Is used for the entity that facilitated the production of the file or what's in it. Eon Productions for the James Bond movies. species: Species of the depicted characters/people/animals. Somewhat controversial for being needlessly detailed, some janitors not liking the namespace at all. Primarily used for furry content. title: The title of the file. One of the tags Hydrus uses for various purposes such as sorting and collecting. Somewhat tainted by rampant Reddit parsers. medium: Used for tags about the image and how it's made. Photography, water painting, napkin sketch as a few examples. White background, simple background, checkered background as a few others. What you see about the image. meta: This namespace is used for information that isn't visible in the image itself or where you might need to go to the source. Some examples include: third-party edit, paid reward (patreon/enty/gumroad/fantia/fanbox), translated, commentary, and such. What you know about the image. Namespaces not listed above are not \"supported\" by the janitors and are liable to get siblinged out, removed, and/or mocked if judged being bad and annoying enough to justify the work. Do not take this to mean that all un-listed namespaces are bad, some are created and used by parsers to indicate where an image came from which can be helpful if somebody else wants to fetch the original or check source tags against the PTR tags. But do exercise some care in what you put on the PTR if you use custom namespaces. Recently clothing: was removed due to being disliked, no booru using it, and the person(s) pushing for it seeming to have disappeared, leaving a less-than-finished mess behind. It was also rife with lossy siblings and things that just plain don't belong with clothing, such as clothing:brown hair .","title":"Namespaces"},{"location":"Understanding_Database_Synchronization.html","text":"Understanding Database Synchronization options \u00b6 Tuning your database synchronization using the --db_synchronous_override=0 launch argument can make Hydrus significantly faster with some caveats. Key Points \u00b6 This is a tutorial for advanced users who have read and understood this document and the risk/recovery procedure. It is nearly always safe to use --db_synchrnous_override=1 on any modern filesystem and this is the default. It is always more expensive to access the disk than doing things in memory. SSDs are 10-100x as slow, and HDDs are 1000-10000x as slow as memory. If you turn synchronization to 0 you are gambling, but it is a safe gamble if you have a backup and know exactly what you are doing After running with synchronization set to zero you must either: Exit hydrus normally and let the OS flush disk caches (either by letting the system run/\"idle\" for a while, running sync on *NIX systems, or normal shutdown), or Restore the sqlite database files backup if the OS shutdown abnormally . Because of the potential for a lot of outstanding writes when using synchronous=0 , other I/O on your system will slow down as the pending writes are interleaved. Normal shutdown may also take abnormally long because the system is flushing these pending writes, but you must allow it to take its time as explained in the section below. In historical versions of hydrus ( synchronous=2 ), performance was terrible because hydrus would agressively (it was arguably somewhat paranoid) write changes to disk. The Secret Sauce \u00b6 Setting the synchronous to 0 lets the database engine defer writing to disk as long as physically possible. In the normal operation of your system, files are constantly being partially transfered to disk, even if the OS pretends they have been fully written to disk. This is called write cache and it is really important to use it or your system's performance would be terrible. The caveat is that until you have \" flushed \" the disk cache, the changes to files are not actually in permanent storage. One purpose of a normal shutdown of the operating system is to make sure all disk caches have been flushed. A program can also request that a file it has just written to be flushed, and it will wait until that is done before continuing. When not in synchronous 0 mode, the database engine flushes at regular intervals to make sure data has been written. - Setting synchronous to 0 is generally safe if and only if the system also shuts down normally, allowing any of these pending writes to be flushed. - The database can back out of partial changes if hydrus crashes even if synchronous=0 , so your database will not go corrupt from hydrus shutting down abnormally, only from the system shutting down abnormally. Technical Explanation \u00b6 Programmers are responsible for handling partially written files, but this is tedious for large complex data, so they use a database engine which handles all of this. The database ensures that any partially written data is reversible to a known state (called a rollback). An example journal \u00b6 Begin Transaction 1 Write Change 1 Write Change 2 Read data Write Change 3 End Transaction 1 Each of these steps are performed in order. Suppose a crash occcured mid writing Begin Transaction 1 Write Change 1 Write Cha When the database resumes it will start scanning the journal at step 1. Since it will reach the end without seeing End Transaction 1 it knows that data was only partialy written, and can put the data back in the state before transaction 1 began. This property of a database is called atomicity in the sense that something atomic is \"indivisible\"; either all of the steps in transaction 1 occur or non of them occur. Hydrus is structured in such a way that the database is written to to keep track of your file catalog only once the file has been fully imported and moved where it is supposed to be. Thus every action hydrus takes is kept \"atomic\" or \"repeatable\" (redo existing work that was partway through). If hydrus crashes in the middle of importing a file, then when it resumes, as far as it is aware, it didn't even start importing the file. It will repeat the steps from the start until the file catalog is \"consistent\" with what is on disk. Where synchronization comes in \u00b6 Lets revisit the journal, this time with two transactions. Note that the database is flushing after step 6 and thus will have to wait for the OS to write to disk before proceeding, holding up any other access. Begin Transaction 1 Write Change 1 Write Change 2 Read data Write Change 3 FLUSH End Transaction 1 FLUSH Begin Transaction 2 Write Change 2 Write Change 2 Read data Write Change 3 FLUSH End Transaction 2 FLUSH What happens if we remove step 6 and 8 and then die at step 11? Begin Transaction 1 Write Change 1 Write Change 2 Read data Write Change 3 FLUSH End Transaction 1 FLUSH Begin Transaction 2 Write Change 2 Write Ch What if we crash and step, End Transaction has not been written to disk. Now not only do we need to repeat transaction 2, we also need to repeat transaction 1. Note that this just increaeses the ammount of repeatable work, and actually is fully recoverable (assuming a file you were downloading didn't cease to exist in the interim). Now what happens if we do the above and the OS crashes? You might be wondering what this has to do with synchronization exactly. Well the OS is not obligated to write chunks of the database file in the order you give it to them, in fact for harddrives it is optimal to scatter chunks of the file around the spinning disks so it might arbitrarily reorder your write calls. The only way you can be certain that all of the changes in the transaction have been written before writing END Transaction is to flush() . The only way to flush is by request of the program or normal closing of the file and final flushing before system power off. Thus if the OS crashes at the exact wrong moment, there is no way to be sure that the journal is correct if flushing was skipped ( synchronous=0 ). This means there is no way for you to determine whether the database file is correct after a system crash if you had synchronous 0, and you must restore your files from backup to be sure they are in a known good state. So, setting synchronous=0 gets you a pretty huge speed boost, but you are gambling that everything goes perfectly and will pay the price of a manual restore every time it doesn't.","title":"Understanding Database Synchronization options"},{"location":"Understanding_Database_Synchronization.html#understanding_database_synchronization_options","text":"Tuning your database synchronization using the --db_synchronous_override=0 launch argument can make Hydrus significantly faster with some caveats.","title":"Understanding Database Synchronization options"},{"location":"Understanding_Database_Synchronization.html#key_points","text":"This is a tutorial for advanced users who have read and understood this document and the risk/recovery procedure. It is nearly always safe to use --db_synchrnous_override=1 on any modern filesystem and this is the default. It is always more expensive to access the disk than doing things in memory. SSDs are 10-100x as slow, and HDDs are 1000-10000x as slow as memory. If you turn synchronization to 0 you are gambling, but it is a safe gamble if you have a backup and know exactly what you are doing After running with synchronization set to zero you must either: Exit hydrus normally and let the OS flush disk caches (either by letting the system run/\"idle\" for a while, running sync on *NIX systems, or normal shutdown), or Restore the sqlite database files backup if the OS shutdown abnormally . Because of the potential for a lot of outstanding writes when using synchronous=0 , other I/O on your system will slow down as the pending writes are interleaved. Normal shutdown may also take abnormally long because the system is flushing these pending writes, but you must allow it to take its time as explained in the section below. In historical versions of hydrus ( synchronous=2 ), performance was terrible because hydrus would agressively (it was arguably somewhat paranoid) write changes to disk.","title":"Key Points"},{"location":"Understanding_Database_Synchronization.html#the_secret_sauce","text":"Setting the synchronous to 0 lets the database engine defer writing to disk as long as physically possible. In the normal operation of your system, files are constantly being partially transfered to disk, even if the OS pretends they have been fully written to disk. This is called write cache and it is really important to use it or your system's performance would be terrible. The caveat is that until you have \" flushed \" the disk cache, the changes to files are not actually in permanent storage. One purpose of a normal shutdown of the operating system is to make sure all disk caches have been flushed. A program can also request that a file it has just written to be flushed, and it will wait until that is done before continuing. When not in synchronous 0 mode, the database engine flushes at regular intervals to make sure data has been written. - Setting synchronous to 0 is generally safe if and only if the system also shuts down normally, allowing any of these pending writes to be flushed. - The database can back out of partial changes if hydrus crashes even if synchronous=0 , so your database will not go corrupt from hydrus shutting down abnormally, only from the system shutting down abnormally.","title":"The Secret Sauce"},{"location":"Understanding_Database_Synchronization.html#technical_explanation","text":"Programmers are responsible for handling partially written files, but this is tedious for large complex data, so they use a database engine which handles all of this. The database ensures that any partially written data is reversible to a known state (called a rollback).","title":"Technical Explanation"},{"location":"Understanding_Database_Synchronization.html#an_example_journal","text":"Begin Transaction 1 Write Change 1 Write Change 2 Read data Write Change 3 End Transaction 1 Each of these steps are performed in order. Suppose a crash occcured mid writing Begin Transaction 1 Write Change 1 Write Cha When the database resumes it will start scanning the journal at step 1. Since it will reach the end without seeing End Transaction 1 it knows that data was only partialy written, and can put the data back in the state before transaction 1 began. This property of a database is called atomicity in the sense that something atomic is \"indivisible\"; either all of the steps in transaction 1 occur or non of them occur. Hydrus is structured in such a way that the database is written to to keep track of your file catalog only once the file has been fully imported and moved where it is supposed to be. Thus every action hydrus takes is kept \"atomic\" or \"repeatable\" (redo existing work that was partway through). If hydrus crashes in the middle of importing a file, then when it resumes, as far as it is aware, it didn't even start importing the file. It will repeat the steps from the start until the file catalog is \"consistent\" with what is on disk.","title":"An example journal"},{"location":"Understanding_Database_Synchronization.html#where_synchronization_comes_in","text":"Lets revisit the journal, this time with two transactions. Note that the database is flushing after step 6 and thus will have to wait for the OS to write to disk before proceeding, holding up any other access. Begin Transaction 1 Write Change 1 Write Change 2 Read data Write Change 3 FLUSH End Transaction 1 FLUSH Begin Transaction 2 Write Change 2 Write Change 2 Read data Write Change 3 FLUSH End Transaction 2 FLUSH What happens if we remove step 6 and 8 and then die at step 11? Begin Transaction 1 Write Change 1 Write Change 2 Read data Write Change 3 FLUSH End Transaction 1 FLUSH Begin Transaction 2 Write Change 2 Write Ch What if we crash and step, End Transaction has not been written to disk. Now not only do we need to repeat transaction 2, we also need to repeat transaction 1. Note that this just increaeses the ammount of repeatable work, and actually is fully recoverable (assuming a file you were downloading didn't cease to exist in the interim). Now what happens if we do the above and the OS crashes? You might be wondering what this has to do with synchronization exactly. Well the OS is not obligated to write chunks of the database file in the order you give it to them, in fact for harddrives it is optimal to scatter chunks of the file around the spinning disks so it might arbitrarily reorder your write calls. The only way you can be certain that all of the changes in the transaction have been written before writing END Transaction is to flush() . The only way to flush is by request of the program or normal closing of the file and final flushing before system power off. Thus if the OS crashes at the exact wrong moment, there is no way to be sure that the journal is correct if flushing was skipped ( synchronous=0 ). This means there is no way for you to determine whether the database file is correct after a system crash if you had synchronous 0, and you must restore your files from backup to be sure they are in a known good state. So, setting synchronous=0 gets you a pretty huge speed boost, but you are gambling that everything goes perfectly and will pay the price of a manual restore every time it doesn't.","title":"Where synchronization comes in"},{"location":"about_docs.html","text":"About These Docs \u00b6 The Hydrus docs are built with MkDocs using the Material for MkDocs theme. The .md files in the docs directory are converted into nice html in the help directory. This is done automatically in the built releases, but if you run from source, you will want to build your own. Local Setup \u00b6 To see or work on the docs locally, install mkdocs-material : The recommended installation method is pip : pip install mkdocs-material Building \u00b6 To build the help, run: mkdocs build -d help In the base hydrus directory (same as the mkdocs.yml file), which will build it into the help directory. You will then be good! Repeat the command and MkDocs will clear out the old directory and update it, so you can fold this into any update script. Live Preview \u00b6 To edit the docs directory, you can run the live preview development server with: mkdocs serve Again in the base hydrus directory. It will host the help site at http://127.0.0.1:8000/ , and when you change a file, it will automatically rebuild and reload the page in your browser.","title":"About These Docs"},{"location":"about_docs.html#about_these_docs","text":"The Hydrus docs are built with MkDocs using the Material for MkDocs theme. The .md files in the docs directory are converted into nice html in the help directory. This is done automatically in the built releases, but if you run from source, you will want to build your own.","title":"About These Docs"},{"location":"about_docs.html#local_setup","text":"To see or work on the docs locally, install mkdocs-material : The recommended installation method is pip : pip install mkdocs-material","title":"Local Setup"},{"location":"about_docs.html#building","text":"To build the help, run: mkdocs build -d help In the base hydrus directory (same as the mkdocs.yml file), which will build it into the help directory. You will then be good! Repeat the command and MkDocs will clear out the old directory and update it, so you can fold this into any update script.","title":"Building"},{"location":"about_docs.html#live_preview","text":"To edit the docs directory, you can run the live preview development server with: mkdocs serve Again in the base hydrus directory. It will host the help site at http://127.0.0.1:8000/ , and when you change a file, it will automatically rebuild and reload the page in your browser.","title":"Live Preview"},{"location":"access_keys.html","text":"The PTR is now run by users with more bandwidth than I had to give, so the bandwidth limits are gone! If you would like to talk with the new management, please check the discord . A guide and schema for the new PTR is here . first off \u00b6 I don't like it when programs I use connect anywhere without asking me, so I have purposely not pre-baked any default repositories into the client. You have to choose to connect yourself. The client will never connect anywhere until you tell it to. For a long time, I ran the Public Tag Repository myself and was the lone janitor. It grew to 650 million tags, and siblings and parents were just getting complicated, and I no longer had the bandwidth or time it deserved. It is now run by users. There also used to be just one user account that everyone shared. Everyone was essentially the same Anon, and all uploads were merged to that one ID. As the PTR became more popular, and more sophisticated and automatically generated content was being added, it became increasingly difficult for the janitors to separate good submissions from bad and undo large scale mistakes. That old shared account is now a 'read-only' account. This account can only download--it cannot upload new tags or siblings/parents. Users who want to upload now generate their own individual accounts, which are still Anon, but separate, which helps janitors approve and deny uploaded petitions more accurately and efficiently. I recommend using the shared read-only account, below, to start with, but if you decide you would like to upload, making your own account is easy--just click the 'check for automatic account creation' button in services->manage services , and you should be good. You can change your access key on an existing service--you don't need to delete and re-add or anything--and your client should quickly resync and recognise your new permissions. privacy \u00b6 I have tried very hard to ensure the PTR respects your privacy. Your account is a very barebones thing--all a server stores is a couple of random hexadecimal texts and which rows of content you uploaded, and even the memory of what you uploaded is deleted after a delay. The server obviously needs to be aware of your IP address to accept your network request, but it forgets it as soon as the job is done. Normal users are never told which accounts submitted any content, so the only privacy implications are against janitors or (more realistically, since the janitor UI is even more buggy and feature-poor than the hydrus front-end!) the server owner or anyone else with raw access to the server as it operates or its database files. Most users should have very few worries about privacy. The general rule is that it is always healthy to use a VPN, but please check here for a full discussion and explanation of the anonymisation routine . a note on resources \u00b6 Danger If you are on an HDD, or your SSD does not have at least 64GB of free space, do not add the PTR! The PTR has been operating since 2011 and is now huge, more than a billion mappings! Your client will be downloading and indexing them all, which is currently (2021-06) about 6GB of bandwidth and 50GB of hard drive space. It will take hours of total processing time to catch up on all the years of submissions. Furthermore, because of mechanical drive latency, HDDs are too slow to process all the content in reasonable time. Syncing is only recommended if your hydrus db is on an SSD . Even then, it is healthier and allows the client to 'grow into' the PTR if the work is done in small pieces in the background, either during idle time or shutdown time, rather than trying to do it all at once. Just leave it to download and process on its own--it usually takes a couple of weeks to quietly catch up. You'll see tags appear on your files as it proceeds, first on older, then all the way up to new files just uploaded a couple days ago. Once you are synced, the daily processing work to stay synced is usually just a few minutes. If you leave your client on all the time in the background, you'll likely never notice it. easy setup \u00b6 Hit help->add the public tag repository and you will all be set up. manually \u00b6 Hit services->manage services and click add->hydrus tag repository . You'll get a panel, fill it out like this: Here's the info so you can copy it: address ptr.hydrus.network port 45871 access key 4a285629721ca442541ef2c15ea17d1f7f7578b0c3f4f5f2a05f8f0ab297786f Note that because this is the public shared key, you can ignore the ' DO NOT SHARE ' red text warning. It is worth checking the 'test address' and 'test access key' buttons just to double-check your firewall and key are all correct. Notice the 'check for automatic account creation' button, for if and when you decide you want to contribute to the PTR. Then you can check your PTR at any time under services->review services , under the 'remote' tab: jump-starting an install \u00b6 A user kindly manages a store of update files and pre-processed empty client databases to get your synced quicker. This is generally recommended for advanced users or those following a guide, but if you are otherwise interested, please check it out: https://cuddlebear92.github.io/Quicksync/","title":"PTR access keys"},{"location":"access_keys.html#first_off","text":"I don't like it when programs I use connect anywhere without asking me, so I have purposely not pre-baked any default repositories into the client. You have to choose to connect yourself. The client will never connect anywhere until you tell it to. For a long time, I ran the Public Tag Repository myself and was the lone janitor. It grew to 650 million tags, and siblings and parents were just getting complicated, and I no longer had the bandwidth or time it deserved. It is now run by users. There also used to be just one user account that everyone shared. Everyone was essentially the same Anon, and all uploads were merged to that one ID. As the PTR became more popular, and more sophisticated and automatically generated content was being added, it became increasingly difficult for the janitors to separate good submissions from bad and undo large scale mistakes. That old shared account is now a 'read-only' account. This account can only download--it cannot upload new tags or siblings/parents. Users who want to upload now generate their own individual accounts, which are still Anon, but separate, which helps janitors approve and deny uploaded petitions more accurately and efficiently. I recommend using the shared read-only account, below, to start with, but if you decide you would like to upload, making your own account is easy--just click the 'check for automatic account creation' button in services->manage services , and you should be good. You can change your access key on an existing service--you don't need to delete and re-add or anything--and your client should quickly resync and recognise your new permissions.","title":"first off"},{"location":"access_keys.html#privacy","text":"I have tried very hard to ensure the PTR respects your privacy. Your account is a very barebones thing--all a server stores is a couple of random hexadecimal texts and which rows of content you uploaded, and even the memory of what you uploaded is deleted after a delay. The server obviously needs to be aware of your IP address to accept your network request, but it forgets it as soon as the job is done. Normal users are never told which accounts submitted any content, so the only privacy implications are against janitors or (more realistically, since the janitor UI is even more buggy and feature-poor than the hydrus front-end!) the server owner or anyone else with raw access to the server as it operates or its database files. Most users should have very few worries about privacy. The general rule is that it is always healthy to use a VPN, but please check here for a full discussion and explanation of the anonymisation routine .","title":"privacy"},{"location":"access_keys.html#ssd","text":"Danger If you are on an HDD, or your SSD does not have at least 64GB of free space, do not add the PTR! The PTR has been operating since 2011 and is now huge, more than a billion mappings! Your client will be downloading and indexing them all, which is currently (2021-06) about 6GB of bandwidth and 50GB of hard drive space. It will take hours of total processing time to catch up on all the years of submissions. Furthermore, because of mechanical drive latency, HDDs are too slow to process all the content in reasonable time. Syncing is only recommended if your hydrus db is on an SSD . Even then, it is healthier and allows the client to 'grow into' the PTR if the work is done in small pieces in the background, either during idle time or shutdown time, rather than trying to do it all at once. Just leave it to download and process on its own--it usually takes a couple of weeks to quietly catch up. You'll see tags appear on your files as it proceeds, first on older, then all the way up to new files just uploaded a couple days ago. Once you are synced, the daily processing work to stay synced is usually just a few minutes. If you leave your client on all the time in the background, you'll likely never notice it.","title":"a note on resources"},{"location":"access_keys.html#easy_setup","text":"Hit help->add the public tag repository and you will all be set up.","title":"easy setup"},{"location":"access_keys.html#manually","text":"Hit services->manage services and click add->hydrus tag repository . You'll get a panel, fill it out like this: Here's the info so you can copy it: address ptr.hydrus.network port 45871 access key 4a285629721ca442541ef2c15ea17d1f7f7578b0c3f4f5f2a05f8f0ab297786f Note that because this is the public shared key, you can ignore the ' DO NOT SHARE ' red text warning. It is worth checking the 'test address' and 'test access key' buttons just to double-check your firewall and key are all correct. Notice the 'check for automatic account creation' button, for if and when you decide you want to contribute to the PTR. Then you can check your PTR at any time under services->review services , under the 'remote' tab:","title":"manually"},{"location":"access_keys.html#quicksync","text":"A user kindly manages a store of update files and pre-processed empty client databases to get your synced quicker. This is generally recommended for advanced users or those following a guide, but if you are otherwise interested, please check it out: https://cuddlebear92.github.io/Quicksync/","title":"jump-starting an install"},{"location":"adding_new_downloaders.html","text":"adding new downloaders \u00b6 all downloaders are user-creatable and -shareable \u00b6 Since the big downloader overhaul, all downloaders can be created, edited, and shared by any user. Creating one from scratch is not simple, and it takes a little technical knowledge, but importing what someone else has created is easy. Hydrus objects like downloaders can sometimes be shared as data encoded into png files, like this: This contains all the information needed for a client to add a realbooru tag search entry to the list you select from when you start a new download or subscription. You can get these pngs from anyone who has experience in the downloader system. An archive is maintained here . To 'add' the easy-import pngs to your client, hit network->downloaders->import downloaders . A little image-panel will appear onto which you can drag-and-drop these png files. The client will then decode and go through the png, looking for interesting new objects and automatically import and link them up without you having to do any more. Your only further input on your end is a 'does this look correct?' check right before the actual import, just to make sure there isn't some mistake or other glaring problem. Objects imported this way will take precedence over existing functionality, so if one of your downloaders breaks due to a site change, importing a fixed png here will overwrite the broken entries and become the new default.","title":"adding new downloaders"},{"location":"adding_new_downloaders.html#adding_new_downloaders","text":"","title":"adding new downloaders"},{"location":"adding_new_downloaders.html#anonymous","text":"Since the big downloader overhaul, all downloaders can be created, edited, and shared by any user. Creating one from scratch is not simple, and it takes a little technical knowledge, but importing what someone else has created is easy. Hydrus objects like downloaders can sometimes be shared as data encoded into png files, like this: This contains all the information needed for a client to add a realbooru tag search entry to the list you select from when you start a new download or subscription. You can get these pngs from anyone who has experience in the downloader system. An archive is maintained here . To 'add' the easy-import pngs to your client, hit network->downloaders->import downloaders . A little image-panel will appear onto which you can drag-and-drop these png files. The client will then decode and go through the png, looking for interesting new objects and automatically import and link them up without you having to do any more. Your only further input on your end is a 'does this look correct?' check right before the actual import, just to make sure there isn't some mistake or other glaring problem. Objects imported this way will take precedence over existing functionality, so if one of your downloaders breaks due to a site change, importing a fixed png here will overwrite the broken entries and become the new default.","title":"all downloaders are user-creatable and -shareable"},{"location":"advanced.html","text":"this is non-comprehensive I am always changing and adding little things. The best way to learn is just to look around. If you think a shortcut should probably do something, try it out! If you can't find something, let me know and I'll try to add it! advanced mode \u00b6 To avoid confusing clutter, several advanced menu items and buttons are hidden by default. When you are comfortable with the program, hit help->advanced mode to reveal them! exclude deleted files \u00b6 In the client's options is a checkbox to exclude deleted files. It recurs pretty much anywhere you can import, under 'import file options'. If you select this, any file you ever deleted will be excluded from all future remote searches and import operations. This can stop you from importing/downloading and filtering out the same bad files several times over. The default is off. You may wish to have it set one way most of the time, but switch it the other just for one specific import or search. inputting non-english lanuages \u00b6 If you typically use an IME to input Japanese or another non-english language, you may have encountered problems entering into the autocomplete tag entry control in that you need Up/Down/Enter to navigate the IME, but the autocomplete steals those key presses away to navigate the list of results. To fix this, press Insert to temporarily disable the autocomplete's key event capture. The autocomplete text box will change colour to let you know it has released its normal key capture. Use your IME to get the text you want, then hit Insert again to restore the autocomplete to normal behaviour. tag display \u00b6 If you do not like a particular tag or namespace, you can easily hide it with tags->manage tag display and search : This image is out of date, sorry! You can exclude single tags, like as shown above, or entire namespaces (enter the colon, like 'species:'), or all namespaced tags (use ':'), or all unnamespaced tags (''). 'all known tags' will be applied to everything, as well as any repository-specific rules you set. A blacklist excludes whatever is listed; a whitelist excludes whatever is not listed. This censorship is local to your client. No one else will experience your changes or know what you have censored. importing and adding tags at the same time \u00b6 Add tags before importing on file->import files lets you give tags to the files you import en masse , and intelligently, using regexes that parse filename: This should be somewhat self-explanatory to anyone familiar with regexes. I hate them, personally, but I recognise they are powerful and exactly the right tool to use in this case. This is a good introduction. Once you are done, you'll get something neat like this: Which you can more easily manage by collecting: Collections have a small icon in the bottom left corner. Selecting them actually selects many files (see the status bar), and performing an action on them (like archiving, uploading) will do so to every file in the collection. Viewing collections fullscreen pages through their contents just like an uncollected search. Here is a particularly zoomed out view, after importing volume 2: Importing with tags is great for long-running series with well-formatted filenames, and will save you literally hours' finicky tagging. tag migration \u00b6 Danger At some point I will write some better help for this system, which is powerful. Be careful with it! Sometimes, you may wish to move thousands or millions of tags from one place to another. These actions are now collected in one place: services->tag migration . It proceeds from left to right, reading data from the source and applying it to the destination with the certain action. There are multiple filters available to select which sorts of tag mappings or siblings or parents will be selected from the source. The source and destination can be the same, for instance if you wanted to delete all 'clothing:' tags from a service, you would pull all those tags and then apply the 'delete' action on the same service. You can import from and export to Hydrus Tag Archives (HTAs), which are external, portable .db files. In this way, you can move millions of tags between two hydrus clients, or share with a friend, or import from an HTA put together from a website scrape. Tag Migration is a powerful system. Be very careful with it. Do small experiments before starting large jobs, and if you intend to migrate millions of tags, make a backup of your db beforehand, just in case it goes wrong. This system was once much more simple, but it still had HTA support. If you wish to play around with some HTAs, there are some old user-created ones here . custom shortcuts \u00b6 Once you are comfortable with manually setting tags and ratings, you may be interested in setting some shortcuts to do it quicker. Try hitting file->shortcuts or clicking the keyboard icon on any media viewer window's top hover window. There are two kinds of shortcuts in the program-- reserved , which have fixed names, are undeletable, and are always active in certain contexts (related to their name), and custom , which you create and name and edit and are only active in a media viewer when you want them to. You can redefine some simple shortcut commands, but most importantly, you can create shortcuts for adding/removing a tag or setting/unsetting a rating. Use the same 'keyboard' icon to set the current and default custom shortcuts. finding duplicates \u00b6 system:similar_to lets you run the duplicates processing page's searches manually. You can either insert the hash and hamming distance manually, or you can launch these searches automatically from the thumbnail right-click->find similar files menu. For example: truncated/malformed file import errors \u00b6 Some files, even though they seem ok in another program, will not import to hydrus. This is usually because they file has some 'truncated' or broken data, probably due to a bad upload or storage at some point in its internet history. While sophisticated external programs can usually patch the error (often rendering the bottom lines of a jpeg as grey, for instance), hydrus is not so clever. Please feel free to send or link me, hydrus developer, to these files, so I can check them out on my end and try to fix support. If the file is one you particularly care about, the easiest solution is to open it in photoshop or gimp and save it again. Those programs should be clever enough to parse the file's weirdness, and then make a nice clean saved file when it exports. That new file should be importable to hydrus. setting a password \u00b6 the client offers a very simple password system, enough to keep out noobs. You can set it at database->set a password . It will thereafter ask for the password every time you start the program, and will not open without it. However none of the database is encrypted, and someone with enough enthusiasm or a tool and access to your computer can still very easily see what files you have. The password is mainly to stop idle snoops checking your images if you are away from your machine.","title":"general clever tricks"},{"location":"advanced.html#advanced_mode","text":"To avoid confusing clutter, several advanced menu items and buttons are hidden by default. When you are comfortable with the program, hit help->advanced mode to reveal them!","title":"advanced mode"},{"location":"advanced.html#exclude_deleted_files","text":"In the client's options is a checkbox to exclude deleted files. It recurs pretty much anywhere you can import, under 'import file options'. If you select this, any file you ever deleted will be excluded from all future remote searches and import operations. This can stop you from importing/downloading and filtering out the same bad files several times over. The default is off. You may wish to have it set one way most of the time, but switch it the other just for one specific import or search.","title":"exclude deleted files"},{"location":"advanced.html#ime","text":"If you typically use an IME to input Japanese or another non-english language, you may have encountered problems entering into the autocomplete tag entry control in that you need Up/Down/Enter to navigate the IME, but the autocomplete steals those key presses away to navigate the list of results. To fix this, press Insert to temporarily disable the autocomplete's key event capture. The autocomplete text box will change colour to let you know it has released its normal key capture. Use your IME to get the text you want, then hit Insert again to restore the autocomplete to normal behaviour.","title":"inputting non-english lanuages"},{"location":"advanced.html#tag_display","text":"If you do not like a particular tag or namespace, you can easily hide it with tags->manage tag display and search : This image is out of date, sorry! You can exclude single tags, like as shown above, or entire namespaces (enter the colon, like 'species:'), or all namespaced tags (use ':'), or all unnamespaced tags (''). 'all known tags' will be applied to everything, as well as any repository-specific rules you set. A blacklist excludes whatever is listed; a whitelist excludes whatever is not listed. This censorship is local to your client. No one else will experience your changes or know what you have censored.","title":"tag display"},{"location":"advanced.html#importing_with_tags","text":"Add tags before importing on file->import files lets you give tags to the files you import en masse , and intelligently, using regexes that parse filename: This should be somewhat self-explanatory to anyone familiar with regexes. I hate them, personally, but I recognise they are powerful and exactly the right tool to use in this case. This is a good introduction. Once you are done, you'll get something neat like this: Which you can more easily manage by collecting: Collections have a small icon in the bottom left corner. Selecting them actually selects many files (see the status bar), and performing an action on them (like archiving, uploading) will do so to every file in the collection. Viewing collections fullscreen pages through their contents just like an uncollected search. Here is a particularly zoomed out view, after importing volume 2: Importing with tags is great for long-running series with well-formatted filenames, and will save you literally hours' finicky tagging.","title":"importing and adding tags at the same time"},{"location":"advanced.html#tag_migration","text":"Danger At some point I will write some better help for this system, which is powerful. Be careful with it! Sometimes, you may wish to move thousands or millions of tags from one place to another. These actions are now collected in one place: services->tag migration . It proceeds from left to right, reading data from the source and applying it to the destination with the certain action. There are multiple filters available to select which sorts of tag mappings or siblings or parents will be selected from the source. The source and destination can be the same, for instance if you wanted to delete all 'clothing:' tags from a service, you would pull all those tags and then apply the 'delete' action on the same service. You can import from and export to Hydrus Tag Archives (HTAs), which are external, portable .db files. In this way, you can move millions of tags between two hydrus clients, or share with a friend, or import from an HTA put together from a website scrape. Tag Migration is a powerful system. Be very careful with it. Do small experiments before starting large jobs, and if you intend to migrate millions of tags, make a backup of your db beforehand, just in case it goes wrong. This system was once much more simple, but it still had HTA support. If you wish to play around with some HTAs, there are some old user-created ones here .","title":"tag migration"},{"location":"advanced.html#shortcuts","text":"Once you are comfortable with manually setting tags and ratings, you may be interested in setting some shortcuts to do it quicker. Try hitting file->shortcuts or clicking the keyboard icon on any media viewer window's top hover window. There are two kinds of shortcuts in the program-- reserved , which have fixed names, are undeletable, and are always active in certain contexts (related to their name), and custom , which you create and name and edit and are only active in a media viewer when you want them to. You can redefine some simple shortcut commands, but most importantly, you can create shortcuts for adding/removing a tag or setting/unsetting a rating. Use the same 'keyboard' icon to set the current and default custom shortcuts.","title":"custom shortcuts"},{"location":"advanced.html#finding_duplicates","text":"system:similar_to lets you run the duplicates processing page's searches manually. You can either insert the hash and hamming distance manually, or you can launch these searches automatically from the thumbnail right-click->find similar files menu. For example:","title":"finding duplicates"},{"location":"advanced.html#file_import_errors","text":"Some files, even though they seem ok in another program, will not import to hydrus. This is usually because they file has some 'truncated' or broken data, probably due to a bad upload or storage at some point in its internet history. While sophisticated external programs can usually patch the error (often rendering the bottom lines of a jpeg as grey, for instance), hydrus is not so clever. Please feel free to send or link me, hydrus developer, to these files, so I can check them out on my end and try to fix support. If the file is one you particularly care about, the easiest solution is to open it in photoshop or gimp and save it again. Those programs should be clever enough to parse the file's weirdness, and then make a nice clean saved file when it exports. That new file should be importable to hydrus.","title":"truncated/malformed file import errors"},{"location":"advanced.html#password","text":"the client offers a very simple password system, enough to keep out noobs. You can set it at database->set a password . It will thereafter ask for the password every time you start the program, and will not open without it. However none of the database is encrypted, and someone with enough enthusiasm or a tool and access to your computer can still very easily see what files you have. The password is mainly to stop idle snoops checking your images if you are away from your machine.","title":"setting a password"},{"location":"advanced_parents.html","text":"Tag parents let you automatically add a particular tag every time another tag is added. The relationship will also apply retroactively. what's the problem? \u00b6 Tags often fall into certain heirarchies. Certain tags always imply certain other tags, and it is annoying and time-consuming to add them all individually every time. For example, whenever you tag a file with ak-47 , you probably also want to tag it assault rifle , and maybe even firearm as well. Another time, you might tag a file character:eddard stark , and then also have to type in house stark and then series:game of thrones . (you might also think series:game of thrones should actually be series:a song of ice and fire , but that is an issue for siblings ) Drawing more relationships would make a significantly more complicated venn diagram, so let's draw a family tree instead: tag parents \u00b6 Let's define the child-parent relationship 'C->P' as saying that tag P is the semantic superset/superclass of tag C. All files that have C should also have P, without exception. When the user tries to add tag C to a file, tag P is added automatically. Let's expand our weapon example: In that graph, adding ar-15 to a file would also add semi-automatic rifle , rifle , and firearm . Searching for handgun would return everything with m1911 and smith and wesson model 10 . This can obviously get as complicated and autistic as you like, but be careful of being too confident--this is just a fun example, but is an AK-47 truly always an assault rifle? Some people would say no, and beyond its own intellectual neatness, what is the purpose of attempting to create such a complicated and 'perfect' tree? Of course you can create any sort of parent tags on your local tags or your own tag repositories, but this sort of thing can easily lead to arguments between reasonable people. I only mean to say, as someone who does a lot of tag work, to try not to create anything 'perfect', as it usually ends up wasting time. Act from need, not toward purpose. how you do it \u00b6 Go to services->manage tag parents : Which looks and works just like the manage tag siblings dialog. Note that when you hit ok, the client will look up all the files with all your added tag Cs and retroactively apply/pend the respective tag Ps if needed. This could mean thousands of tags! Once you have some relationships added, the parents and grandparents will show indented anywhere you 'write' tags, such as the manage tags dialog: Hitting enter on cersei will try to add house lannister and series:game of thrones as well. remote parents \u00b6 Whenever you add or remove a tag parent pair to a tag repository, you will have to supply a reason (like when you petition a tag). A janitor will review this petition, and will approve or deny it. If it is approved, all users who synchronise with that tag repository will gain that parent pair. If it is denied, only you will see it. parent 'favourites' \u00b6 As you use the client, you will likely make several processing workflows to archive/delete your different sorts of imports. You don't always want to go through things randomly--you might want to do some big videos for a bit, or focus on a particular character. A common search page is something like [system:inbox, creator:blah, limit:256] , which will show a sample of a creator in your inbox, so you can process just that creator. This is easy to set up and save in your favourite searches and quick to run, so you can load it up, do some archive/delete, and then dismiss it without too much hassle. But what happens if you want to search for multiple creators? You might be tempted to make a large OR search predicate, like creator:aaa OR creator:bbb OR creator:ccc OR creator:ddd , of all your favourite creators so you can process them together as a 'premium' group. But if you want to add or remove a creator from that long OR, it can be cumbersome. And OR searches can just run slow sometimes. One answer is to use the new tag parents tools to apply a 'favourite' parent on all the artists and then search for that favourite. Let's assume you want to search bunch of 'creator' tags on the PTR. What you will do is: Create a new 'local tag service' in manage services called 'my parent favourites'. This will hold our subjective parents without uploading anything to the PTR. Go to tags->manage where tag siblings and parents apply and add 'my parent favourites' as the top priority for parents, leaving 'PTR' as second priority. Under tags->manage tag parents , on your 'my parent favourites' service, add: creator:aaa->favourite:aesthetic art creator:bbb->favourite:aesthetic art creator:ccc->favourite:aesthetic art creator:ddd->favourite:aesthetic art Watch/wait a few seconds for the parents to apply across the PTR for those creator tags. Then save a new favourite search of [system:inbox, favourite:aesthetic art, limit:256] . This search will deliver results with any of the child 'creator' tags, just like a big OR search, and real fast! If you want to add or remove any creators to the 'aesthetic art' group, you can simply go back to tags->manage tag parents , and it will apply everywhere. You can create more umbrella/group tags if you like (and not just creators--think about clothing, or certain characters), and also use them in regular searches when you just want to browse some cool files.","title":"tag parents"},{"location":"advanced_parents.html#the_problem","text":"Tags often fall into certain heirarchies. Certain tags always imply certain other tags, and it is annoying and time-consuming to add them all individually every time. For example, whenever you tag a file with ak-47 , you probably also want to tag it assault rifle , and maybe even firearm as well. Another time, you might tag a file character:eddard stark , and then also have to type in house stark and then series:game of thrones . (you might also think series:game of thrones should actually be series:a song of ice and fire , but that is an issue for siblings ) Drawing more relationships would make a significantly more complicated venn diagram, so let's draw a family tree instead:","title":"what's the problem?"},{"location":"advanced_parents.html#tag_parents","text":"Let's define the child-parent relationship 'C->P' as saying that tag P is the semantic superset/superclass of tag C. All files that have C should also have P, without exception. When the user tries to add tag C to a file, tag P is added automatically. Let's expand our weapon example: In that graph, adding ar-15 to a file would also add semi-automatic rifle , rifle , and firearm . Searching for handgun would return everything with m1911 and smith and wesson model 10 . This can obviously get as complicated and autistic as you like, but be careful of being too confident--this is just a fun example, but is an AK-47 truly always an assault rifle? Some people would say no, and beyond its own intellectual neatness, what is the purpose of attempting to create such a complicated and 'perfect' tree? Of course you can create any sort of parent tags on your local tags or your own tag repositories, but this sort of thing can easily lead to arguments between reasonable people. I only mean to say, as someone who does a lot of tag work, to try not to create anything 'perfect', as it usually ends up wasting time. Act from need, not toward purpose.","title":"tag parents"},{"location":"advanced_parents.html#how_to_do_it","text":"Go to services->manage tag parents : Which looks and works just like the manage tag siblings dialog. Note that when you hit ok, the client will look up all the files with all your added tag Cs and retroactively apply/pend the respective tag Ps if needed. This could mean thousands of tags! Once you have some relationships added, the parents and grandparents will show indented anywhere you 'write' tags, such as the manage tags dialog: Hitting enter on cersei will try to add house lannister and series:game of thrones as well.","title":"how you do it"},{"location":"advanced_parents.html#remote_parents","text":"Whenever you add or remove a tag parent pair to a tag repository, you will have to supply a reason (like when you petition a tag). A janitor will review this petition, and will approve or deny it. If it is approved, all users who synchronise with that tag repository will gain that parent pair. If it is denied, only you will see it.","title":"remote parents"},{"location":"advanced_parents.html#parent_favourites","text":"As you use the client, you will likely make several processing workflows to archive/delete your different sorts of imports. You don't always want to go through things randomly--you might want to do some big videos for a bit, or focus on a particular character. A common search page is something like [system:inbox, creator:blah, limit:256] , which will show a sample of a creator in your inbox, so you can process just that creator. This is easy to set up and save in your favourite searches and quick to run, so you can load it up, do some archive/delete, and then dismiss it without too much hassle. But what happens if you want to search for multiple creators? You might be tempted to make a large OR search predicate, like creator:aaa OR creator:bbb OR creator:ccc OR creator:ddd , of all your favourite creators so you can process them together as a 'premium' group. But if you want to add or remove a creator from that long OR, it can be cumbersome. And OR searches can just run slow sometimes. One answer is to use the new tag parents tools to apply a 'favourite' parent on all the artists and then search for that favourite. Let's assume you want to search bunch of 'creator' tags on the PTR. What you will do is: Create a new 'local tag service' in manage services called 'my parent favourites'. This will hold our subjective parents without uploading anything to the PTR. Go to tags->manage where tag siblings and parents apply and add 'my parent favourites' as the top priority for parents, leaving 'PTR' as second priority. Under tags->manage tag parents , on your 'my parent favourites' service, add: creator:aaa->favourite:aesthetic art creator:bbb->favourite:aesthetic art creator:ccc->favourite:aesthetic art creator:ddd->favourite:aesthetic art Watch/wait a few seconds for the parents to apply across the PTR for those creator tags. Then save a new favourite search of [system:inbox, favourite:aesthetic art, limit:256] . This search will deliver results with any of the child 'creator' tags, just like a big OR search, and real fast! If you want to add or remove any creators to the 'aesthetic art' group, you can simply go back to tags->manage tag parents , and it will apply everywhere. You can create more umbrella/group tags if you like (and not just creators--think about clothing, or certain characters), and also use them in regular searches when you just want to browse some cool files.","title":"parent 'favourites'"},{"location":"advanced_siblings.html","text":"Tag siblings let you replace a bad tag with a better tag. what's the problem? \u00b6 Reasonable people often use different words for the same things. A great example is in Japanese names, which are natively written surname first. character:ayanami rei and character:rei ayanami have the same meaning, but different users will use one, or the other, or even both. Other examples are tiny syntactic changes, common misspellings, and unique acronyms: smiling and smile staring at camera and looking at viewer pokemon and pok\u00e9mon jersualem and jerusalem lotr and series:the lord of the rings marimite and series:maria-sama ga miteru ishygddt and i sure hope you guys don't do that A particular repository may have a preferred standard, but it is not easy to guarantee that all the users will know exactly which tag to upload or search for. After some time, you get this: Without continual intervention by janitors or other experienced users to make sure y\u2287x (i.e. making the yellow circle entirely overlap the blue by manually giving y to everything with x), searches can only return x (blue circle) or y (yellow circle) or x\u2229y (the lens-shaped overlap). What we really want is x\u222ay (both circles). So, how do we fix this problem? tag siblings \u00b6 Let's define a relationship, A->B , that means that any time we would normally see or use tag A or tag B, we will instead only get tag B: Note that this relationship implies that B is in some way 'better' than A. ok, I understand; now confuse me \u00b6 This relationship is transitive, which means as well as saying A->B, you can also say B->C, which implies A->C and B->C. You can also have an A->C and B->C that does not include A->B. The outcome of these two arrangements is the same (everything ends up as C), but the underlying semantics are a little different if you ever want to edit them. Many complicated arrangements are possible: Note that if you say A->B, you cannot say A->C; the left-hand side can only go to one. The right-hand side can receive many. The client will stop you from constructing loops. how you do it \u00b6 Just open services->manage tag siblings , and add a few. The client will automatically collapse the tagspace to whatever you set. It'll even work with autocomplete, like so: Please note that siblings' autocomplete counts may be slightly inaccurate, as unioning the count is difficult to quickly estimate. The client will not collapse siblings anywhere you 'write' tags, such as the manage tags dialog. You will be able to add or remove A as normal, but it will be written in some form of \"A (B)\" to let you know that, ultimately, the tag will end up displaying in the main gui as B: Although the client may present A as B, it will secretly remember A! You can remove the association A->B, and everything will return to how it was. No information is lost at any point. remote siblings \u00b6 Whenever you add or remove a tag sibling pair to a tag repository, you will have to supply a reason (like when you petition a tag). A janitor will review this petition, and will approve or deny it. If it is approved, all users who synchronise with that tag repository will gain that sibling pair. If it is denied, only you will see it.","title":"tag siblings"},{"location":"advanced_siblings.html#the_problem","text":"Reasonable people often use different words for the same things. A great example is in Japanese names, which are natively written surname first. character:ayanami rei and character:rei ayanami have the same meaning, but different users will use one, or the other, or even both. Other examples are tiny syntactic changes, common misspellings, and unique acronyms: smiling and smile staring at camera and looking at viewer pokemon and pok\u00e9mon jersualem and jerusalem lotr and series:the lord of the rings marimite and series:maria-sama ga miteru ishygddt and i sure hope you guys don't do that A particular repository may have a preferred standard, but it is not easy to guarantee that all the users will know exactly which tag to upload or search for. After some time, you get this: Without continual intervention by janitors or other experienced users to make sure y\u2287x (i.e. making the yellow circle entirely overlap the blue by manually giving y to everything with x), searches can only return x (blue circle) or y (yellow circle) or x\u2229y (the lens-shaped overlap). What we really want is x\u222ay (both circles). So, how do we fix this problem?","title":"what's the problem?"},{"location":"advanced_siblings.html#tag_siblings","text":"Let's define a relationship, A->B , that means that any time we would normally see or use tag A or tag B, we will instead only get tag B: Note that this relationship implies that B is in some way 'better' than A.","title":"tag siblings"},{"location":"advanced_siblings.html#more_complicated","text":"This relationship is transitive, which means as well as saying A->B, you can also say B->C, which implies A->C and B->C. You can also have an A->C and B->C that does not include A->B. The outcome of these two arrangements is the same (everything ends up as C), but the underlying semantics are a little different if you ever want to edit them. Many complicated arrangements are possible: Note that if you say A->B, you cannot say A->C; the left-hand side can only go to one. The right-hand side can receive many. The client will stop you from constructing loops.","title":"ok, I understand; now confuse me"},{"location":"advanced_siblings.html#how_to_do_it","text":"Just open services->manage tag siblings , and add a few. The client will automatically collapse the tagspace to whatever you set. It'll even work with autocomplete, like so: Please note that siblings' autocomplete counts may be slightly inaccurate, as unioning the count is difficult to quickly estimate. The client will not collapse siblings anywhere you 'write' tags, such as the manage tags dialog. You will be able to add or remove A as normal, but it will be written in some form of \"A (B)\" to let you know that, ultimately, the tag will end up displaying in the main gui as B: Although the client may present A as B, it will secretly remember A! You can remove the association A->B, and everything will return to how it was. No information is lost at any point.","title":"how you do it"},{"location":"advanced_siblings.html#remote_siblings","text":"Whenever you add or remove a tag sibling pair to a tag repository, you will have to supply a reason (like when you petition a tag). A janitor will review this petition, and will approve or deny it. If it is approved, all users who synchronise with that tag repository will gain that sibling pair. If it is denied, only you will see it.","title":"remote siblings"},{"location":"changelog.html","text":"changelog \u00b6 Note This is the new changelog. For versions prior to 466 see the old changelog . Version 474 \u00b6 command palette \u00b6 the guy who put the command pallete together has fixed a 'show palette' bug some people encountered (issue #1060) he also added mouse support! he added support to show checkable menu items too, and I integrated this for the menubar (lightning bolt icon) items I added a line to the default QSS that I think fixes the odd icon/text background colours some users saw in the command palette misc \u00b6 file archive times are now recorded in the background. there's no load/search/sort yet, but this will be added in future under 'manage shortcuts', there is a new checkbox to rename left- and right-click to primary- and secondary- in the shortcuts UI. if you have a flipped mouse or any other odd situation, try it out if a file storage location does not have enough free disk space for a file, or if it just has <100MB generally, the client now throws up a popup to say what happened specifically with instructions to shut down and fix now and automatically pauses subscriptions, paged file import queues, and import folders. this test occurs before the attempt to copy the file into place. free space isn't actually checked over and over, it is cached for up to an hour depending on the last free space amount this 'paused all regular imports' mode is also now fired any time any simple file-add action fails to copy. at this stage, we are talking 'device disconnected' and 'device failed' style errors, so might as well pause everything just to be careful when the downloader hits a post url that spawns several subsidiary downloads (for instance on pixiv and artstation when you have a multi-file post), the status of that parent post is now 'completed', a new status to represent 'good, but not direct file'. new download queues will then present '3N' and '3 successful' summary counts that actually correspond to number of files rather than number of successful items pages now give a concise 'summary name' of 'name - num_files - import progress' (it also eli...des for longer names) for menus and the new command palette, which unlike the older status-bar-based strings are always available and will stop clients with many pages becoming multi-wide-column-menu-hell improved apng parsing. hydrus can now detect that pngs are actually apngs for (hopefully) all types of valid apng. it turns out some weird apngs have some additional header data, but I wrote a new chunk parser that should figure it all out with luck, users who have window focus issues when closing a child window (e.g. close review services, the main gui does not get focus back), should now see that happen (issue #1063). this may need some more work, so let me know the session weight count in the 'pages' menu now updates on any add thumbs, remove thumbs, or thumbnail panel swap. this should be fast all the time, and buffer nicely if it is ever overwhelmed, but let me know if you have a madlad session and get significant new lag when you watch a downloader bring in new files a user came up with a clever idea to efficiently target regenerations for the recent fix to pixel duplicate calculations for images with opaque alpha channels, so this week I will queue up some pixel hash regeneration. it does not fix every file with an opaque alpha channel, but it should help out. it also shouldn't take all that long to clear this queue out. lastly, I renamed that file maintenance job from 'calculate file pixel hash' to 'regenerate pixel duplicate data' the various duplicate system actions on thumbnails now specify the number of files being acted on in the yes/no dialog fixed a bug when searching in complicated multi-file-service domains on a client that has been on for a long time (some data used here was being reset in regular db maintenance) fixed a bug where for very unlucky byte sizes, for instance 188213746, the client was flipping between two different output values (e.g. 179MB/180MB) on subsequent calls (issue #1068) after some user profiles and experimental testing, rebalanced some optimisations in sibling and parent calculation. fingers crossed, some larger sibling groups with worst-case numbers should calculate more efficiently if sibling/parent calculation hits a heavy bump and takes a really long time to do a job during 'normal' time, the whole system now takes a much longer break (half an hour) before continuing boring stuff \u00b6 the delete dialog has basic multiple local file service support ready for that expansion. it no longer refers to the old static 'my files' service identifier. I think it will need some user-friendly more polish once that feature is in the 'migrate tags' dialog's file service filtering now supports n local file services, and 'all local files' updated the build scripts to force windows server 2019 (and macos-11). github is rolling out windows 2022 as the new latest, and there's a couple of things to iron out first on our end. this is probably going to happen this year though, along with Qt6 and python 3.9, which will all mean end of life for windows 7 in our built hydrus release removed the spare platform-specific github workflow scripts from the static folder--I wanted these as a sort of backup, but they never proved useful and needed to be synced on all changes Version 473 \u00b6 misc \u00b6 fixed the recent problem with drag and dropping thumbnails to a level below the top row of pages. sorry for the trouble! fixed a bug where the client would not load results sorting by 'import time' when the search file domain was a single deleted file domain fixed a list display bug in the edit page parser dialog when a subsidiary page parser has two complicated string-match based content parsers collections now sort by modified time, using the largest known modified time in their collection added sqlite3.exe console back into the windows build--sorry, it was missing since the github build changeover! added a note to the help about backing up when tight on space, which I will repeat here: the sqlite database files are very compressible (70GB->17GB on default 7zip settings!), so if you need more space on your backup drive, this is a good way to reclaim it command palette \u00b6 a user has written a cool 'command palette' for the program! it brings up a type-and-search interface to navigate to pages or menu entries. I have integrated his first version and set the default shortcut to Ctrl+P. users who update will get this shortcut if they have nothing else on Ctrl+P on 'main window' set. if you prefer Ctrl+K or anything else, you can change it under file->shortcuts->the main window regular users will get a page list they can search and select, advanced users will also get the (potentially dangerous) full scan of the menubar and current thumbnail right-click menu. I will be polishing this latter feature in future to filter out big maintenance jobs and show checkbox status and similar, so if you are advanced, please be careful for now try it out, and let me know how it goes. the underlying widget is neat, and I can change its behaviour and extend it significantly (mostly advanced) deleted file improvements \u00b6 files that have been deleted from a local file domain are now aware of their file deletion reason. this is visible in the right-click menu of thumb or media canvas the advanced file deletion dialog now initialises using this stored reason. if all pending deletees have the same existing reason stored, it will display it, and if they are all set but differ, this will be noted and an option to not alter them is also available. this will come up later in niche advanced situations with mutiple file services reversing a recent change, local file deletion reasons are no longer cleared on undelete or (re)import. they'll now hang around invisibly and initialise any future advanced file deletion dialog updated the thumbnail and canvas undelete mechanism to handle multiple services. now, if the files are deleted in more than one domain, you will be asked to multiple-select which you wish to undelete for. if there is only one eligible undelete service, the process remains unchanged--you'll just get a yes/no confirmation if the 'confirm trash' option is set misc multiple local file services code conversion work Version 472 \u00b6 highlights \u00b6 the file domain button of every autocomplete input now has a 'multiple locations' entry. this launches a checkboxlist of all possible search locations and allows you to search more than one domain at once. it works, too! in future, when we can have multiple 'my files' services, you'll be able to choose here unions of what to search. users in advanced mode will see repository updates, all local files, all known files, and the new deleted file domains on this list. I removed the deleted file domains from the front menu because I expect them to be rarely used in options->thumbnails , there is now a 'thumbnail scaling' dropdown. you can set it so thumbs only ever scale down (which remains the default), scale to fit (i.e. very small images are also scaled up), or scale to fill. the 'animation' as thumbnails refit and delayed-regen themselves to 'scale to fill' is accidentally one of the coolest things I have done removed the old 'EXPERIMENTAL: thumbnail fill' option. the new mode works essentially the same, but faster and higher quality in the page tab menu, there is a new submenu 'pages', which shows all the pages at or below the current level. if you right-click on a page of pages tab, it will just show for that page of pages. click any of the entries, you will select that page. it is a web browser-like quick navigation menu, let me know what you think! rejiggered the page tab menu a little, reordering groups a bit with nicer separators and putting 'select' navigation on the menu even if you click in greyspace fixed a problem in page tab menu logic where if you right-clicked on greyspace, it would render the menu for the bottommost page of pages row rather than the one actually clicked last week's update where a mouse release event will no longer fire in the shortcuts system if the mouse moved a decent distance between press and release should now work in the media viewer canvas when dragging is set to anchor the mouse in place. some advanced users may wish to try setting archive/delete to work on mouse release and use left click to drag bug fixes \u00b6 fixed pages force-refreshing file queries on session load. this has never been intentional, but it slipped through again and was happening for a month or two now. I have added an explicit test to my routine to make sure this doesn't happen again, sorry for the trouble! fixed a problem in the recent fast shutdown code that was accidentally also shutting down some maintenance work like repository processing as soon as it started, even if 'exit and force work' was chosen all images with a completely opaque alpha channel will now have that alpha channel dropped for the new pixel hash calculation, meaning they will now match with regular non-alpha images with the same colour pixel data. in fact, all images with an opaque alpha now have that channel dropped on load, which will save a little memory and CPU any time they are handled (issue #770) if the 'durable' temporary database exists on boot, it is now deleted and a fresh one created rather than trying to re-use the old one (which would not have any useful information anyway), and a note is made to log. one user recently had a problem where an existing corrupt temp dir was stopping boot, which this fixes misc \u00b6 updated the windows build to use a newer version of mpv, moving from roughly 2021-02 to 2022-01. this replaces mpv-1.dll with mpv-2.dll, and I set the installer to delete the old '1'. if you extract, you can delete the old '1' yourself, but things seems fine with both. in any case, let me know if you have any trouble! updated the windows build to use sqlite 3.37.2, the sqlite3 in the db dir is also updated the deleted files system now neatly cleans up old file deletion reasons on file import and file undelete cleared out some old thumbnail generation code, including deleting an old and now obselete optimisation where too-large thumbs were scaled down to make new thumbs rather than revisiting source. since our thumb situation is more complicated now, this is gone in favour of nicer quality thumbs and simpler code fixed up some upcoming database maintenance code in my new modules updated and cleaned the code in the old wx-converted checkboxlist and replaced some awkward old access routines cleared out some old HTA archive code Version 471 \u00b6 times \u00b6 if you have file viewing stats turned on (by default it is), the client will now track the 'last viewed time' of your files, both in preview and media viewers. a record is only made assuming they pass the viewtime checks under options->file viewing statistics (so if you scroll through really quick but have it set to only record after five seconds of viewing, it will not save that as the last viewed time). this last viewed time is shown on the right-click menu with the normal file viewing statistics sorting by 'import time' and 'modified time' are moved to a new 'time' subgroup in the sort button menu also added to 'time' is 'last viewed time'. note that this has not been tracked until now, so you will have to look at a bunch of things for a few seconds each to get some data to sort with to go with 'x time' pattern, 'time imported' is renamed to 'import time' across the program. both should work for system predicate parsing system:'import time' and 'modified time' are now bundled into a new 'system:time' stub in the system predicates list. the window launched from here is an experimental new paged panel. I am not sure I really like it, but let's see how it works IRL 'system:last view time' is added to search the new field! give it a go once you have some data also note that the search and sort of last viewed time works on the 'media viewer' number. those users who use preview or combined numbers for stuff, let me know if and how you would like that to work here--sort/search for both media and preview, try to combine based on the logic in the options, or something else? loading serialised pngs \u00b6 the client can now load serialised downloader-pngs if they are a perfect RGB conversion of an original greyscale export. the pngs don't technically have to be pngs anymore! if you drag and drop an image from firefox, the temporary bitmap exported and attached to the DnD should work! the lain easy downloader import now has a clipboard paste button. it can take regular json text, and now, bitmap data! the 'import->from clipboard' button action in many multiple column lists across the program (e.g. manage parsers) (but not every list, a couple are working on older code) also now accepts bitmap data on the clipboard the various load errors here are also improved custom widget colors \u00b6 (advanced users only for now) after banging my head against it, I finally figured out an ok way to send colors from a QSS style file to python code. this means I can convert my custom widgets to inherit colours from the current QSS. I expect to migrate pretty much everything currently fixed over to this, except tag colours and maybe some thumbnail border stuff, and retire the old darkmode if you are a QSS lad, please check out the new entries at the bottom of default_hydrus.qss and play around with them in your own QSSes. please do not send me any updates to be folded in to the install yet as I still have a bunch of other colours to add. this week is just a test--please let me know how it works for you misc \u00b6 mouse release events no longer trigger a command in the shortcuts system if the release happens more than about 20 pixels from the original mouse down. this is tricky, so if you are into clever shortcuts, let me know how it works for you the file maintenance manager (which has been getting a lot of work recently with icc profiles, pixel dupes, some thumb regen, and new audio channel checks), now saves its work and publishes updates faster to the UI, at least once every ten seconds the sort entries in the page sort control are now always sorted according to their full (type, name) string, and the mouse-wheel-to-navigate is now fixed to always mirror this improved some 'delete file reason' handling. currently, a file deletion reason should only be applied when a file is entering trash. there was a bug that force-physical-deleting files from trash would overwrite their original deletion reason. this is now fixed. the advanced delete files dialog now disables the whole reason panel better when needed, never sends a file reason down to the database when there should be no reason, disables the panel if all the files are in the trash, and at the database level when file deletion reasons are being set, all files are filtered for status beforehand to ensure none are accidentally set by other means. I am about to make trash more intelligent as part of multiple local file services, so I expect to revisit this soon the new ICC Profile conversion no longer occurs on I or F mode files. there are weird 32/64 bit monochrome files, and mode/ICC conversion goes whack with current PIL code replaced the critical hamming test in the duplicate files system with a different bit-counting strategy that works about 9% faster. hamming test is used in all duplicate file searching, so this should help out a tiny bit in a lot of places boring cleanup \u00b6 cleaned up how media viewer canvas type is stored and tested in many places all across the program, file viewing statistics are now tracked by type rather than a hardcoded double of preview & media viewer. it will take a moment to update the database to reflect this this week cleaned up a ton of file viewing stats code cleared out the last twenty or so uses of the old 'execute many select' database access routine in favour of the new lower-overhead and more query-optimisable temporary integer tables method Version 470 \u00b6 multiple file services \u00b6 I finished the conversion of all UI search to the new multiple location object. everything from back- to frontend now supports cleverer search. since searching deleted files is simple to add, users in advanced mode will now see 'deleted from...' in a new list in the tag autocomplete dropdown file domain button the next step is writing a widget that allows multiple selection, and then all this should work right out of the box, and we'll be an important step closer to allowing multiple local file services misc \u00b6 the video parsing routine is better at detecting when a present audio track is actually silent (and hence when it should mark a video as 'no audio'). all video with audio will be requeued for a metadata reparse in the files maintenance system on update fixed an error from last week when trying to create a new page from the tags (e.g. middle-clicking them) in the active search list added 'audio mkv' format to the client, to represent mkvs without a video track. I think most of the time this is going to be audio track webms from youtube-dl and similar added 'file relationships: set files as potential duplicates' command to the 'media actions' shortcut set I expanded the 'backing up' section in 'installing and updating' help I wrote an 'anti-virus' section for 'installing and updating' help, since I kept writing the same basic spiel about false positives. please feel free to point people there in future to relieve their concerns improved some shutdown tests, the client and server should exit faster in some cases (e.g. when a hydrus repository network job is hanging on reconnection attempts, holding up the 'synchronise_repository' daemon shutdown) the 'file was xxx at (y timestamp), which was (z time units) before this check' line in file import notes now always puts 'z time units' as that, ignoring the 'always show ISO time' setting, which was just substituting it with 'y timestamp' again. let me know if you spot other bad grammar with this setting on, I'll fix it! fingers crossed, images in the LAB colourspace should now normalise to sRGB with the correct whitepoint. thanks to the user who provided example test tiff images here. this now uses the new PIL-based colourspace conversion I used to make ICC profiles work, just on LAB->sRGB. as far as I understand, OpenCV uses a fixed whitepoint of D65, resulting in yellow/warm conversions for some formats, but PIL may be able to figure out if D50 is needed??? if you have some crazy LUV or YPbPr or YIQ image that shows up wrong, please send it in and I'll see what I can do! boring rewrites and cleanup while doing file service work \u00b6 many more UI objects now store and do file service logic using a more complicated 'location context', which can store a mix of multiple services and 'deleted from service' data. all the search code that works on this can now propagate to display: the management objects behind every page now store a multiple location object, not a single file service id all media panels (the thumbnail grid on a page) are now instantiated by a multiple location object, and when they serve a highlighted downloader, they now inherit that from the file import options, which in future will dictate import destinations all canvases are now the same, inheriting their new location context from their parents all tag lists are the same. mostly they don't care much about file domain, but when you middle-click to create new pages from the autocomplete dropdown list or active search list, it can matter, so they now propagate it along the underlying medialist objects are now the same, and various delete logic (e.g. 'should we remove this thumb we just deleted?') is updated to work on complex domains some duplicate lookup code now works on location context renamed 'location search context' object to 'location context' since it is used all over now and put it in its own file. also wrote it some neater initialisation and meta object code mr bones now gives duplicate data based on the union of all non-trash local services sans update files (another case of now supporting n services but n is fixed for the moment at 1, 'my files') a bunch of places across the program that used to default to 'my files' or 'all local files' (which is everything on disk, including trash and repository update files) now default to this new union of all non-trash local media services when doing page-to-page file drag and drops, the location context is now preserved (previously, the new page would always be 'my files') whole heap of other cleanup in these systems when a thumbnail cannot be provided (for deleted files or many 'all known files' situations), the thumbnail cache now provides the hydrus icon stand-in instantly, no delayed waterfall fixed an unusual situation where the file search could not provide a file in a tagless search when that file had no detailed file info row in the database. this seems to effect a legacy borked row or two in the new deleted file domain searches removed some ancient dumper status code from thumbnail objects Version 469 \u00b6 misc \u00b6 the 'search log' button and the window panel now let you delete log entries. you can delete by completion status from the menu or specifically by row in the panel (just like the file log) fixed the new 'file is writable' checks for Linux/macOS, which were testing permissions overbroadly and messing with users with user-only permissions set. the code now hands off specific user/group negotiation to the OS. thanks to the maintainer of the AUR package for helping me out here (issue #1042) the various places where a file's permission bits are set are also cleaned up--hydrus now makes a distinction between double-checking a file is set user-writable before deleting/overwriting vs making a file's permission bits (which were potentially messed up in the past) 'nice' for human use after export. in the latter case, which still defaults to 644 on linux/macOS, the user's umask is now applied, so it should be 600 if you prefer that fixed a bug where the media viewer could have trouble initialising video when the player window instantiation was delayed (e.g. with embed button) client api \u00b6 added 'return_hashes' boolean parameter to GET /get_files/search_files, which makes the command return hashes instead of file ids. this is documented in the help and has a new unit test client api version is now 25 multiple local file services work \u00b6 I rewrote a lot of code this week, but it proved more complex than I expected. I also discovered I'll have to switch the pages and canvases over too before I can nicely switch the top level UI over to allow multiple search. rather than release a borked feature, I decided not to rush the final phase, so this remains boring for now! the good news is that it works well when I hack it in, so I just need to keep pushing rewrote the caller side of tag autocomplete lookup to work on the new multiple file search domain rewrote the main database level tag lookup code to work on the new multiple file search domain certain types of complicated tag autocomplete lookup, particularly on all known tags and any client with lots of siblings, will be faster now an unusual and complicated too-expansive sibling lookup on autocomplete lookups on 'all known tags' is now fixed boring cleanup and refactoring \u00b6 predicate counts are now managed by a new object. predicates also support 0 minimum count for x-y count ranges, which is now possible when fetching count results from non-cross-referenced file domains (for now this means searching deleted files) cleaned up a ton of predicate instantiation code updated autocomplete, predicate, and pred count unit tests to handle the new objects and bug fixes wrote new classess to cover convenient multiple file search domain at the database level and updated a bunch of tag autocomplete search code to use it misc cleanup and refactoring for file domain search code purged more single file service inspection code from file search systems refactored most duplicate files storage code (about 70KB) to a new client db module Version 468 \u00b6 misc \u00b6 fixed an issue where the one pixel border on the new 'control bar' on the media viewer was annoyingly catching mouse events at the bottom of the screen when in borderless fullscreen mode (and hence dragging the video, not scanning video position). the animation scanbar now owns its own border and processes mouse events on it properly fixed a typo bug in the new pixel hash system that meant new imports were not being added to the system correctly. on update, all files affected will be fixed of bad data and scheduled for a pixel hash regen. sorry for the trouble, and thank you for the quick reports here added a 'fixed font size example' qss file to the install. I have passed this file to others as an example of a quick way to make the font (and essentially ui scale) larger. it has some help comments inside and is now always available. the default example font size is lmao fixed another type checking problem for (mostly Arch/AUR) PyQt5 users (issue #1033) wrote a new display mappings maintenance routine for the database menu that repopulates the display mappings cache for missing rows. this task will be radically faster than a full regen for some problems, but it only solves those problems on boot, the program now explicitly checks if any of the database files are set as read-only and if so will dump out with an appropriate error rewrote my various 'file size problem' exception hierarchy to clearly split 'the file import options disallow this big gif' vs 'this file is zero size/this file is malformed'. we've had several problems here recently, but file import options rule-breaking should set 'ignore' again, and import objects should be better about ignore vs fail state from now on added more error handling for broken image files. some will report cleaner errors, some will now import the new parsing system that discards source urls if they share a domain with a primary import url is now stricter--now discarding only if they share the same url class. the domain check was messing up saving post urls when they were parsed from an api url (issue #1036) the network engine no longer sends a Range header if it is expecting to pull html/json, just files. this fixes fetching pages from nijie.info (and several other server engines, it seems), which has some unusual access rules regarding Range and Accept-Encoding fixed a problem with no_daemons and the docker package server scripts (issue #1039) if the server engine (serverside or client api) is running a request during program shutdown, it now politely says 'Application is shutting down!' with a 503 rather than going bananas and dumping to log with an uncaught 500 fixed some bad client db update error handling code multiple local file services (system predicate edition) \u00b6 system:file service now supports 'deleted' and 'petitioned' status advanced 'all known files' search pages now show more system predicates when inbox and archive are hidden because one has 0 count, and the search space is simple, system everything now says what they are, e.g. \"system:everything (24) (all in inbox)\" file repos' 'system:local/not local' now sort at the top of the system predicate list, like inbox/archive client api \u00b6 the GET /get_files/file_metadata call now returns the file modified date and imported/deleted timestamps for each file service the file is currently in or deleted from. check the help for an example! fixed client api file search with random sort (file_sort_type = 4) client api version is now 24 boring multiple local file services work \u00b6 the system predicates listed in a search page dropdown now support the new 'multiple location search context' object, which means in future I will be able to switch over to 'file domain is union of (A, deleted from B, and C)' and all the numbers will add up appropriately with ranged 'x-y' counts and deal with combinations of file repo and local service and current/deleted neatly when fetching system preds in 'all known files', the system:everything 'num files' count will be stated if available in the cache for the new system:file service search, refactored db level file filtering to support all status types cleaned up how system preds are generated boring refactoring work \u00b6 moved GUGs from network domain code to their own file moved URL Class from network domain code to its own file moved the pure functions from network domain code to their own file cleared up some file maintenance enum variable names sped up random file sort for large result sets misc client network code cleanup and type hints, and rejiggered cleaner imports after the refactoring Version 467 \u00b6 new scanbar cleanup \u00b6 the media container's scanbar and volume control are now combined on the same widget, meaning they now show/hide in sync and faster. their layout calculation is also more sensible. the new controls bar also has a thin border to make it pop better against a background video improved the way some auto-hide anti-flicker tech on the scanbar now works. it all hides a frame faster sometimes figured out some new anti-flicker tech to reduce/eliminate a frame of stretch when flicking from a static image to an mpv video, particularly for the first or second time in a session fixed a bug where clicking the global mute/unmute on an mpv player meant that certain shortcut keys (usually those with arrow keys) would not work on that player again. (it was a focus issue on the button, which then captured some form navigation keys but they had nowhere to go) brushed up some mouse coordinate testing logic across the program. some linux clients had trouble with the new animation scanbar popping up over mpv, I think I improved it! fixed another type problem with newer python/PyQt5 on Arch, also in scanbar coordinate testing fixed some dodgy colours in the scanbar initialisation and volume control border macOS users: I undid a long-time paint hack on the media container and the static image canvas. Qt is responsible for clearing the background again, which allows me to remove some jank anti-flicker tech. HOWEVER, the original reason for this hack was because without it, old macOS went to 100% CPU whenever the media viewer was showing something. therefore, to be safe, this option is still on for macOS users for now. you'll get a little flicker when browsing. please try hitting help->debug->gui actions->macOS anti-flicker test and do some mixed video/image browsing. does your whole damn client lock up? misc \u00b6 the 'file log' and 'search log' buttons are now a new widget class that puts an arrow on the side that opens a menu. the secret right-click menus of these buttons is now exposed for all fixed a bug affecting some greyscale pngs with ICC profiles--they were coming out pure white due to a colourspace conversion problem fixed an import problem when PIL could not load a file (due to file malformation) but OpenCV could. this was causing a failed import from the new ICC profile detection code when the downloader hits a broken image file that cannot be imported due to malformation, the status is now 'error' instead of the incorrect 'ignored' fixed the duplicate file filesize comparison statement sometimes showing > in one direction and \u2248 in the other. it happened when the larger file was between 20/19 and 21/20 times the size of the smaller, just a logic typo (issue #1028) the trash maintenance daemon is moved from the old threaded daemon system to the new repeating job worker pool. this is the last daemon cleaned up, so I am retiring the old and mostly defunct 'no_daemons' launch argument. a variety of other daemon infrastructure for things like shutdown checks is similarly removed. the program also now waits for the newer daemon jobs to finish working on shutdown moved most client daemon jobs like repository sync and dirty object save down so they start after the first session is loaded rather than right after boot if a file is called to regen its thumbnail but currently has no dimension, this is now a no-op rather than an error. in the situation where users force thumb regen before metadata regen and encounter this, it is sorted out later when the metadata regen recognises new dimensions and reschedules the thumb regen added an extensive user-written guide to the --db_synchronous_override launch argument to the launch arguments help page. it is possible and safe to run the program with synchronous=0 as long as certain caveats are obeyed. thanks to the user who figured this out and wrote it up the downloader engine now discards source urls in an import job if they have the same domain as any existing primary url. this will ensure that if a booru has a link back to itself as a source url, when the 'source' is really an alternate rather than a dupe, it won't be added in hydrus as a known url for that imported file misc cleanup in downloader system and file/search log UI fixed a type bug in the file and search log 'import from png' action. if you have existing pngs previously exported from here, they will import ok now refactored the various hydrus compression code to a new HydrusCompression file exported serialisable data pngs such as from file or search log that hold simple Strings now always compress the data before embedding it in the png. existing pngs that hold uncompressed strings should still load ok the payload in an exported png is now always compressed, and the payload description always states the uncompressed size sped up client shutdown when network traffic has been paused the whole time and a repo sync job might have wanted to run. these jobs also do not hang on a thread worker if network traffic is paused, but they should wake immediately when it is unpaused the hydrus login system is now resistant to connection failures; previously it was getting hung up and jamming the whole hydrus sync system when a server was down client api \u00b6 added GET /manage_database/mr_bones to the Client API. it returns a JSON Object with the same numbers used in the help->how boned am I? dialog incremented Client API version to 23 Version 466 \u00b6 video scanbar autohide \u00b6 the scanbar that shows below audio and video is now embedded inside the video frame, and it show/hides based on how close your mouse is to it I've wanted to do this for a long time, since it will allow you to watch 16:9 videos at true 100% in borderless fullscreen, but the hackery of how the media viewer works behind the scenes means this took more work than you'd think and is still a little jank. there's a small amount of flicker when it pops in and out, which I will work on in future. in any case, please have a play with it and let me know what you think. I expect to add some more options, like for the activation padding area around it, and I will be tidying up more layout stuff throughout the media viewer if you are a mostly keyboard user, please check out the new 'global' shortcut to flip on/off a 'force the animation scanbar to show' mode I don't really want to bring back the always-on hanging-below scanbar that just takes up space, but if you try this new embedded scanbar and really hate it, we'll see what we can do more duplicate filter search options \u00b6 the duplicates page now has a dropdown on the search for 'must be/can be/excludes pixel dupes'! the duplicates page now has a number control on the search for what distance the pair was found at! I am not sure how accurate this thing is in all cases, but it seems I started tracking this data some time ago and forgot I even had it these new options are remembered in your session and should remain fast in most normal cases. I put time into some complicated database work this week to get this going, please let me know if you have any trouble with it misc \u00b6 when the export filename pattern in the export files dialog means many of the files share the same base and hence need to do 'filename (5)'-style suffixes to be unique, the number here is now calculated much more efficiently. opening this dialog on 10,000 files with an oft-duplicate pattern should now be a jolt of lag but not many minutes when you choose to 'separate' a subscription with more than 100 queries, you are no longer forced to break it into half when you do break a subscription in half, it now makes sure to sort the query texts before separating if you are in advanced mode, the 'selection tags' list on the left of every page can now switch its tag display type between 'multiple media views', 'display', and 'storage'. this is experimental and a bunch of stuff like 'select files with this tag' won't work yet janitors' petition pages now start with their tag list in 'storage' mode, so you can see the actual tags being changed rather than with siblings and parents calculated rebalanced some janitor mapping petition weights. jannies should see a smoother balance of 'lots of small petitions' vs 'a few larger petitions' amongst petitions all with the same reason and creator boring cleanup and little fixes \u00b6 when you set the checker options in the edit subscription dialog, the queries now recalculate their file velocity better. previously, they would just set 'unknown' and recalc on the next run, but now they will actually recalculate if the query container is loaded into memory or otherwise put a status that says 'will calculate on next run' removed the 'should be namespaced' reason from the manage tags quick petition reasons. this is now all handled by siblings, tidying up storage tags manually is busywork when you click 'copy traceback' on an error popup, it also copies the software version, your platform, and if you are on a frozen build or running from source the logger now prints version number for every block, just before the timestamp cleaned up a variety of media viewer UI code while working on the scanbar, fixing some misc display bugs moved pixel hash storage responsibility from 'file metadata' to 'similar files' module the similar files system now searches pixel hashes when it is called to do any similar files search. they count as 'exact match' distance when a file gets a new pixel hash, it now sees if any other files have that same hash. if so, it now gets queued up again in the similar files search system, ensuring this match is not missed misc nomenclature cleanup--since we now have both 'pixel hashes' and 'phashes', phashes are now referred to as 'perceptual hashes' everywhere massively refactored the primary table join that drives potential duplicates search. it should work a bit faster now and it is much easier to work with I added pixel dupe and distance search to the standard search results version of the join and the 'system:everything' version, which has several optimisations silenced some shutdown handling in file maintenance that was being printed to log as an error fixed some 'broken object load' error handling to print the timestamp of the specific bad object, not whatever timestamp was requested. this error handling now also prints the full dump name and version to the log, and version to the exported filename. I was working with a user who had broken subs this week, and lacking this full info made things just a little trickier to put back together fixed some drag and drop handling where it was possible to drop thumbnails on a certain location of a page of pages that held an empty page of pages but it would not create a new child media page to hold them misc serverside db code cleanup fixed python 3.10 type bugs in window coordinate saving and Qt image generation from buffer (issue #1027)","title":"changelog"},{"location":"changelog.html#changelog","text":"Note This is the new changelog. For versions prior to 466 see the old changelog .","title":"changelog"},{"location":"changelog.html#version_474","text":"","title":"Version 474"},{"location":"changelog.html#command_palette","text":"the guy who put the command pallete together has fixed a 'show palette' bug some people encountered (issue #1060) he also added mouse support! he added support to show checkable menu items too, and I integrated this for the menubar (lightning bolt icon) items I added a line to the default QSS that I think fixes the odd icon/text background colours some users saw in the command palette","title":"command palette"},{"location":"changelog.html#misc","text":"file archive times are now recorded in the background. there's no load/search/sort yet, but this will be added in future under 'manage shortcuts', there is a new checkbox to rename left- and right-click to primary- and secondary- in the shortcuts UI. if you have a flipped mouse or any other odd situation, try it out if a file storage location does not have enough free disk space for a file, or if it just has <100MB generally, the client now throws up a popup to say what happened specifically with instructions to shut down and fix now and automatically pauses subscriptions, paged file import queues, and import folders. this test occurs before the attempt to copy the file into place. free space isn't actually checked over and over, it is cached for up to an hour depending on the last free space amount this 'paused all regular imports' mode is also now fired any time any simple file-add action fails to copy. at this stage, we are talking 'device disconnected' and 'device failed' style errors, so might as well pause everything just to be careful when the downloader hits a post url that spawns several subsidiary downloads (for instance on pixiv and artstation when you have a multi-file post), the status of that parent post is now 'completed', a new status to represent 'good, but not direct file'. new download queues will then present '3N' and '3 successful' summary counts that actually correspond to number of files rather than number of successful items pages now give a concise 'summary name' of 'name - num_files - import progress' (it also eli...des for longer names) for menus and the new command palette, which unlike the older status-bar-based strings are always available and will stop clients with many pages becoming multi-wide-column-menu-hell improved apng parsing. hydrus can now detect that pngs are actually apngs for (hopefully) all types of valid apng. it turns out some weird apngs have some additional header data, but I wrote a new chunk parser that should figure it all out with luck, users who have window focus issues when closing a child window (e.g. close review services, the main gui does not get focus back), should now see that happen (issue #1063). this may need some more work, so let me know the session weight count in the 'pages' menu now updates on any add thumbs, remove thumbs, or thumbnail panel swap. this should be fast all the time, and buffer nicely if it is ever overwhelmed, but let me know if you have a madlad session and get significant new lag when you watch a downloader bring in new files a user came up with a clever idea to efficiently target regenerations for the recent fix to pixel duplicate calculations for images with opaque alpha channels, so this week I will queue up some pixel hash regeneration. it does not fix every file with an opaque alpha channel, but it should help out. it also shouldn't take all that long to clear this queue out. lastly, I renamed that file maintenance job from 'calculate file pixel hash' to 'regenerate pixel duplicate data' the various duplicate system actions on thumbnails now specify the number of files being acted on in the yes/no dialog fixed a bug when searching in complicated multi-file-service domains on a client that has been on for a long time (some data used here was being reset in regular db maintenance) fixed a bug where for very unlucky byte sizes, for instance 188213746, the client was flipping between two different output values (e.g. 179MB/180MB) on subsequent calls (issue #1068) after some user profiles and experimental testing, rebalanced some optimisations in sibling and parent calculation. fingers crossed, some larger sibling groups with worst-case numbers should calculate more efficiently if sibling/parent calculation hits a heavy bump and takes a really long time to do a job during 'normal' time, the whole system now takes a much longer break (half an hour) before continuing","title":"misc"},{"location":"changelog.html#boring_stuff","text":"the delete dialog has basic multiple local file service support ready for that expansion. it no longer refers to the old static 'my files' service identifier. I think it will need some user-friendly more polish once that feature is in the 'migrate tags' dialog's file service filtering now supports n local file services, and 'all local files' updated the build scripts to force windows server 2019 (and macos-11). github is rolling out windows 2022 as the new latest, and there's a couple of things to iron out first on our end. this is probably going to happen this year though, along with Qt6 and python 3.9, which will all mean end of life for windows 7 in our built hydrus release removed the spare platform-specific github workflow scripts from the static folder--I wanted these as a sort of backup, but they never proved useful and needed to be synced on all changes","title":"boring stuff"},{"location":"changelog.html#version_473","text":"","title":"Version 473"},{"location":"changelog.html#misc_1","text":"fixed the recent problem with drag and dropping thumbnails to a level below the top row of pages. sorry for the trouble! fixed a bug where the client would not load results sorting by 'import time' when the search file domain was a single deleted file domain fixed a list display bug in the edit page parser dialog when a subsidiary page parser has two complicated string-match based content parsers collections now sort by modified time, using the largest known modified time in their collection added sqlite3.exe console back into the windows build--sorry, it was missing since the github build changeover! added a note to the help about backing up when tight on space, which I will repeat here: the sqlite database files are very compressible (70GB->17GB on default 7zip settings!), so if you need more space on your backup drive, this is a good way to reclaim it","title":"misc"},{"location":"changelog.html#command_palette_1","text":"a user has written a cool 'command palette' for the program! it brings up a type-and-search interface to navigate to pages or menu entries. I have integrated his first version and set the default shortcut to Ctrl+P. users who update will get this shortcut if they have nothing else on Ctrl+P on 'main window' set. if you prefer Ctrl+K or anything else, you can change it under file->shortcuts->the main window regular users will get a page list they can search and select, advanced users will also get the (potentially dangerous) full scan of the menubar and current thumbnail right-click menu. I will be polishing this latter feature in future to filter out big maintenance jobs and show checkbox status and similar, so if you are advanced, please be careful for now try it out, and let me know how it goes. the underlying widget is neat, and I can change its behaviour and extend it significantly","title":"command palette"},{"location":"changelog.html#mostly_advanced_deleted_file_improvements","text":"files that have been deleted from a local file domain are now aware of their file deletion reason. this is visible in the right-click menu of thumb or media canvas the advanced file deletion dialog now initialises using this stored reason. if all pending deletees have the same existing reason stored, it will display it, and if they are all set but differ, this will be noted and an option to not alter them is also available. this will come up later in niche advanced situations with mutiple file services reversing a recent change, local file deletion reasons are no longer cleared on undelete or (re)import. they'll now hang around invisibly and initialise any future advanced file deletion dialog updated the thumbnail and canvas undelete mechanism to handle multiple services. now, if the files are deleted in more than one domain, you will be asked to multiple-select which you wish to undelete for. if there is only one eligible undelete service, the process remains unchanged--you'll just get a yes/no confirmation if the 'confirm trash' option is set misc multiple local file services code conversion work","title":"(mostly advanced) deleted file improvements"},{"location":"changelog.html#version_472","text":"","title":"Version 472"},{"location":"changelog.html#highlights","text":"the file domain button of every autocomplete input now has a 'multiple locations' entry. this launches a checkboxlist of all possible search locations and allows you to search more than one domain at once. it works, too! in future, when we can have multiple 'my files' services, you'll be able to choose here unions of what to search. users in advanced mode will see repository updates, all local files, all known files, and the new deleted file domains on this list. I removed the deleted file domains from the front menu because I expect them to be rarely used in options->thumbnails , there is now a 'thumbnail scaling' dropdown. you can set it so thumbs only ever scale down (which remains the default), scale to fit (i.e. very small images are also scaled up), or scale to fill. the 'animation' as thumbnails refit and delayed-regen themselves to 'scale to fill' is accidentally one of the coolest things I have done removed the old 'EXPERIMENTAL: thumbnail fill' option. the new mode works essentially the same, but faster and higher quality in the page tab menu, there is a new submenu 'pages', which shows all the pages at or below the current level. if you right-click on a page of pages tab, it will just show for that page of pages. click any of the entries, you will select that page. it is a web browser-like quick navigation menu, let me know what you think! rejiggered the page tab menu a little, reordering groups a bit with nicer separators and putting 'select' navigation on the menu even if you click in greyspace fixed a problem in page tab menu logic where if you right-clicked on greyspace, it would render the menu for the bottommost page of pages row rather than the one actually clicked last week's update where a mouse release event will no longer fire in the shortcuts system if the mouse moved a decent distance between press and release should now work in the media viewer canvas when dragging is set to anchor the mouse in place. some advanced users may wish to try setting archive/delete to work on mouse release and use left click to drag","title":"highlights"},{"location":"changelog.html#bug_fixes","text":"fixed pages force-refreshing file queries on session load. this has never been intentional, but it slipped through again and was happening for a month or two now. I have added an explicit test to my routine to make sure this doesn't happen again, sorry for the trouble! fixed a problem in the recent fast shutdown code that was accidentally also shutting down some maintenance work like repository processing as soon as it started, even if 'exit and force work' was chosen all images with a completely opaque alpha channel will now have that alpha channel dropped for the new pixel hash calculation, meaning they will now match with regular non-alpha images with the same colour pixel data. in fact, all images with an opaque alpha now have that channel dropped on load, which will save a little memory and CPU any time they are handled (issue #770) if the 'durable' temporary database exists on boot, it is now deleted and a fresh one created rather than trying to re-use the old one (which would not have any useful information anyway), and a note is made to log. one user recently had a problem where an existing corrupt temp dir was stopping boot, which this fixes","title":"bug fixes"},{"location":"changelog.html#misc_2","text":"updated the windows build to use a newer version of mpv, moving from roughly 2021-02 to 2022-01. this replaces mpv-1.dll with mpv-2.dll, and I set the installer to delete the old '1'. if you extract, you can delete the old '1' yourself, but things seems fine with both. in any case, let me know if you have any trouble! updated the windows build to use sqlite 3.37.2, the sqlite3 in the db dir is also updated the deleted files system now neatly cleans up old file deletion reasons on file import and file undelete cleared out some old thumbnail generation code, including deleting an old and now obselete optimisation where too-large thumbs were scaled down to make new thumbs rather than revisiting source. since our thumb situation is more complicated now, this is gone in favour of nicer quality thumbs and simpler code fixed up some upcoming database maintenance code in my new modules updated and cleaned the code in the old wx-converted checkboxlist and replaced some awkward old access routines cleared out some old HTA archive code","title":"misc"},{"location":"changelog.html#version_471","text":"","title":"Version 471"},{"location":"changelog.html#times","text":"if you have file viewing stats turned on (by default it is), the client will now track the 'last viewed time' of your files, both in preview and media viewers. a record is only made assuming they pass the viewtime checks under options->file viewing statistics (so if you scroll through really quick but have it set to only record after five seconds of viewing, it will not save that as the last viewed time). this last viewed time is shown on the right-click menu with the normal file viewing statistics sorting by 'import time' and 'modified time' are moved to a new 'time' subgroup in the sort button menu also added to 'time' is 'last viewed time'. note that this has not been tracked until now, so you will have to look at a bunch of things for a few seconds each to get some data to sort with to go with 'x time' pattern, 'time imported' is renamed to 'import time' across the program. both should work for system predicate parsing system:'import time' and 'modified time' are now bundled into a new 'system:time' stub in the system predicates list. the window launched from here is an experimental new paged panel. I am not sure I really like it, but let's see how it works IRL 'system:last view time' is added to search the new field! give it a go once you have some data also note that the search and sort of last viewed time works on the 'media viewer' number. those users who use preview or combined numbers for stuff, let me know if and how you would like that to work here--sort/search for both media and preview, try to combine based on the logic in the options, or something else?","title":"times"},{"location":"changelog.html#loading_serialised_pngs","text":"the client can now load serialised downloader-pngs if they are a perfect RGB conversion of an original greyscale export. the pngs don't technically have to be pngs anymore! if you drag and drop an image from firefox, the temporary bitmap exported and attached to the DnD should work! the lain easy downloader import now has a clipboard paste button. it can take regular json text, and now, bitmap data! the 'import->from clipboard' button action in many multiple column lists across the program (e.g. manage parsers) (but not every list, a couple are working on older code) also now accepts bitmap data on the clipboard the various load errors here are also improved","title":"loading serialised pngs"},{"location":"changelog.html#custom_widget_colors","text":"(advanced users only for now) after banging my head against it, I finally figured out an ok way to send colors from a QSS style file to python code. this means I can convert my custom widgets to inherit colours from the current QSS. I expect to migrate pretty much everything currently fixed over to this, except tag colours and maybe some thumbnail border stuff, and retire the old darkmode if you are a QSS lad, please check out the new entries at the bottom of default_hydrus.qss and play around with them in your own QSSes. please do not send me any updates to be folded in to the install yet as I still have a bunch of other colours to add. this week is just a test--please let me know how it works for you","title":"custom widget colors"},{"location":"changelog.html#misc_3","text":"mouse release events no longer trigger a command in the shortcuts system if the release happens more than about 20 pixels from the original mouse down. this is tricky, so if you are into clever shortcuts, let me know how it works for you the file maintenance manager (which has been getting a lot of work recently with icc profiles, pixel dupes, some thumb regen, and new audio channel checks), now saves its work and publishes updates faster to the UI, at least once every ten seconds the sort entries in the page sort control are now always sorted according to their full (type, name) string, and the mouse-wheel-to-navigate is now fixed to always mirror this improved some 'delete file reason' handling. currently, a file deletion reason should only be applied when a file is entering trash. there was a bug that force-physical-deleting files from trash would overwrite their original deletion reason. this is now fixed. the advanced delete files dialog now disables the whole reason panel better when needed, never sends a file reason down to the database when there should be no reason, disables the panel if all the files are in the trash, and at the database level when file deletion reasons are being set, all files are filtered for status beforehand to ensure none are accidentally set by other means. I am about to make trash more intelligent as part of multiple local file services, so I expect to revisit this soon the new ICC Profile conversion no longer occurs on I or F mode files. there are weird 32/64 bit monochrome files, and mode/ICC conversion goes whack with current PIL code replaced the critical hamming test in the duplicate files system with a different bit-counting strategy that works about 9% faster. hamming test is used in all duplicate file searching, so this should help out a tiny bit in a lot of places","title":"misc"},{"location":"changelog.html#boring_cleanup","text":"cleaned up how media viewer canvas type is stored and tested in many places all across the program, file viewing statistics are now tracked by type rather than a hardcoded double of preview & media viewer. it will take a moment to update the database to reflect this this week cleaned up a ton of file viewing stats code cleared out the last twenty or so uses of the old 'execute many select' database access routine in favour of the new lower-overhead and more query-optimisable temporary integer tables method","title":"boring cleanup"},{"location":"changelog.html#version_470","text":"","title":"Version 470"},{"location":"changelog.html#multiple_file_services","text":"I finished the conversion of all UI search to the new multiple location object. everything from back- to frontend now supports cleverer search. since searching deleted files is simple to add, users in advanced mode will now see 'deleted from...' in a new list in the tag autocomplete dropdown file domain button the next step is writing a widget that allows multiple selection, and then all this should work right out of the box, and we'll be an important step closer to allowing multiple local file services","title":"multiple file services"},{"location":"changelog.html#misc_4","text":"the video parsing routine is better at detecting when a present audio track is actually silent (and hence when it should mark a video as 'no audio'). all video with audio will be requeued for a metadata reparse in the files maintenance system on update fixed an error from last week when trying to create a new page from the tags (e.g. middle-clicking them) in the active search list added 'audio mkv' format to the client, to represent mkvs without a video track. I think most of the time this is going to be audio track webms from youtube-dl and similar added 'file relationships: set files as potential duplicates' command to the 'media actions' shortcut set I expanded the 'backing up' section in 'installing and updating' help I wrote an 'anti-virus' section for 'installing and updating' help, since I kept writing the same basic spiel about false positives. please feel free to point people there in future to relieve their concerns improved some shutdown tests, the client and server should exit faster in some cases (e.g. when a hydrus repository network job is hanging on reconnection attempts, holding up the 'synchronise_repository' daemon shutdown) the 'file was xxx at (y timestamp), which was (z time units) before this check' line in file import notes now always puts 'z time units' as that, ignoring the 'always show ISO time' setting, which was just substituting it with 'y timestamp' again. let me know if you spot other bad grammar with this setting on, I'll fix it! fingers crossed, images in the LAB colourspace should now normalise to sRGB with the correct whitepoint. thanks to the user who provided example test tiff images here. this now uses the new PIL-based colourspace conversion I used to make ICC profiles work, just on LAB->sRGB. as far as I understand, OpenCV uses a fixed whitepoint of D65, resulting in yellow/warm conversions for some formats, but PIL may be able to figure out if D50 is needed??? if you have some crazy LUV or YPbPr or YIQ image that shows up wrong, please send it in and I'll see what I can do!","title":"misc"},{"location":"changelog.html#boring_rewrites_and_cleanup_while_doing_file_service_work","text":"many more UI objects now store and do file service logic using a more complicated 'location context', which can store a mix of multiple services and 'deleted from service' data. all the search code that works on this can now propagate to display: the management objects behind every page now store a multiple location object, not a single file service id all media panels (the thumbnail grid on a page) are now instantiated by a multiple location object, and when they serve a highlighted downloader, they now inherit that from the file import options, which in future will dictate import destinations all canvases are now the same, inheriting their new location context from their parents all tag lists are the same. mostly they don't care much about file domain, but when you middle-click to create new pages from the autocomplete dropdown list or active search list, it can matter, so they now propagate it along the underlying medialist objects are now the same, and various delete logic (e.g. 'should we remove this thumb we just deleted?') is updated to work on complex domains some duplicate lookup code now works on location context renamed 'location search context' object to 'location context' since it is used all over now and put it in its own file. also wrote it some neater initialisation and meta object code mr bones now gives duplicate data based on the union of all non-trash local services sans update files (another case of now supporting n services but n is fixed for the moment at 1, 'my files') a bunch of places across the program that used to default to 'my files' or 'all local files' (which is everything on disk, including trash and repository update files) now default to this new union of all non-trash local media services when doing page-to-page file drag and drops, the location context is now preserved (previously, the new page would always be 'my files') whole heap of other cleanup in these systems when a thumbnail cannot be provided (for deleted files or many 'all known files' situations), the thumbnail cache now provides the hydrus icon stand-in instantly, no delayed waterfall fixed an unusual situation where the file search could not provide a file in a tagless search when that file had no detailed file info row in the database. this seems to effect a legacy borked row or two in the new deleted file domain searches removed some ancient dumper status code from thumbnail objects","title":"boring rewrites and cleanup while doing file service work"},{"location":"changelog.html#version_469","text":"","title":"Version 469"},{"location":"changelog.html#misc_5","text":"the 'search log' button and the window panel now let you delete log entries. you can delete by completion status from the menu or specifically by row in the panel (just like the file log) fixed the new 'file is writable' checks for Linux/macOS, which were testing permissions overbroadly and messing with users with user-only permissions set. the code now hands off specific user/group negotiation to the OS. thanks to the maintainer of the AUR package for helping me out here (issue #1042) the various places where a file's permission bits are set are also cleaned up--hydrus now makes a distinction between double-checking a file is set user-writable before deleting/overwriting vs making a file's permission bits (which were potentially messed up in the past) 'nice' for human use after export. in the latter case, which still defaults to 644 on linux/macOS, the user's umask is now applied, so it should be 600 if you prefer that fixed a bug where the media viewer could have trouble initialising video when the player window instantiation was delayed (e.g. with embed button)","title":"misc"},{"location":"changelog.html#client_api","text":"added 'return_hashes' boolean parameter to GET /get_files/search_files, which makes the command return hashes instead of file ids. this is documented in the help and has a new unit test client api version is now 25","title":"client api"},{"location":"changelog.html#multiple_local_file_services_work","text":"I rewrote a lot of code this week, but it proved more complex than I expected. I also discovered I'll have to switch the pages and canvases over too before I can nicely switch the top level UI over to allow multiple search. rather than release a borked feature, I decided not to rush the final phase, so this remains boring for now! the good news is that it works well when I hack it in, so I just need to keep pushing rewrote the caller side of tag autocomplete lookup to work on the new multiple file search domain rewrote the main database level tag lookup code to work on the new multiple file search domain certain types of complicated tag autocomplete lookup, particularly on all known tags and any client with lots of siblings, will be faster now an unusual and complicated too-expansive sibling lookup on autocomplete lookups on 'all known tags' is now fixed","title":"multiple local file services work"},{"location":"changelog.html#boring_cleanup_and_refactoring","text":"predicate counts are now managed by a new object. predicates also support 0 minimum count for x-y count ranges, which is now possible when fetching count results from non-cross-referenced file domains (for now this means searching deleted files) cleaned up a ton of predicate instantiation code updated autocomplete, predicate, and pred count unit tests to handle the new objects and bug fixes wrote new classess to cover convenient multiple file search domain at the database level and updated a bunch of tag autocomplete search code to use it misc cleanup and refactoring for file domain search code purged more single file service inspection code from file search systems refactored most duplicate files storage code (about 70KB) to a new client db module","title":"boring cleanup and refactoring"},{"location":"changelog.html#version_468","text":"","title":"Version 468"},{"location":"changelog.html#misc_6","text":"fixed an issue where the one pixel border on the new 'control bar' on the media viewer was annoyingly catching mouse events at the bottom of the screen when in borderless fullscreen mode (and hence dragging the video, not scanning video position). the animation scanbar now owns its own border and processes mouse events on it properly fixed a typo bug in the new pixel hash system that meant new imports were not being added to the system correctly. on update, all files affected will be fixed of bad data and scheduled for a pixel hash regen. sorry for the trouble, and thank you for the quick reports here added a 'fixed font size example' qss file to the install. I have passed this file to others as an example of a quick way to make the font (and essentially ui scale) larger. it has some help comments inside and is now always available. the default example font size is lmao fixed another type checking problem for (mostly Arch/AUR) PyQt5 users (issue #1033) wrote a new display mappings maintenance routine for the database menu that repopulates the display mappings cache for missing rows. this task will be radically faster than a full regen for some problems, but it only solves those problems on boot, the program now explicitly checks if any of the database files are set as read-only and if so will dump out with an appropriate error rewrote my various 'file size problem' exception hierarchy to clearly split 'the file import options disallow this big gif' vs 'this file is zero size/this file is malformed'. we've had several problems here recently, but file import options rule-breaking should set 'ignore' again, and import objects should be better about ignore vs fail state from now on added more error handling for broken image files. some will report cleaner errors, some will now import the new parsing system that discards source urls if they share a domain with a primary import url is now stricter--now discarding only if they share the same url class. the domain check was messing up saving post urls when they were parsed from an api url (issue #1036) the network engine no longer sends a Range header if it is expecting to pull html/json, just files. this fixes fetching pages from nijie.info (and several other server engines, it seems), which has some unusual access rules regarding Range and Accept-Encoding fixed a problem with no_daemons and the docker package server scripts (issue #1039) if the server engine (serverside or client api) is running a request during program shutdown, it now politely says 'Application is shutting down!' with a 503 rather than going bananas and dumping to log with an uncaught 500 fixed some bad client db update error handling code","title":"misc"},{"location":"changelog.html#multiple_local_file_services_system_predicate_edition","text":"system:file service now supports 'deleted' and 'petitioned' status advanced 'all known files' search pages now show more system predicates when inbox and archive are hidden because one has 0 count, and the search space is simple, system everything now says what they are, e.g. \"system:everything (24) (all in inbox)\" file repos' 'system:local/not local' now sort at the top of the system predicate list, like inbox/archive","title":"multiple local file services (system predicate edition)"},{"location":"changelog.html#client_api_1","text":"the GET /get_files/file_metadata call now returns the file modified date and imported/deleted timestamps for each file service the file is currently in or deleted from. check the help for an example! fixed client api file search with random sort (file_sort_type = 4) client api version is now 24","title":"client api"},{"location":"changelog.html#boring_multiple_local_file_services_work","text":"the system predicates listed in a search page dropdown now support the new 'multiple location search context' object, which means in future I will be able to switch over to 'file domain is union of (A, deleted from B, and C)' and all the numbers will add up appropriately with ranged 'x-y' counts and deal with combinations of file repo and local service and current/deleted neatly when fetching system preds in 'all known files', the system:everything 'num files' count will be stated if available in the cache for the new system:file service search, refactored db level file filtering to support all status types cleaned up how system preds are generated","title":"boring multiple local file services work"},{"location":"changelog.html#boring_refactoring_work","text":"moved GUGs from network domain code to their own file moved URL Class from network domain code to its own file moved the pure functions from network domain code to their own file cleared up some file maintenance enum variable names sped up random file sort for large result sets misc client network code cleanup and type hints, and rejiggered cleaner imports after the refactoring","title":"boring refactoring work"},{"location":"changelog.html#version_467","text":"","title":"Version 467"},{"location":"changelog.html#new_scanbar_cleanup","text":"the media container's scanbar and volume control are now combined on the same widget, meaning they now show/hide in sync and faster. their layout calculation is also more sensible. the new controls bar also has a thin border to make it pop better against a background video improved the way some auto-hide anti-flicker tech on the scanbar now works. it all hides a frame faster sometimes figured out some new anti-flicker tech to reduce/eliminate a frame of stretch when flicking from a static image to an mpv video, particularly for the first or second time in a session fixed a bug where clicking the global mute/unmute on an mpv player meant that certain shortcut keys (usually those with arrow keys) would not work on that player again. (it was a focus issue on the button, which then captured some form navigation keys but they had nowhere to go) brushed up some mouse coordinate testing logic across the program. some linux clients had trouble with the new animation scanbar popping up over mpv, I think I improved it! fixed another type problem with newer python/PyQt5 on Arch, also in scanbar coordinate testing fixed some dodgy colours in the scanbar initialisation and volume control border macOS users: I undid a long-time paint hack on the media container and the static image canvas. Qt is responsible for clearing the background again, which allows me to remove some jank anti-flicker tech. HOWEVER, the original reason for this hack was because without it, old macOS went to 100% CPU whenever the media viewer was showing something. therefore, to be safe, this option is still on for macOS users for now. you'll get a little flicker when browsing. please try hitting help->debug->gui actions->macOS anti-flicker test and do some mixed video/image browsing. does your whole damn client lock up?","title":"new scanbar cleanup"},{"location":"changelog.html#misc_7","text":"the 'file log' and 'search log' buttons are now a new widget class that puts an arrow on the side that opens a menu. the secret right-click menus of these buttons is now exposed for all fixed a bug affecting some greyscale pngs with ICC profiles--they were coming out pure white due to a colourspace conversion problem fixed an import problem when PIL could not load a file (due to file malformation) but OpenCV could. this was causing a failed import from the new ICC profile detection code when the downloader hits a broken image file that cannot be imported due to malformation, the status is now 'error' instead of the incorrect 'ignored' fixed the duplicate file filesize comparison statement sometimes showing > in one direction and \u2248 in the other. it happened when the larger file was between 20/19 and 21/20 times the size of the smaller, just a logic typo (issue #1028) the trash maintenance daemon is moved from the old threaded daemon system to the new repeating job worker pool. this is the last daemon cleaned up, so I am retiring the old and mostly defunct 'no_daemons' launch argument. a variety of other daemon infrastructure for things like shutdown checks is similarly removed. the program also now waits for the newer daemon jobs to finish working on shutdown moved most client daemon jobs like repository sync and dirty object save down so they start after the first session is loaded rather than right after boot if a file is called to regen its thumbnail but currently has no dimension, this is now a no-op rather than an error. in the situation where users force thumb regen before metadata regen and encounter this, it is sorted out later when the metadata regen recognises new dimensions and reschedules the thumb regen added an extensive user-written guide to the --db_synchronous_override launch argument to the launch arguments help page. it is possible and safe to run the program with synchronous=0 as long as certain caveats are obeyed. thanks to the user who figured this out and wrote it up the downloader engine now discards source urls in an import job if they have the same domain as any existing primary url. this will ensure that if a booru has a link back to itself as a source url, when the 'source' is really an alternate rather than a dupe, it won't be added in hydrus as a known url for that imported file misc cleanup in downloader system and file/search log UI fixed a type bug in the file and search log 'import from png' action. if you have existing pngs previously exported from here, they will import ok now refactored the various hydrus compression code to a new HydrusCompression file exported serialisable data pngs such as from file or search log that hold simple Strings now always compress the data before embedding it in the png. existing pngs that hold uncompressed strings should still load ok the payload in an exported png is now always compressed, and the payload description always states the uncompressed size sped up client shutdown when network traffic has been paused the whole time and a repo sync job might have wanted to run. these jobs also do not hang on a thread worker if network traffic is paused, but they should wake immediately when it is unpaused the hydrus login system is now resistant to connection failures; previously it was getting hung up and jamming the whole hydrus sync system when a server was down","title":"misc"},{"location":"changelog.html#client_api_2","text":"added GET /manage_database/mr_bones to the Client API. it returns a JSON Object with the same numbers used in the help->how boned am I? dialog incremented Client API version to 23","title":"client api"},{"location":"changelog.html#version_466","text":"","title":"Version 466"},{"location":"changelog.html#video_scanbar_autohide","text":"the scanbar that shows below audio and video is now embedded inside the video frame, and it show/hides based on how close your mouse is to it I've wanted to do this for a long time, since it will allow you to watch 16:9 videos at true 100% in borderless fullscreen, but the hackery of how the media viewer works behind the scenes means this took more work than you'd think and is still a little jank. there's a small amount of flicker when it pops in and out, which I will work on in future. in any case, please have a play with it and let me know what you think. I expect to add some more options, like for the activation padding area around it, and I will be tidying up more layout stuff throughout the media viewer if you are a mostly keyboard user, please check out the new 'global' shortcut to flip on/off a 'force the animation scanbar to show' mode I don't really want to bring back the always-on hanging-below scanbar that just takes up space, but if you try this new embedded scanbar and really hate it, we'll see what we can do","title":"video scanbar autohide"},{"location":"changelog.html#more_duplicate_filter_search_options","text":"the duplicates page now has a dropdown on the search for 'must be/can be/excludes pixel dupes'! the duplicates page now has a number control on the search for what distance the pair was found at! I am not sure how accurate this thing is in all cases, but it seems I started tracking this data some time ago and forgot I even had it these new options are remembered in your session and should remain fast in most normal cases. I put time into some complicated database work this week to get this going, please let me know if you have any trouble with it","title":"more duplicate filter search options"},{"location":"changelog.html#misc_8","text":"when the export filename pattern in the export files dialog means many of the files share the same base and hence need to do 'filename (5)'-style suffixes to be unique, the number here is now calculated much more efficiently. opening this dialog on 10,000 files with an oft-duplicate pattern should now be a jolt of lag but not many minutes when you choose to 'separate' a subscription with more than 100 queries, you are no longer forced to break it into half when you do break a subscription in half, it now makes sure to sort the query texts before separating if you are in advanced mode, the 'selection tags' list on the left of every page can now switch its tag display type between 'multiple media views', 'display', and 'storage'. this is experimental and a bunch of stuff like 'select files with this tag' won't work yet janitors' petition pages now start with their tag list in 'storage' mode, so you can see the actual tags being changed rather than with siblings and parents calculated rebalanced some janitor mapping petition weights. jannies should see a smoother balance of 'lots of small petitions' vs 'a few larger petitions' amongst petitions all with the same reason and creator","title":"misc"},{"location":"changelog.html#boring_cleanup_and_little_fixes","text":"when you set the checker options in the edit subscription dialog, the queries now recalculate their file velocity better. previously, they would just set 'unknown' and recalc on the next run, but now they will actually recalculate if the query container is loaded into memory or otherwise put a status that says 'will calculate on next run' removed the 'should be namespaced' reason from the manage tags quick petition reasons. this is now all handled by siblings, tidying up storage tags manually is busywork when you click 'copy traceback' on an error popup, it also copies the software version, your platform, and if you are on a frozen build or running from source the logger now prints version number for every block, just before the timestamp cleaned up a variety of media viewer UI code while working on the scanbar, fixing some misc display bugs moved pixel hash storage responsibility from 'file metadata' to 'similar files' module the similar files system now searches pixel hashes when it is called to do any similar files search. they count as 'exact match' distance when a file gets a new pixel hash, it now sees if any other files have that same hash. if so, it now gets queued up again in the similar files search system, ensuring this match is not missed misc nomenclature cleanup--since we now have both 'pixel hashes' and 'phashes', phashes are now referred to as 'perceptual hashes' everywhere massively refactored the primary table join that drives potential duplicates search. it should work a bit faster now and it is much easier to work with I added pixel dupe and distance search to the standard search results version of the join and the 'system:everything' version, which has several optimisations silenced some shutdown handling in file maintenance that was being printed to log as an error fixed some 'broken object load' error handling to print the timestamp of the specific bad object, not whatever timestamp was requested. this error handling now also prints the full dump name and version to the log, and version to the exported filename. I was working with a user who had broken subs this week, and lacking this full info made things just a little trickier to put back together fixed some drag and drop handling where it was possible to drop thumbnails on a certain location of a page of pages that held an empty page of pages but it would not create a new child media page to hold them misc serverside db code cleanup fixed python 3.10 type bugs in window coordinate saving and Qt image generation from buffer (issue #1027)","title":"boring cleanup and little fixes"},{"location":"client_api.html","text":"Client API \u00b6 The hydrus client now supports a very simple API so you can access it with external programs. Enabling the API \u00b6 By default, the Client API is not turned on. Go to services->manage services and give it a port to get it started. I recommend you not allow non-local connections (i.e. only requests from the same computer will work) to start with. The Client API should start immediately. It will only be active while the client is open. To test it is running all correct (and assuming you used the default port of 45869), try loading this: http://127.0.0.1:45869 You should get a welcome page. By default, the Client API is HTTP, which means it is ok for communication on the same computer or across your home network (e.g. your computer's web browser talking to your computer's hydrus), but not secure for transmission across the internet (e.g. your phone to your home computer). You can turn on HTTPS, but due to technical complexities it will give itself a self-signed 'certificate', so the security is good but imperfect, and whatever is talking to it (e.g. your web browser looking at https://127.0.0.1:45869 ) may need to add an exception. The Client API is still experimental and sometimes not user friendly. If you want to talk to your home computer across the internet, you will need some networking experience. You'll need a static IP or reverse proxy service or dynamic domain solution like no-ip.org so your device can locate it, and potentially port-forwarding on your router to expose the port. If you have a way of hosting a domain and have a signed certificate (e.g. from Let's Encrypt ), you can overwrite the client.crt and client.key files in your 'db' directory and HTTPS hydrus should host with those. Once the API is running, go to its entry in services->review services . Each external program trying to access the API will need its own access key, which is the familiar 64-character hexadecimal used in many places in hydrus. You can enter the details manually from the review services panel and then copy/paste the key to your external program, or the program may have the ability to request its own access while a mini-dialog launched from the review services panel waits to catch the request. Browsers and tools created by hydrus users \u00b6 Hydrus Companion : a Chrome/Firefox extension for hydrus that allows easy download queueing as you browse and advanced login support Hydrus Web : a web client for hydrus (allows phone browsing of hydrus) LoliSnatcher : a booru client for Android that can talk to hydrus Anime Boxes : a booru browser, now supports adding your client as a Hydrus Server FlipFlip : an advanced slideshow interface, now supports hydrus as a source Iwara-Hydrus : a userscript to simplify sending Iwara videos to Hydrus Network Hydrus Archive Delete : Archive/Delete filter in your web browser hydrus-dd : DeepDanbooru neural network tagging for Hydrus hyextract : Extract archives from Hydrus and reimport with tags and URL associations dolphin-hydrus-actions : Adds Hydrus right-click context menu actions to Dolphin file manager.","title":"Client API"},{"location":"client_api.html#client_api","text":"The hydrus client now supports a very simple API so you can access it with external programs.","title":"Client API"},{"location":"client_api.html#enabling_the_api","text":"By default, the Client API is not turned on. Go to services->manage services and give it a port to get it started. I recommend you not allow non-local connections (i.e. only requests from the same computer will work) to start with. The Client API should start immediately. It will only be active while the client is open. To test it is running all correct (and assuming you used the default port of 45869), try loading this: http://127.0.0.1:45869 You should get a welcome page. By default, the Client API is HTTP, which means it is ok for communication on the same computer or across your home network (e.g. your computer's web browser talking to your computer's hydrus), but not secure for transmission across the internet (e.g. your phone to your home computer). You can turn on HTTPS, but due to technical complexities it will give itself a self-signed 'certificate', so the security is good but imperfect, and whatever is talking to it (e.g. your web browser looking at https://127.0.0.1:45869 ) may need to add an exception. The Client API is still experimental and sometimes not user friendly. If you want to talk to your home computer across the internet, you will need some networking experience. You'll need a static IP or reverse proxy service or dynamic domain solution like no-ip.org so your device can locate it, and potentially port-forwarding on your router to expose the port. If you have a way of hosting a domain and have a signed certificate (e.g. from Let's Encrypt ), you can overwrite the client.crt and client.key files in your 'db' directory and HTTPS hydrus should host with those. Once the API is running, go to its entry in services->review services . Each external program trying to access the API will need its own access key, which is the familiar 64-character hexadecimal used in many places in hydrus. You can enter the details manually from the review services panel and then copy/paste the key to your external program, or the program may have the ability to request its own access while a mini-dialog launched from the review services panel waits to catch the request.","title":"Enabling the API"},{"location":"client_api.html#browsers_and_tools_created_by_hydrus_users","text":"Hydrus Companion : a Chrome/Firefox extension for hydrus that allows easy download queueing as you browse and advanced login support Hydrus Web : a web client for hydrus (allows phone browsing of hydrus) LoliSnatcher : a booru client for Android that can talk to hydrus Anime Boxes : a booru browser, now supports adding your client as a Hydrus Server FlipFlip : an advanced slideshow interface, now supports hydrus as a source Iwara-Hydrus : a userscript to simplify sending Iwara videos to Hydrus Network Hydrus Archive Delete : Archive/Delete filter in your web browser hydrus-dd : DeepDanbooru neural network tagging for Hydrus hyextract : Extract archives from Hydrus and reimport with tags and URL associations dolphin-hydrus-actions : Adds Hydrus right-click context menu actions to Dolphin file manager.","title":"Browsers and tools created by hydrus users"},{"location":"contact.html","text":"contact and links \u00b6 I welcome all your bug reports, questions, ideas, and comments. It is always interesting to see how other people are using my software and what they generally think of it. Most of the changes every week are suggested by users. You can contact me by email, twitter, tumblr, discord, or the 8chan.moe /t/ thread or Endchan board--I do not mind which. Please know that I have difficulty with social media, and while I try to reply to all messages, it sometimes takes me a while to catch up. The Github Issue Tracker was turned off for some time, as it did not fit my workflow and I could not keep up, but it is now running again, managed by a team of volunteer users. Please feel free to submit feature requests there if you are comfortable with Github. I am not socially active on Github, please do not ping me there. I am on the discord on Saturday afternoon, USA time, if you would like to talk live, and briefly on Wednesday after I put the release out. If that is not a good time for you, please leave me a DM and I will get to you when I can. There are also plenty of other hydrus users who idle who can help with support questions. I delete all tweets and resolved email conversations after three months. So, if you think you are waiting for a reply, or I said I was going to work on something you care about and seem to have forgotten, please do nudge me. I am always overwhelmed by work and behind on my messages. This is not to say that I do not enjoy just hanging out or talking about possible new features, but forgive me if some work takes longer than expected or if I cannot get to a particular idea quickly. In the same way, if you encounter actual traceback-raising errors or crashes, there is only one guy to fix it, so I prefer to know ASAP so I can prioritise. I work by myself because I have acute difficulty working with others. Please do not spontaneously write long design documents or prepare other work for me--I find it more stressful than helpful, every time, and I won't give it the attention it deserves. If you would like to contribute time to hydrus, the user projects like the downloader repository and wiki help guides always have things to do. That said: homepage github ( latest build ) issue tracker 8chan.moe /t/ (Hydrus Network General) ( endchan bunker (.org) ) tumblr ( rss ) new downloads old downloads twitter email discord patreon user-run repository and wiki (including download presets for several non-default boorus)","title":"contact and links"},{"location":"contact.html#contact_and_links","text":"I welcome all your bug reports, questions, ideas, and comments. It is always interesting to see how other people are using my software and what they generally think of it. Most of the changes every week are suggested by users. You can contact me by email, twitter, tumblr, discord, or the 8chan.moe /t/ thread or Endchan board--I do not mind which. Please know that I have difficulty with social media, and while I try to reply to all messages, it sometimes takes me a while to catch up. The Github Issue Tracker was turned off for some time, as it did not fit my workflow and I could not keep up, but it is now running again, managed by a team of volunteer users. Please feel free to submit feature requests there if you are comfortable with Github. I am not socially active on Github, please do not ping me there. I am on the discord on Saturday afternoon, USA time, if you would like to talk live, and briefly on Wednesday after I put the release out. If that is not a good time for you, please leave me a DM and I will get to you when I can. There are also plenty of other hydrus users who idle who can help with support questions. I delete all tweets and resolved email conversations after three months. So, if you think you are waiting for a reply, or I said I was going to work on something you care about and seem to have forgotten, please do nudge me. I am always overwhelmed by work and behind on my messages. This is not to say that I do not enjoy just hanging out or talking about possible new features, but forgive me if some work takes longer than expected or if I cannot get to a particular idea quickly. In the same way, if you encounter actual traceback-raising errors or crashes, there is only one guy to fix it, so I prefer to know ASAP so I can prioritise. I work by myself because I have acute difficulty working with others. Please do not spontaneously write long design documents or prepare other work for me--I find it more stressful than helpful, every time, and I won't give it the attention it deserves. If you would like to contribute time to hydrus, the user projects like the downloader repository and wiki help guides always have things to do. That said: homepage github ( latest build ) issue tracker 8chan.moe /t/ (Hydrus Network General) ( endchan bunker (.org) ) tumblr ( rss ) new downloads old downloads twitter email discord patreon user-run repository and wiki (including download presets for several non-default boorus)","title":"contact and links"},{"location":"database_migration.html","text":"the hydrus database \u00b6 A hydrus client consists of three components: the software installation This is the part that comes with the installer or extract release, with the executable and dlls and a handful of resource folders. It doesn't store any of your settings--it just knows how to present a database as a nice application. If you just run the client executable straight, it looks in its 'db' subdirectory for a database, and if one is not found, it creates a new one. If it sees a database running at a lower version than itself, it will update the database before booting it. It doesn't really matter where you put this. An SSD will load it marginally quicker the first time, but you probably won't notice. If you run it without command-line parameters, it will try to write to its own directory (to create the initial database), so if you mean to run it like that, it should not be in a protected place like Program Files . the actual database The client stores all its preferences and current state and knowledge about files--like file size and resolution, tags, ratings, inbox status, and so on and so on--in a handful of SQLite database files, defaulting to install_dir/db . Depending on the size of your client, these might total 1MB in size or be as much as 10GB. In order to perform a search or to fetch or process tags, the client has to interact with these files in many small bursts, which means it is best if these files are on a drive with low latency. An SSD is ideal, but a regularly-defragged HDD with a reasonable amount of free space also works well. your media files All of your jpegs and webms and so on (and their thumbnails) are stored in a single complicated directory that is by default at install_dir/db/client_files . All the files are named by their hash and stored in efficient hash-based subdirectories. In general, it is not navigable by humans, but it works very well for the fast access from a giant pool of files the client needs to do to manage your media. Thumbnails tend to be fetched dozens at a time, so it is, again, ideal if they are stored on an SSD. Your regular media files--which on many clients total hundreds of GB--are usually fetched one at a time for human consumption and do not benefit from the expensive low-latency of an SSD. They are best stored on a cheap HDD, and, if desired, also work well across a network file system. these components can be put on different drives \u00b6 Although an initial install will keep these parts together, it is possible to, say, run the database on a fast drive but keep your media in cheap slow storage. This is an excellent arrangement that works for many users. And if you have a very large collection, you can even spread your files across multiple drives. It is not very technically difficult, but I do not recommend it for new users. Backing such an arrangement up is obviously more complicated, and the internal client backup is not sophisticated enough to capture everything, so I recommend you figure out a broader solution with a third-party backup program like FreeFileSync. pulling your media apart \u00b6 Danger As always, I recommend creating a backup before you try any of this, just in case it goes wrong. If you would like to move your files and thumbnails to new locations, I generally recommend you not move their folders around yourself--the database has an internal knowledge of where it thinks its file and thumbnail folders are, and if you move them while it is closed, it will become confused and you will have to manually relocate what is missing on the next boot via a repair dialog. This is not impossible to figure out, but if the program's 'client files' folder confuses you at all, I'd recommend you stay away. Instead, you can simply do it through the gui: Go database->migrate database , giving you this dialog: This is an image from my old laptop's client. At that time, I had moved the main database and its files out of the install directory but otherwise kept everything together. Your situation may be simpler or more complicated. To move your files somewhere else, add the new location, empty/remove the old location, and then click 'move files now'. Portable means that the path is beneath the main db dir and so is stored as a relative path. Portable paths will still function if the database changes location between boots (for instance, if you run the client from a USB drive and it mounts under a different location). Weight means the relative amount of media you would like to store in that location. It only matters if you are spreading your files across multiple locations. If location A has a weight of 1 and B has a weight of 2, A will get approximately one third of your files and B will get approximately two thirds. The operations on this dialog are simple and atomic--at no point is your db ever invalid. Once you have the locations and ideal usage set how you like, hit the 'move files now' button to actually shuffle your files around. It will take some time to finish, but you can pause and resume it later if the job is large or you want to undo or alter something. If you decide to move your actual database, the program will have to shut down first. Before you boot up again, you will have to create a new program shortcut: informing the software that the database is not in the default location \u00b6 A straight call to the client executable will look for a database in install_dir/db . If one is not found, it will create one. So, if you move your database and then try to run the client again, it will try to create a new empty database in the previous location! So, pass it a -d or --db_dir command line argument, like so: client -d=\"D:\\\\media\\\\my\\_hydrus\\_database\" --or-- client --db_dir=\"G:\\\\misc documents\\\\New Folder (3)\\\\DO NOT ENTER\" --or, for macOS-- open -n -a \"Hydrus Network.app\" --args -d=\"/path/to/db\" And it will instead use the given path. If no database is found, it will similarly create a new empty one at that location. You can use any path that is valid in your system, but I would not advise using network locations and so on, as the database works best with some clever device locking calls these interfaces may not provide. Rather than typing the path out in a terminal every time you want to launch your external database, create a new shortcut with the argument in. Something like this, which is from my main development computer and tests that a fresh default install will run an existing database ok: Note that an install with an 'external' database no longer needs access to write to its own path, so you can store it anywhere you like, including protected read-only locations (e.g. in 'Program Files'). If you do move it, just double-check your shortcuts are still good and you are done. finally \u00b6 If your database now lives in one or more new locations, make sure to update your backup routine to follow them! moving to an SSD \u00b6 As an example, let's say you started using the hydrus client on your HDD, and now you have an SSD available and would like to move your thumbnails and main install to that SSD to speed up the client. Your database will be valid and functional at every stage of this, and it can all be undone. The basic steps are: Move your 'fast' files to the fast location. Move your 'slow' files out of the main install directory. Move the install and db itself to the fast location and update shortcuts. Specifically: Update your backup if you maintain one. Create an empty folder on your HDD that is outside of your current install folder. Call it 'hydrus_files' or similar. Create two empty folders on your SSD with names like 'hydrus_db' and 'hydrus_thumbnails'. Set the 'thumbnail location override' to 'hydrus_thumbnails'. You should get that new location in the list, currently empty but prepared to take all your thumbs. Hit 'move files now' to actually move the thumbnails. Since this involves moving a lot of individual files from a high-latency source, it will take a long time to finish. The hydrus client may hang periodically as it works, but you can just leave it to work on its own--it will get there in the end. You can also watch it do its disk work under Task Manager. Now hit 'add location' and select your new 'hydrus_files'. 'hydrus_files' should be added and willing to take 50% of the files. Select the old location (probably 'install_dir/db/client_files') and hit 'decrease weight' until it has weight 0 and you are prompted to remove it completely. 'hydrus_files' should now be willing to take all the files from the old location. Hit 'move files now' again to make this happen. This should be fast since it is just moving a bunch of folders across the same partition. With everything now 'non-portable' and hence decoupled from the db, you can now easily migrate the install and db to 'hydrus_db' simply by shutting the client down and moving the install folder in a file explorer. Update your shortcut to the new client.exe location and try to boot. Update your backup scheme to match your new locations. Enjoy a much faster client. You should now have something like this: p.s. running multiple clients \u00b6 Since you now know how to tell the software about an external database, you can, if you like, run multiple clients from the same install (and if you previously had multiple install folders, now you can now just use the one). Just make multiple shortcuts to the same client executable but with different database directories. They can run at the same time. You'll save yourself a little memory and update-hassle. I do this on my laptop client to run a regular client for my media and a separate 'admin' client to do PTR petitions and so on.","title":"database migration"},{"location":"database_migration.html#intro","text":"A hydrus client consists of three components: the software installation This is the part that comes with the installer or extract release, with the executable and dlls and a handful of resource folders. It doesn't store any of your settings--it just knows how to present a database as a nice application. If you just run the client executable straight, it looks in its 'db' subdirectory for a database, and if one is not found, it creates a new one. If it sees a database running at a lower version than itself, it will update the database before booting it. It doesn't really matter where you put this. An SSD will load it marginally quicker the first time, but you probably won't notice. If you run it without command-line parameters, it will try to write to its own directory (to create the initial database), so if you mean to run it like that, it should not be in a protected place like Program Files . the actual database The client stores all its preferences and current state and knowledge about files--like file size and resolution, tags, ratings, inbox status, and so on and so on--in a handful of SQLite database files, defaulting to install_dir/db . Depending on the size of your client, these might total 1MB in size or be as much as 10GB. In order to perform a search or to fetch or process tags, the client has to interact with these files in many small bursts, which means it is best if these files are on a drive with low latency. An SSD is ideal, but a regularly-defragged HDD with a reasonable amount of free space also works well. your media files All of your jpegs and webms and so on (and their thumbnails) are stored in a single complicated directory that is by default at install_dir/db/client_files . All the files are named by their hash and stored in efficient hash-based subdirectories. In general, it is not navigable by humans, but it works very well for the fast access from a giant pool of files the client needs to do to manage your media. Thumbnails tend to be fetched dozens at a time, so it is, again, ideal if they are stored on an SSD. Your regular media files--which on many clients total hundreds of GB--are usually fetched one at a time for human consumption and do not benefit from the expensive low-latency of an SSD. They are best stored on a cheap HDD, and, if desired, also work well across a network file system.","title":"the hydrus database"},{"location":"database_migration.html#different_drives","text":"Although an initial install will keep these parts together, it is possible to, say, run the database on a fast drive but keep your media in cheap slow storage. This is an excellent arrangement that works for many users. And if you have a very large collection, you can even spread your files across multiple drives. It is not very technically difficult, but I do not recommend it for new users. Backing such an arrangement up is obviously more complicated, and the internal client backup is not sophisticated enough to capture everything, so I recommend you figure out a broader solution with a third-party backup program like FreeFileSync.","title":"these components can be put on different drives"},{"location":"database_migration.html#pulling_media_apart","text":"Danger As always, I recommend creating a backup before you try any of this, just in case it goes wrong. If you would like to move your files and thumbnails to new locations, I generally recommend you not move their folders around yourself--the database has an internal knowledge of where it thinks its file and thumbnail folders are, and if you move them while it is closed, it will become confused and you will have to manually relocate what is missing on the next boot via a repair dialog. This is not impossible to figure out, but if the program's 'client files' folder confuses you at all, I'd recommend you stay away. Instead, you can simply do it through the gui: Go database->migrate database , giving you this dialog: This is an image from my old laptop's client. At that time, I had moved the main database and its files out of the install directory but otherwise kept everything together. Your situation may be simpler or more complicated. To move your files somewhere else, add the new location, empty/remove the old location, and then click 'move files now'. Portable means that the path is beneath the main db dir and so is stored as a relative path. Portable paths will still function if the database changes location between boots (for instance, if you run the client from a USB drive and it mounts under a different location). Weight means the relative amount of media you would like to store in that location. It only matters if you are spreading your files across multiple locations. If location A has a weight of 1 and B has a weight of 2, A will get approximately one third of your files and B will get approximately two thirds. The operations on this dialog are simple and atomic--at no point is your db ever invalid. Once you have the locations and ideal usage set how you like, hit the 'move files now' button to actually shuffle your files around. It will take some time to finish, but you can pause and resume it later if the job is large or you want to undo or alter something. If you decide to move your actual database, the program will have to shut down first. Before you boot up again, you will have to create a new program shortcut:","title":"pulling your media apart"},{"location":"database_migration.html#launch_parameter","text":"A straight call to the client executable will look for a database in install_dir/db . If one is not found, it will create one. So, if you move your database and then try to run the client again, it will try to create a new empty database in the previous location! So, pass it a -d or --db_dir command line argument, like so: client -d=\"D:\\\\media\\\\my\\_hydrus\\_database\" --or-- client --db_dir=\"G:\\\\misc documents\\\\New Folder (3)\\\\DO NOT ENTER\" --or, for macOS-- open -n -a \"Hydrus Network.app\" --args -d=\"/path/to/db\" And it will instead use the given path. If no database is found, it will similarly create a new empty one at that location. You can use any path that is valid in your system, but I would not advise using network locations and so on, as the database works best with some clever device locking calls these interfaces may not provide. Rather than typing the path out in a terminal every time you want to launch your external database, create a new shortcut with the argument in. Something like this, which is from my main development computer and tests that a fresh default install will run an existing database ok: Note that an install with an 'external' database no longer needs access to write to its own path, so you can store it anywhere you like, including protected read-only locations (e.g. in 'Program Files'). If you do move it, just double-check your shortcuts are still good and you are done.","title":"informing the software that the database is not in the default location"},{"location":"database_migration.html#finally","text":"If your database now lives in one or more new locations, make sure to update your backup routine to follow them!","title":"finally"},{"location":"database_migration.html#to_an_ssd","text":"As an example, let's say you started using the hydrus client on your HDD, and now you have an SSD available and would like to move your thumbnails and main install to that SSD to speed up the client. Your database will be valid and functional at every stage of this, and it can all be undone. The basic steps are: Move your 'fast' files to the fast location. Move your 'slow' files out of the main install directory. Move the install and db itself to the fast location and update shortcuts. Specifically: Update your backup if you maintain one. Create an empty folder on your HDD that is outside of your current install folder. Call it 'hydrus_files' or similar. Create two empty folders on your SSD with names like 'hydrus_db' and 'hydrus_thumbnails'. Set the 'thumbnail location override' to 'hydrus_thumbnails'. You should get that new location in the list, currently empty but prepared to take all your thumbs. Hit 'move files now' to actually move the thumbnails. Since this involves moving a lot of individual files from a high-latency source, it will take a long time to finish. The hydrus client may hang periodically as it works, but you can just leave it to work on its own--it will get there in the end. You can also watch it do its disk work under Task Manager. Now hit 'add location' and select your new 'hydrus_files'. 'hydrus_files' should be added and willing to take 50% of the files. Select the old location (probably 'install_dir/db/client_files') and hit 'decrease weight' until it has weight 0 and you are prompted to remove it completely. 'hydrus_files' should now be willing to take all the files from the old location. Hit 'move files now' again to make this happen. This should be fast since it is just moving a bunch of folders across the same partition. With everything now 'non-portable' and hence decoupled from the db, you can now easily migrate the install and db to 'hydrus_db' simply by shutting the client down and moving the install folder in a file explorer. Update your shortcut to the new client.exe location and try to boot. Update your backup scheme to match your new locations. Enjoy a much faster client. You should now have something like this:","title":"moving to an SSD"},{"location":"database_migration.html#multiple_clients","text":"Since you now know how to tell the software about an external database, you can, if you like, run multiple clients from the same install (and if you previously had multiple install folders, now you can now just use the one). Just make multiple shortcuts to the same client executable but with different database directories. They can run at the same time. You'll save yourself a little memory and update-hassle. I do this on my laptop client to run a regular client for my media and a separate 'admin' client to do PTR petitions and so on.","title":"p.s. running multiple clients"},{"location":"developer_api.html","text":"API documentation \u00b6 Library modules created by hydrus users \u00b6 Hydrus API : A python module that talks to the API. hydrus.js : A node.js module that talks to the API. API \u00b6 In general, the API deals with standard UTF-8 JSON. POST requests and 200 OK responses are generally going to be a JSON 'Object' with variable names as keys and values obviously as values. There are examples throughout this document. For GET requests, everything is in standard GET parameters, but some variables are complicated and will need to be JSON encoded and then URL encoded. An example would be the 'tags' parameter on GET /get_files/search_files , which is a list of strings. Since GET http URLs have limits on what characters are allowed, but hydrus tags can have all sorts of characters, you'll be doing this: Your list of tags: [ 'character:samus aran' , 'creator:\u9752\u3044\u685c' , 'system:height > 2000' ] JSON encoded: [ \"character:samus aran\" , \"creator:\\\\u9752\\\\u3044\\\\u685c\" , \"system:height > 2000\" ] Then URL encoded: %5B%22character%3Asamus%20aran%22%2C%20%22creator%3A%5Cu9752%5Cu3044%5Cu685c%22%2C%20%22system%3Aheight%20%3E%202000%22%5D In python, converting your tag list to the URL encoded string would be: urllib . parse . quote ( json . dumps ( tag_list ) ) Full URL path example: /get_files/search_files?file_sort_type=6&file_sort_asc=false&tags=%5B%22character%3Asamus%20aran%22%2C%20%22creator%3A%5Cu9752%5Cu3044%5Cu685c%22%2C%20%22system%3Aheight%20%3E%202000%22%5D On 200 OK, the API returns JSON for everything except actual file/thumbnail requests. On 4XX and 5XX, assume it will return plain text, which may be a raw traceback that I'd be interested in seeing. You'll typically get 400 for a missing parameter, 401/403/419 for missing/insufficient/expired access, and 500 for a real deal serverside error. Access and permissions \u00b6 The client gives access to its API through different 'access keys', which are the typical 64-character hex used in many other places across hydrus. Each guarantees different permissions such as handling files or tags. Most of the time, a user will provide full access, but do not assume this. If the access header or parameter is not provided, you will get 401, and all insufficient permission problems will return 403 with appropriate error text. Access is required for every request. You can provide this as an http header, like so: Hydrus-Client-API-Access-Key : 0150d9c4f6a6d2082534a997f4588dcf0c56dffe1d03ffbf98472236112236ae Or you can include it as a GET or POST parameter on any request (except POST /add_files/add_file , which uses the entire POST body for the file's bytes). Use the same name for your GET or POST argument, such as: /get_files/thumbnail?file_id=452158&Hydrus-Client-API-Access-Key=0150d9c4f6a6d2082534a997f4588dcf0c56dffe1d03ffbf98472236112236ae There is now a simple 'session' system, where you can get a temporary key that gives the same access without having to include the permanent access key in every request. You can fetch a session key with the /session_key command and thereafter use it just as you would an access key, just with Hydrus-Client-API-Session-Key instead. Session keys will expire if they are not used within 24 hours, or if the client is restarted, or if the underlying access key is deleted. An invalid/expired session key will give a 419 result with an appropriate error text. Bear in mind the Client API is still under construction. Setting up the Client API to be accessible across the internet requires technical experience to be convenient. HTTPS is available for encrypted comms, but the default certificate is self-signed (which basically means an eavesdropper can't see through it, but your ISP/government could if they decided to target you). If you have your own domain and SSL cert, you can replace them though (check the db directory for client.crt and client.key). Otherwise, be careful about transmitting sensitive content outside of your localhost/network. Access Management \u00b6 GET /api_version \u00b6 Gets the current API version. I will increment this every time I alter the API. Restricted access: NO. Required Headers: n/a Arguments: n/a Response: Some simple JSON describing the current api version (and hydrus client version, if you are interested). Example response { \"version\" : 17 , \"hydrus_version\" : 441 } GET /request_new_permissions \u00b6 Register a new external program with the client. This requires the 'add from api request' mini-dialog under services->review services to be open, otherwise it will 403. Restricted access: NO. Required Headers: n/a Arguments: name : (descriptive name of your access) basic_permissions : A JSON-encoded list of numerical permission identifiers you want to request. The permissions are currently: 0 - Import URLs 1 - Import Files 2 - Add Tags 3 - Search for Files 4 - Manage Pages 5 - Manage Cookies 6 - Manage Database Example request /request_new_permissions?name=my%20import%20script&basic_permissions=[0,1] Response: Some JSON with your access key, which is 64 characters of hex. This will not be valid until the user approves the request in the client ui. Example response { \"access_key\" : \"73c9ab12751dcf3368f028d3abbe1d8e2a3a48d0de25e64f3a8f00f3a1424c57\" } GET /session_key \u00b6 Get a new session key. Restricted access: YES. No permissions required. Required Headers: n/a Arguments: n/a Response: Some JSON with a new session key in hex. Example response { \"session_key\" : \"f6e651e7467255ade6f7c66050f3d595ff06d6f3d3693a3a6fb1a9c2b278f800\" } Note Note that the access you provide to get a new session key can be a session key, if that happens to be useful. As long as you have some kind of access, you can generate a new session key. A session key expires after 24 hours of inactivity, whenever the client restarts, or if the underlying access key is deleted. A request on an expired session key returns 419. GET /verify_access_key \u00b6 Check your access key is valid. Restricted access: YES. No permissions required. Required Headers: n/a Arguments: n/a Response: 401/403/419 and some error text if the provided access/session key is invalid, otherwise some JSON with basic permission info. Example response { \"basic_permissions\" : [ 0 , 1 , 3 ], \"human_description\" : \"API Permissions (autotagger): add tags to files, import files, search for files: Can search: only autotag this\" } GET /get_services \u00b6 Ask the client about its file and tag services. Restricted access: YES. At least one of Add Files, Add Tags, Manage Pages, or Search Files permission needed. Required Headers: n/a Arguments: n/a Response: Some JSON listing the client's file and tag services by name and 'service key'. Example response { \"local_tags\" : [ { \"name\" : \"my tags\" , \"service_key\" : \"6c6f63616c2074616773\" }, { \"name\" : \"filenames\" , \"service_key\" : \"231a2e992b67101318c410abb6e7d98b6e32050623f138ca93bd4ad2993de31b\" } ], \"tag_repositories\" : [ { \"name\" : \"PTR\" , \"service_key\" : \"ccb0cf2f9e92c2eb5bd40986f72a339ef9497014a5fb8ce4cea6d6c9837877d9\" } ], \"local_files\" : [ { \"name\" : \"my files\" , \"service_key\" : \"6c6f63616c2066696c6573\" } ], \"file_repositories\" : [], \"all_local_files\" : [ { \"name\" : \"all local files\" , \"service_key\" : \"616c6c206c6f63616c2066696c6573\" } ], \"all_known_files\" : [ { \"name\" : \"all known files\" , \"service_key\" : \"616c6c206b6e6f776e2066696c6573\" } ], \"all_known_tags\" : [ { \"name\" : \"all known tags\" , \"service_key\" : \"616c6c206b6e6f776e2074616773\" } ], \"trash\" : [ { \"name\" : \"trash\" , \"service_key\" : \"7472617368\" } ] } These services may be referred to in various metadata responses or required in request parameters (e.g. where to add tag mappings). Note that a user can rename their services. Much of this Client API uses this renameable 'service name' as service identifier, but I may start using service key, which is non-mutable ID specific to each client. The hardcoded services have shorter service key strings (it is usually just 'all known files' etc.. ASCII-converted to hex), but user-made stuff will have 64-character hex. Adding Files \u00b6 POST /add_files/add_file \u00b6 Tell the client to import a file. Restricted access: YES. Import Files permission needed. Required Headers: Content-Type: application/json (if sending path), application/octet-stream (if sending file) Arguments (in JSON): path : (the path you want to import) Example request body { \"path\" : \"E:\\\\to_import\\\\ayanami.jpg\" } Arguments (as bytes): You can alternately just send the file's bytes as the POST body. Response: Some JSON with the import result. Please note that file imports for large files may take several seconds, and longer if the client is busy doing other db work, so make sure your request is willing to wait that long for the response. Example response { \"status\" : 1 , \"hash\" : \"29a15ad0c035c0a0e86e2591660207db64b10777ced76565a695102a481c3dd1\" , \"note\" : \"\" } status is: 1 - File was successfully imported 2 - File already in database 3 - File previously deleted 4 - File failed to import 7 - File vetoed A file 'veto' is caused by the file import options (which in this case is the 'quiet' set under the client's options->importing ) stopping the file due to its resolution or minimum file size rules, etc... 'hash' is the file's SHA256 hash in hexadecimal, and 'note' is some occasional additional human-readable text appropriate to the file status that you may recognise from hydrus's normal import workflow. For an import error, it will always be the full traceback. POST /add_files/delete_files \u00b6 Tell the client to send files to the trash. Restricted access: YES. Import Files permission needed. Required Headers: Content-Type : application/json Arguments (in JSON): hash : (an SHA256 hash for a file in 64 characters of hexadecimal) hashes : (a list of SHA256 hashes) Example request body { \"hash\" : \"78f92ba4a786225ee2a1236efa6b7dc81dd729faf4af99f96f3e20bad6d8b538\" } Response: 200 and no content. You can use hash or hashes, whichever is more convenient. At the moment, this is only able to send files from 'my files' to the trash, and so it cannot perform physical deletes. There is no error if any files do not currently exist in 'my files'. In future, it will take some sort of file service parameter to do more. POST /add_files/undelete_files \u00b6 Tell the client to pull files back out of the trash. Restricted access: YES. Import Files permission needed. Required Headers: Content-Type : application/json Arguments (in JSON): hash : (an SHA256 hash for a file in 64 characters of hexadecimal) hashes : (a list of SHA256 hashes) Example request body { \"hash\" : \"78f92ba4a786225ee2a1236efa6b7dc81dd729faf4af99f96f3e20bad6d8b538\" } Response: 200 and no content. You can use hash or hashes, whichever is more convenient. This is just the reverse of a delete_files--removing files from trash and putting them back in 'my files'. There is no error if any files do not currently exist in 'trash'. POST /add_files/archive_files \u00b6 Tell the client to archive inboxed files. Restricted access: YES. Import Files permission needed. Required Headers: Content-Type : application/json Arguments (in JSON): hash : (an SHA256 hash for a file in 64 characters of hexadecimal) hashes : (a list of SHA256 hashes) Example request body { \"hash\" : \"78f92ba4a786225ee2a1236efa6b7dc81dd729faf4af99f96f3e20bad6d8b538\" } Response: 200 and no content. You can use hash or hashes, whichever is more convenient. This puts files in the 'archive', taking them out of the inbox. It only has meaning for files currently in 'my files' or 'trash'. There is no error if any files do not currently exist or are already in the archive. POST /add_files/unarchive_files \u00b6 Tell the client re-inbox archived files. Restricted access: YES. Import Files permission needed. Required Headers: Content-Type : application/json Arguments (in JSON): hash : (an SHA256 hash for a file in 64 characters of hexadecimal) hashes : (a list of SHA256 hashes) Example request body { \"hash\" : \"78f92ba4a786225ee2a1236efa6b7dc81dd729faf4af99f96f3e20bad6d8b538\" } Response: 200 and no content. You can use hash or hashes, whichever is more convenient. This puts files back in the inbox, taking them out of the archive. It only has meaning for files currently in 'my files' or 'trash'. There is no error if any files do not currently exist or are already in the inbox. Adding Tags \u00b6 GET /add_tags/clean_tags \u00b6 Ask the client about how it will see certain tags. Restricted access: YES. Add Tags permission needed. Required Headers: n/a Arguments (in percent-encoded JSON): tags : (a list of the tags you want cleaned) Example request: Given tags [ \" bikini \" , \"blue eyes\" , \" character : samus aran \" , \":)\" , \" \" , \"\" , \"10\" , \"11\" , \"9\" , \"system:wew\" , \"-flower\" ] : /add_tags/clean_tags?tags=%5B%22%20bikini%20%22%2C%20%22blue%20%20%20%20eyes%22%2C%20%22%20character%20%3A%20samus%20aran%20%22%2C%20%22%3A%29%22%2C%20%22%20%20%20%22%2C%20%22%22%2C%20%2210%22%2C%20%2211%22%2C%20%229%22%2C%20%22system%3Awew%22%2C%20%22-flower%22%5D Response: The tags cleaned according to hydrus rules. They will also be in hydrus human-friendly sorting order. Example response { \"tags\" : [ \"9\" , \"10\" , \"11\" , \"::)\" , \"bikini\" , \"blue eyes\" , \"character:samus aran\" , \"flower\" , \"wew\" ] } Mostly, hydrus simply trims excess whitespace, but the other examples are rare issues you might run into. 'system' is an invalid namespace, tags cannot be prefixed with hyphens, and any tag starting with ':' is secretly dealt with internally as \"[no namespace]:[colon-prefixed-subtag]\". Again, you probably won't run into these, but if you see a mismatch somewhere and want to figure it out, or just want to sort some numbered tags, you might like to try this. GET /add_tags/get_tag_services \u00b6 Deprecated This is becoming obsolete and will be removed! Use /get_services instead! Ask the client about its tag services. Restricted access: YES. Add Tags permission needed. Required Headers: n/a Arguments: n/a Response: Some JSON listing the client's 'local tags' and tag repository services by name. Example response { \"local_tags\" : [ \"my tags\" ], \"tag_repositories\" : [ \"public tag repository\" , \"mlp fanfic tagging server\" ] } Note A user can rename their services. Don't assume the client's local tags service will be \"my tags\". POST /add_tags/add_tags \u00b6 Make changes to the tags that files have. Restricted access: YES. Add Tags permission needed. Required Headers: n/a Arguments (in JSON): hash : (selective A, an SHA256 hash for a file in 64 characters of hexadecimal) hashes : (selective A, a list of SHA256 hashes) service_names_to_tags : (selective B, an Object of service names to lists of tags to be 'added' to the files) service_keys_to_tags : (selective B, an Object of service keys to lists of tags to be 'added' to the files) service_names_to_actions_to_tags : (selective B, an Object of service names to content update actions to lists of tags) service_keys_to_actions_to_tags : (selective B, an Object of service keys to content update actions to lists of tags) You can use either 'hash' or 'hashes'. You can use either 'service_names_to...' or 'service_keys_to...', where names is simple and human-friendly \"my tags\" and similar (but may be renamed by a user), but keys is a little more complicated but accurate/unique. Since a client may have multiple tag services with non-default names and pseudo-random keys, if it is not your client you will need to check the /get_services call to get the names or keys, and you may need some selection UI on your end so the user can pick what to do if there are multiple choices. I encourage using keys if you can. Also, you can use either '...to_tags', which is simple and add-only, or '...to_actions_to_tags', which is more complicated and allows you to remove/petition or rescind pending content. The permitted 'actions' are: 0 - Add to a local tag service. 1 - Delete from a local tag service. 2 - Pend to a tag repository. 3 - Rescind a pend from a tag repository. 4 - Petition from a tag repository. (This is special) 5 - Rescind a petition from a tag repository. When you petition a tag from a repository, a 'reason' for the petition is typically needed. If you send a normal list of tags here, a default reason of \"Petitioned from API\" will be given. If you want to set your own reason, you can instead give a list of [ tag, reason ] pairs. Some example requests: Adding some tags to a file { \"hash\" : \"df2a7b286d21329fc496e3aa8b8a08b67bb1747ca32749acb3f5d544cbfc0f56\" , \"service_names_to_tags\" : { \"my tags\" : [ \"character:supergirl\" , \"rating:safe\" ] } } Adding more tags to two files { \"hashes\" : [ \"df2a7b286d21329fc496e3aa8b8a08b67bb1747ca32749acb3f5d544cbfc0f56\" , \"f2b022214e711e9a11e2fcec71bfd524f10f0be40c250737a7861a5ddd3faebf\" ], \"service_names_to_tags\" : { \"my tags\" : [ \"process this\" ], \"public tag repository\" : [ \"creator:dandon fuga\" ] } } A complicated transaction with all possible actions { \"hash\" : \"df2a7b286d21329fc496e3aa8b8a08b67bb1747ca32749acb3f5d544cbfc0f56\" , \"service_keys_to_actions_to_tags\" : { \"6c6f63616c2074616773\" : { \"0\" : [ \"character:supergirl\" , \"rating:safe\" ], \"1\" : [ \"character:superman\" ] }, \"aa0424b501237041dab0308c02c35454d377eebd74cfbc5b9d7b3e16cc2193e9\" : { \"2\" : [ \"character:supergirl\" , \"rating:safe\" ], \"3\" : [ \"filename:image.jpg\" ], \"4\" : [[ \"creator:danban faga\" , \"typo\" ], [ \"character:super_girl\" , \"underscore\" ]], \"5\" : [ \"skirt\" ] } } } This last example is far more complicated than you will usually see. Pend rescinds and petition rescinds are not common. Petitions are also quite rare, and gathering a good petition reason for each tag is often a pain. Note that the enumerated status keys in the service_names_to_actions_to_tags structure are strings, not ints (JSON does not support int keys for Objects). Response description: 200 and no content. Note Note also that hydrus tag actions are safely idempotent. You can pend a tag that is already pended and not worry about an error--it will be discarded. The same for other reasonable logical scenarios: deleting a tag that does not exist will silently make no change, pending a tag that is already 'current' will again be passed over. It is fine to just throw 'process this' tags at every file import you add and not have to worry about checking which files you already added it to. Adding URLs \u00b6 GET /add_urls/get_url_files \u00b6 Ask the client about an URL's files. Restricted access: YES. Import URLs permission needed. Required Headers: n/a Arguments: url : (the url you want to ask about) Example request: for URL http://safebooru.org/index.php?page=post&s=view&id=2753608 : /add_urls/get_url_files?url=http%3A%2F%2Fsafebooru.org%2Findex.php%3Fpage%3Dpost%26s%3Dview%26id%3D2753608 Response: Some JSON which files are known to be mapped to that URL. Note this needs a database hit, so it may be delayed if the client is otherwise busy. Don't rely on this to always be fast. Example response { \"normalised_url\" : \"https://safebooru.org/index.php?id=2753608&page=post&s=view\" , \"url_file_statuses\" : [ { \"status\" : 2 , \"hash\" : \"20e9002824e5e7ffc240b91b6e4a6af552b3143993c1778fd523c30d9fdde02c\" , \"note\" : \"url recognised: Imported at 2015/10/18 10:58:01, which was 3 years 4 months ago (before this check).\" } ] } The url_file_statuses is a list of zero-to-n JSON Objects, each representing a file match the client found in its database for the URL. Typically, it will be of length 0 (for as-yet-unvisited URLs or Gallery/Watchable URLs that are not attached to files) or 1, but sometimes multiple files are given the same URL (sometimes by mistaken misattribution, sometimes by design, such as pixiv manga pages). Handling n files per URL is a pain but an unavoidable issue you should account for. status is the same as for /add_files/add_file : 0 - File not in database, ready for import (you will only see this very rarely--usually in this case you will just get no matches) 2 - File already in database 3 - File previously deleted hash is the file's SHA256 hash in hexadecimal, and 'note' is some occasional additional human-readable text you may recognise from hydrus's normal import workflow. GET /add_urls/get_url_info \u00b6 Ask the client for information about a URL. Restricted access: YES. Import URLs permission needed. Required Headers: n/a Arguments: url : (the url you want to ask about) Example request: for URL https://8ch.net/tv/res/1846574.html : /add_urls/get_url_info?url=https%3A%2F%2F8ch.net%2Ftv%2Fres%2F1846574.html Response: Some JSON describing what the client thinks of the URL. Example response { \"normalised_url\" : \"https://8ch.net/tv/res/1846574.html\" , \"url_type\" : 4 , \"url_type_string\" : \"watchable url\" , \"match_name\" : \"8chan thread\" , \"can_parse\" : true } The url types are currently: 0 - Post URL 2 - File URL 3 - Gallery URL 4 - Watchable URL 5 - Unknown URL (i.e. no matching URL Class) 'Unknown' URLs are treated in the client as direct File URLs. Even though the 'File URL' type is available, most file urls do not have a URL Class, so they will appear as Unknown. Adding them to the client will pass them to the URL Downloader as a raw file for download and import. POST /add_urls/add_url \u00b6 Tell the client to 'import' a URL. This triggers the exact same routine as drag-and-dropping a text URL onto the main client window. Restricted access: YES. Import URLs permission needed. Add Tags needed to include tags. Required Headers: Content-Type : application/json Arguments (in JSON): url : (the url you want to add) destination_page_key : (optional page identifier for the page to receive the url) destination_page_name : (optional page name to receive the url) show_destination_page : (optional, defaulting to false, controls whether the UI will change pages on add) service_names_to_additional_tags : (optional, selective, tags to give to any files imported from this url) service_keys_to_additional_tags : (optional, selective, tags to give to any files imported from this url) filterable_tags : (optional tags to be filtered by any tag import options that applies to the URL) service_names_to_tags : (obsolete, legacy synonym for service_names_to_additional_tags) If you specify a destination_page_name and an appropriate importer page already exists with that name, that page will be used. Otherwise, a new page with that name will be recreated (and used by subsequent calls with that name). Make sure it that page name is unique (e.g. '/b/ threads', not 'watcher') in your client, or it may not be found. Alternately, destination_page_key defines exactly which page should be used. Bear in mind this page key is only valid to the current session (they are regenerated on client reset or session reload), so you must figure out which one you want using the /manage_pages/get_pages call. If the correct page_key is not found, or the page it corresponds to is of the incorrect type, the standard page selection/creation rules will apply. show_destination_page defaults to False to reduce flicker when adding many URLs to different pages quickly. If you turn it on, the client will behave like a URL drag and drop and select the final page the URL ends up on. service_names_to_additional_tags and service_keys_to_additional_tags use the same data structure as in /add_tags/add_tags--service ids to a list of tags to add. You will need 'add tags' permission or this will 403. These tags work exactly as 'additional' tags work in a tag import options . They are service specific, and always added unless some advanced tag import options checkbox (like 'only add tags to new files') is set. filterable_tags works like the tags parsed by a hydrus downloader. It is just a list of strings. They have no inherant service and will be sent to a tag import options , if one exists, to decide which tag services get what. This parameter is useful if you are pulling all a URL's tags outside of hydrus and want to have them processed like any other downloader, rather than figuring out service names and namespace filtering on your end. Note that in order for a tag import options to kick in, I think you will have to have a Post URL URL Class hydrus-side set up for the URL so some tag import options (whether that is Class-specific or just the default) can be loaded at import time. Example request body { \"url\" : \"https://8ch.net/tv/res/1846574.html\" , \"destination_page_name\" : \"kino zone\" , \"service_names_to_additional_tags\" : { \"my tags\" : [ \"as seen on /tv/\" ] } } Example request body { \"url\" : \"https://safebooru.org/index.php?page=post&s=view&id=3195917\" , \"filterable_tags\" : [ \"1girl\" , \"artist name\" , \"creator:azto dio\" , \"blonde hair\" , \"blue eyes\" , \"breasts\" , \"character name\" , \"commentary\" , \"english commentary\" , \"formal\" , \"full body\" , \"glasses\" , \"gloves\" , \"hair between eyes\" , \"high heels\" , \"highres\" , \"large breasts\" , \"long hair\" , \"long sleeves\" , \"looking at viewer\" , \"series:metroid\" , \"mole\" , \"mole under mouth\" , \"patreon username\" , \"ponytail\" , \"character:samus aran\" , \"solo\" , \"standing\" , \"suit\" , \"watermark\" ] } Response: Some JSON with info on the URL added. Example response { \"human_result_text\" : \"\\\"https://8ch.net/tv/res/1846574.html\\\" URL added successfully.\" , \"normalised_url\" : \"https://8ch.net/tv/res/1846574.html\" } POST /add_urls/associate_url \u00b6 Manage which URLs the client considers to be associated with which files. Restricted access: YES. Import URLs permission needed. Required Headers: Content-Type : application/json Arguments (in JSON): url_to_add : (an url you want to associate with the file(s)) urls_to_add : (a list of urls you want to associate with the file(s)) url_to_delete : (an url you want to disassociate from the file(s)) urls_to_delete : (a list of urls you want to disassociate from the file(s)) hash : (an SHA256 hash for a file in 64 characters of hexadecimal) hashes : (a list of SHA256 hashes) All of these are optional, but you obviously need to have at least one of url arguments and one of the hash arguments. The single/multiple arguments work the same--just use whatever is convenient for you. Unless you really know what you are doing with URL Classes, I strongly recommend you stick to associating URLs with just one single 'hash' at a time. Multiple hashes pointing to the same URL is unusual and frequently unhelpful. Example request body { \"url_to_add\" : \"https://rule34.xxx/index.php?id=2588418&page=post&s=view\" , \"hash\" : \"3b820114f658d768550e4e3d4f1dced3ff8db77443472b5ad93700647ad2d3ba\" } Response: 200 with no content. Like when adding tags, this is safely idempotent--do not worry about re-adding URLs associations that already exist or accidentally trying to delete ones that don't. Managing Cookies and HTTP Headers \u00b6 This refers to the cookies held in the client's session manager, which are sent with network requests to different domains. GET /manage_cookies/get_cookies \u00b6 Get the cookies for a particular domain. Restricted access: YES. Manage Cookies permission needed. Required Headers: n/a Arguments: domain Example request (for gelbooru.com) /manage_cookies/get_cookies?domain=gelbooru.com Response: A JSON Object listing all the cookies for that domain in [ name, value, domain, path, expires ] format. Example response { \"cookies\" : [ [ \"__cfduid\" , \"f1bef65041e54e93110a883360bc7e71\" , \".gelbooru.com\" , \"/\" , 1596223327 ], [ \"pass_hash\" , \"0b0833b797f108e340b315bc5463c324\" , \"gelbooru.com\" , \"/\" , 1585855361 ], [ \"user_id\" , \"123456\" , \"gelbooru.com\" , \"/\" , 1585855361 ] ] } Note that these variables are all strings except 'expires', which is either an integer timestamp or null for session cookies. This request will also return any cookies for subdomains. The session system in hydrus generally stores cookies according to the second-level domain, so if you request for specific.someoverbooru.net, you will still get the cookies for someoverbooru.net and all its subdomains. POST /manage_cookies/set_cookies \u00b6 Set some new cookies for the client. This makes it easier to 'copy' a login from a web browser or similar to hydrus if hydrus's login system can't handle the site yet. Restricted access: YES. Manage Cookies permission needed. Required Headers: Content-Type : application/json Arguments (in JSON): cookies : (a list of cookie rows in the same format as the GET request above) Example request body { \"cookies\" : [ [ \"PHPSESSID\" , \"07669eb2a1a6e840e498bb6e0799f3fb\" , \".somesite.com\" , \"/\" , 1627327719 ], [ \"tag_filter\" , \"1\" , \".somesite.com\" , \"/\" , 1627327719 ] ] } You can set 'value' to be null, which will clear any existing cookie with the corresponding name, domain, and path (acting essentially as a delete). Expires can be null, but session cookies will time-out in hydrus after 60 minutes of non-use. POST /manage_headers/set_user_agent \u00b6 This sets the 'Global' User-Agent for the client, as typically editable under network->data->manage http headers , for instance if you want hydrus to appear as a specific browser associated with some cookies. Restricted access: YES. Manage Cookies permission needed. Required Headers: * Content-Type : application/json Arguments (in JSON): user-agent : (a string) Example request body { \"user-agent\" : \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0\" } Send an empty string to reset the client back to the default User-Agent, which should be Mozilla/5.0 (compatible; Hydrus Client) . Managing Pages \u00b6 This refers to the pages of the main client UI. GET /manage_pages/get_pages \u00b6 Get the page structure of the current UI session. Restricted access: YES. Manage Pages permission needed. Required Headers: n/a Arguments: n/a Response: A JSON Object of the top-level page 'notebook' (page of pages) detailing its basic information and current sub-pages. Page of pages beneath it will list their own sub-page lists. Example response { \"pages\" : { \"name\" : \"top pages notebook\" , \"page_key\" : \"3b28d8a59ec61834325eb6275d9df012860a1ecfd9e1246423059bc47fb6d5bd\" , \"page_type\" : 10 , \"selected\" : true , \"pages\" : [ { \"name\" : \"files\" , \"page_key\" : \"d436ff5109215199913705eb9a7669d8a6b67c52e41c3b42904db083255ca84d\" , \"page_type\" : 6 , \"selected\" : false }, { \"name\" : \"thread watcher\" , \"page_key\" : \"40887fa327edca01e1d69b533dddba4681b2c43e0b4ebee0576177852e8c32e7\" , \"page_type\" : 9 , \"selected\" : false }, { \"name\" : \"pages\" , \"page_key\" : \"2ee7fa4058e1e23f2bd9e915cdf9347ae90902a8622d6559ba019a83a785c4dc\" , \"page_type\" : 10 , \"selected\" : true , \"pages\" : [ { \"name\" : \"urls\" , \"page_key\" : \"9fe22cb760d9ee6de32575ed9f27b76b4c215179cf843d3f9044efeeca98411f\" , \"page_type\" : 7 , \"selected\" : true }, { \"name\" : \"files\" , \"page_key\" : \"2977d57fc9c588be783727bcd54225d577b44e8aa2f91e365a3eb3c3f580dc4e\" , \"page_type\" : 6 , \"selected\" : false } ] } ] } } The page types are as follows: 1 - Gallery downloader 2 - Simple downloader 3 - Hard drive import 5 - Petitions (used by repository janitors) 6 - File search 7 - URL downloader 8 - Duplicates 9 - Thread watcher 10 - Page of pages The top page of pages will always be there, and always selected. 'selected' means which page is currently in view and will propagate down other page of pages until it terminates. It may terminate in an empty page of pages, so do not assume it will end on a 'media' page. The 'page_key' is a unique identifier for the page. It will stay the same for a particular page throughout the session, but new ones are generated on a client restart or other session reload. GET /manage_pages/get_page_info \u00b6 Get information about a specific page. Under Construction This is under construction. The current call dumps a ton of info for different downloader pages. Please experiment in IRL situations and give feedback for now! I will flesh out this help with more enumeration info and examples as this gets nailed down. POST commands to alter pages (adding, removing, highlighting), will come later. Restricted access: YES. Manage Pages permission needed. Required Headers: n/a Arguments: page_key : (hexadecimal page_key as stated in /manage_pages/get_pages ) simple : true or false (optional, defaulting to true) Example request /manage_pages/get_page_info?page_key=aebbf4b594e6986bddf1eeb0b5846a1e6bc4e07088e517aff166f1aeb1c3c9da&simple=true Response description A JSON Object of the page's information. At present, this mostly means downloader information. Example response with simple = true { \"page_info\" : { \"name\" : \"threads\" , \"page_key\" : \"aebbf4b594e6986bddf1eeb0b5846a1e6bc4e07088e517aff166f1aeb1c3c9da\" , \"page_type\" : 3 , \"management\" : { \"multiple_watcher_import\" : { \"watcher_imports\" : [ { \"url\" : \"https://someimageboard.net/m/123456\" , \"watcher_key\" : \"cf8c3525c57a46b0e5c2625812964364a2e801f8c49841c216b8f8d7a4d06d85\" , \"created\" : 1566164269 , \"last_check_time\" : 1566164272 , \"next_check_time\" : 1566174272 , \"files_paused\" : false , \"checking_paused\" : false , \"checking_status\" : 0 , \"subject\" : \"gundam pictures\" , \"imports\" : { \"status\" : \"4 successful (2 already in db)\" , \"simple_status\" : \"4\" , \"total_processed\" : 4 , \"total_to_process\" : 4 }, \"gallery_log\" : { \"status\" : \"1 successful\" , \"simple_status\" : \"1\" , \"total_processed\" : 1 , \"total_to_process\" : 1 } }, { \"url\" : \"https://someimageboard.net/a/1234\" , \"watcher_key\" : \"6bc17555b76da5bde2dcceedc382cf7d23281aee6477c41b643cd144ec168510\" , \"created\" : 1566063125 , \"last_check_time\" : 1566063133 , \"next_check_time\" : 1566104272 , \"files_paused\" : false , \"checking_paused\" : true , \"checking_status\" : 1 , \"subject\" : \"anime pictures\" , \"imports\" : { \"status\" : \"124 successful (22 already in db), 2 previously deleted\" , \"simple_status\" : \"124\" , \"total_processed\" : 124 , \"total_to_process\" : 124 }, \"gallery_log\" : { \"status\" : \"3 successful\" , \"simple_status\" : \"3\" , \"total_processed\" : 3 , \"total_to_process\" : 3 } } ] }, \"highlight\" : \"cf8c3525c57a46b0e5c2625812964364a2e801f8c49841c216b8f8d7a4d06d85\" } }, \"media\" : { \"num_files\" : 4 } } As you can see, even the 'simple' mode can get very large. Imagine that response for a page watching 100 threads! Turning simple mode off will display every import item, gallery log entry, and all hashes in the media (thumbnail) panel. For this first version, the five importer pages--hdd import, simple downloader, url downloader, gallery page, and watcher page--all give rich info based on their specific variables. The first three only have one importer/gallery log combo, but the latter two of course can have multiple. The \"imports\" and \"gallery_log\" entries are all in the same data format. POST /manage_pages/add_files \u00b6 Add files to a page. Restricted access: YES. Manage Pages permission needed. Required Headers: Content-Type : application/json Arguments (in JSON): page_key : (the page key for the page you wish to add files to) file_ids : (selective, a list of numerical file ids) hashes : (selective, a list of hexadecimal SHA256 hashes) You need to use either file_ids or hashes. The files they refer to will be appended to the given page, just like a thumbnail drag and drop operation. The page key is the same as fetched in the /manage_pages/get_pages call. Example request body { \"page_key\" : \"af98318b6eece15fef3cf0378385ce759bfe056916f6e12157cd928eb56c1f18\" , \"file_ids\" : [ 123 , 124 , 125 ] } Response: 200 with no content. If the page key is not found, this will 404. POST /manage_pages/focus_page \u00b6 'Show' a page in the main GUI, making it the current page in view. If it is already the current page, no change is made. Restricted access: YES. Manage Pages permission needed. Required Headers: Content-Type : application/json Arguments (in JSON): page_key : (the page key for the page you wish to show) The page key is the same as fetched in the /manage_pages/get_pages call. Example request body { \"page_key\" : \"af98318b6eece15fef3cf0378385ce759bfe056916f6e12157cd928eb56c1f18\" } Response: 200 with no content. If the page key is not found, this will 404. Searching Files \u00b6 File search in hydrus is not paginated like a booru--all searches return all results in one go. In order to keep this fast, search is split into two steps--fetching file identifiers with a search, and then fetching file metadata in batches. You may have noticed that the client itself performs searches like this--thinking a bit about a search and then bundling results in batches of 256 files before eventually throwing all the thumbnails on screen. GET /get_files/search_files \u00b6 Search for the client's files. Restricted access: YES. Search for Files permission needed. Additional search permission limits may apply. Required Headers: n/a Arguments (in percent-encoded JSON): tags : (a list of tags you wish to search for) file_service_name : (optional, selective, string, the file domain on which to search) file_service_key : (optional, selective, hexadecimal, the file domain on which to search) tag_service_name : (optional, selective, string, the tag domain on which to search) tag_service_key : (optional, selective, hexadecimal, the tag domain on which to search) file_sort_type : (optional, integer, the results sort method) file_sort_asc : true or false (optional, the results sort order) return_hashes : true or false (optional, default false, returns hex hashes instead of file ids) system_inbox : true or false (obsolete, use tags) system_archive : true or false (obsolete, use tags) Example request for 16 files (system:limit=16) in the inbox with tags \"blue eyes\", \"blonde hair\", and \"\u043a\u0438\u043d\u043e\" /get_files/search_files?tags=%5B%22blue%20eyes%22%2C%20%22blonde%20hair%22%2C%20%22%5Cu043a%5Cu0438%5Cu043d%5Cu043e%22%2C%20%22system%3Ainbox%22%2C%20%22system%3Alimit%3D16%22%5D If the access key's permissions only permit search for certain tags, at least one positive whitelisted/non-blacklisted tag must be in the \"tags\" list or this will 403. Tags can be prepended with a hyphen to make a negated tag (e.g. \"-green eyes\"), but these will not be checked against the permissions whitelist. Wildcards and namespace searches are supported, so if you search for 'character:sam*' or 'series:*', this will be handled correctly clientside. Many system predicates are also supported using a text parser! The parser was designed by a clever user for human input and allows for a certain amount of error (e.g. ~= instead of \u2248, or \"isn't\" instead of \"is not\") or requires more information (e.g. the specific hashes for a hash lookup). Here's a big list of current formats supported: System Predicates system:everything system:inbox system:archive system:has duration system:no duration system:is the best quality file of its duplicate group system:is not the best quality file of its duplicate group system:has audio system:no audio system:has icc profile system:no icc profile system:has tags system:no tags system:untagged system:number of tags > 5 system:number of tags ~= 10 system:number of tags > 0 system:number of words < 2 system:height = 600 system:height > 900 system:width < 200 system:width > 1000 system:filesize ~= 50 kilobytes system:filesize > 10megabytes system:filesize < 1 GB system:filesize > 0 B system:similar to abcdef01 abcdef02 abcdef03, abcdef04 with distance 3 system:similar to abcdef distance 5 system:limit = 100 system:filetype = image/jpg, image/png, apng system:hash = abcdef01 abcdef02 abcdef03 (this does sha256) system:hash = abcdef01 abcdef02 md5 system:modified date < 7 years 45 days 7h system:modified date > 2011-06-04 system:date modified > 7 years 2 months system:date modified < 0 years 1 month 1 day 1 hour system:time imported < 7 years 45 days 7h system:time imported > 2011-06-04 system:time imported > 7 years 2 months system:time imported < 0 years 1 month 1 day 1 hour system:time imported ~= 2011-1-3 system:time imported ~= 1996-05-2 system:duration < 5 seconds system:duration ~= 600 msecs system:duration > 3 milliseconds system:file service is pending to my files system:file service currently in my files system:file service is not currently in my files system:file service is not pending to my files system:num file relationships < 3 alternates system:number of file relationships > 3 false positives system:ratio is wider than 16:9 system:ratio is 16:9 system:ratio taller than 1:1 system:num pixels > 50 px system:num pixels < 1 megapixels system:num pixels ~= 5 kilopixel system:media views ~= 10 system:all views > 0 system:preview views < 10 system:media viewtime < 1 days 1 hour 0 minutes system:all viewtime > 1 hours 100 seconds system:preview viewtime ~= 1 day 30 hours 100 minutes 90s system:has url matching regex index\\.php system:does not have a url matching regex index\\.php system:has url https://safebooru.donmai.us/posts/4695284 system:does not have url https://safebooru.donmai.us/posts/4695284 system:has domain safebooru.com system:does not have domain safebooru.com system:has a url with class safebooru file page system:does not have a url with url class safebooru file page system:tag as number page < 5 More system predicate types and input formats will be available in future. Please test out the system predicates you want to send. Reverse engineering system predicate data from text is obviously tricky. If a system predicate does not parse, you'll get 400. Also, OR predicates are now supported! Just nest within the tag list, and it'll be treated like an OR. For instance: [ \"skirt\" , [ \"samus aran\" , \"lara croft\" ], \"system:height > 1000\" ] Makes: skirt samus aran OR lara croft system:height > 1000 The file and tag services are for search domain selection, just like clicking the buttons in the client. They are optional--default is 'my files' and 'all known tags', and you can use either key or name as in GET /get_services , whichever is easiest for your situation. file_sort_asc is 'true' for ascending, and 'false' for descending. The default is descending. file_sort_type is by default import time . It is an integer according to the following enum, and I have written the semantic (asc/desc) meaning for each type after: 0 - file size (smallest first/largest first) 1 - duration (shortest first/longest first) 2 - import time (oldest first/newest first) 3 - filetype (N/A) 4 - random (N/A) 5 - width (slimmest first/widest first) 6 - height (shortest first/tallest first) 7 - ratio (tallest first/widest first) 8 - number of pixels (ascending/descending) 9 - number of tags (on the current tag domain) (ascending/descending) 10 - number of media views (ascending/descending) 11 - total media viewtime (ascending/descending) 12 - approximate bitrate (smallest first/largest first) 13 - has audio (audio first/silent first) 14 - modified time (oldest first/newest first) 15 - framerate (slowest first/fastest first) 16 - number of frames (smallest first/largest first) 18 - last viewed time (oldest first/newest first) Response: The full list of numerical file ids that match the search. Example response { \"file_ids\" : [ 125462 , 4852415 , 123 , 591415 ] } Example response with return_hashes=true { \"hashes\" : [ \"1b04c4df7accd5a61c5d02b36658295686b0abfebdc863110e7d7249bba3f9ad\" , \"fe416723c731d679aa4d20e9fd36727f4a38cd0ac6d035431f0f452fad54563f\" , \"b53505929c502848375fbc4dab2f40ad4ae649d34ef72802319a348f81b52bad\" ] } File ids are internal and specific to an individual client. For a client, a file with hash H always has the same file id N, but two clients will have different ideas about which N goes with which H. They are a bit faster than hashes to retrieve and search with en masse , which is why they are exposed here. This search does not apply the implicit limit that most clients set to all searches (usually 10,000), so if you do system:everything on a client with millions of files, expect to get boshed. Even with a system:limit included, complicated queries with large result sets may take several seconds to respond. Just like the client itself. GET /get_files/file_metadata \u00b6 Get metadata about files in the client. Restricted access: YES. Search for Files permission needed. Additional search permission limits may apply. Required Headers: n/a Arguments (in percent-encoded JSON): file_ids : (selective, a list of numerical file ids) hashes : (selective, a list of hexadecimal SHA256 hashes) only_return_identifiers : true or false (optional, defaulting to false) detailed_url_information : true or false (optional, defaulting to false) hide_service_names_tags : true or false (optional, defaulting to false) You need one of file_ids or hashes. If your access key is restricted by tag, you cannot search by hashes, and the file_ids you search for must have been in the most recent search result . Example request for two files with ids 123 and 4567 /get_files/file_metadata?file_ids=%5B123%2C%204567%5D The same, but only wants hashes back /get_files/file_metadata?file_ids=%5B123%2C%204567%5D&only_return_identifiers=true And one that fetches two hashes /get_files/file_metadata?hashes=%5B%224c77267f93415de0bc33b7725b8c331a809a924084bee03ab2f5fae1c6019eb2%22%2C%20%223e7cb9044fe81bda0d7a84b5cb781cba4e255e4871cba6ae8ecd8207850d5b82%22%5D This request string can obviously get pretty ridiculously long. It also takes a bit of time to fetch metadata from the database. In its normal searches, the client usually fetches file metadata in batches of 256. Response: A list of JSON Objects that store a variety of file metadata. Example response { \"metadata\" : [ { \"file_id\" : 123 , \"hash\" : \"4c77267f93415de0bc33b7725b8c331a809a924084bee03ab2f5fae1c6019eb2\" , \"size\" : 63405 , \"mime\" : \"image/jpg\" , \"ext\" : \".jpg\" , \"width\" : 640 , \"height\" : 480 , \"duration\" : null , \"time_modified\" : null , \"file_services\" : { \"current\" : {}, \"deleted\" : {} }, \"has_audio\" : false , \"num_frames\" : null , \"num_words\" : null , \"is_inbox\" : true , \"is_local\" : true , \"is_trashed\" : false , \"known_urls\" : [], \"service_names_to_statuses_to_tags\" : {}, \"service_keys_to_statuses_to_tags\" : {}, \"service_names_to_statuses_to_display_tags\" : {}, \"service_keys_to_statuses_to_display_tags\" : {} }, { \"file_id\" : 4567 , \"hash\" : \"3e7cb9044fe81bda0d7a84b5cb781cba4e255e4871cba6ae8ecd8207850d5b82\" , \"size\" : 199713 , \"mime\" : \"video/webm\" , \"ext\" : \".webm\" , \"width\" : 1920 , \"height\" : 1080 , \"duration\" : 4040 , \"time_modified\" : 1624055647 , \"file_services\" : { \"current\" : { \"616c6c206c6f63616c2066696c6573\" : { \"time_imported\" : 1641044491 } }, \"deleted\" : { \"6c6f63616c2066696c6573\" : { \"time_deleted\" : 1641204274 , \"time_imported\" : 1641044491 } } }, \"has_audio\" : true , \"num_frames\" : 102 , \"num_words\" : null , \"is_inbox\" : false , \"is_local\" : true , \"is_trashed\" : false , \"known_urls\" : [ \"https://gelbooru.com/index.php?page=post&s=view&id=4841557\" , \"https://img2.gelbooru.com//images/80/c8/80c8646b4a49395fb36c805f316c49a9.jpg\" , \"http://origin-orig.deviantart.net/ed31/f/2019/210/7/8/beachqueen_samus_by_dandonfuga-ddcu1xg.jpg\" ], \"service_names_to_statuses_to_tags\" : { \"my tags\" : { \"0\" : [ \"favourites\" ], \"2\" : [ \"process this later\" ] }, \"my tag repository\" : { \"0\" : [ \"blonde_hair\" , \"blue_eyes\" , \"looking_at_viewer\" ], \"1\" : [ \"bodysuit\" ] } }, \"service_keys_to_statuses_to_tags\" : { \"6c6f63616c2074616773\" : { \"0\" : [ \"favourites\" ], \"2\" : [ \"process this later\" ] }, \"37e3849bda234f53b0e9792a036d14d4f3a9a136d1cb939705dbcd5287941db4\" : { \"0\" : [ \"blonde_hair\" , \"blue_eyes\" , \"looking_at_viewer\" ], \"1\" : [ \"bodysuit\" ] } }, \"service_names_to_statuses_to_display_tags\" : { \"my tags\" : { \"0\" : [ \"favourites\" ], \"2\" : [ \"process this later\" , \"processing\" ] }, \"my tag repository\" : { \"0\" : [ \"blonde hair\" , \"blue eyes\" , \"looking at viewer\" ], \"1\" : [ \"bodysuit\" , \"clothing\" ] } }, \"service_keys_to_statuses_to_display_tags\" : { \"6c6f63616c2074616773\" : { \"0\" : [ \"favourites\" ], \"2\" : [ \"process this later\" , \"processing\" ] }, \"37e3849bda234f53b0e9792a036d14d4f3a9a136d1cb939705dbcd5287941db4\" : { \"0\" : [ \"blonde hair\" , \"blue eyes\" , \"looking at viewer\" ], \"1\" : [ \"bodysuit\" , \"clothing\" ] } } } ] } And one where only_return_identifiers is true { \"metadata\" : [ { \"file_id\" : 123 , \"hash\" : \"4c77267f93415de0bc33b7725b8c331a809a924084bee03ab2f5fae1c6019eb2\" }, { \"file_id\" : 4567 , \"hash\" : \"3e7cb9044fe81bda0d7a84b5cb781cba4e255e4871cba6ae8ecd8207850d5b82\" } ] } Size is in bytes. Duration is in milliseconds, and may be an int or a float. file_services stores which file services the file is current ly in and deleted from. The entries are by the service key, same as for tags later on. In rare cases, the timestamps may be null , if they are unknown (e.g. a time_deleted for the file deleted before this information was tracked). The time_modified can also be null. Time modified is just the filesystem modified time for now, but it will evolve into more complicated storage in future with multiple locations (website post times) that'll be aggregated to a sensible value in UI. The service_names_to_statuses_to_tags and service_keys_to_statuses_to_tags structures are similar to the /add_tags/add_tags scheme, excepting that the status numbers are: 0 - current 1 - pending 2 - deleted 3 - petitioned The tag structure is duplicated for both name and key . The use of name is an increasingly legacy issue--a hack when the Client API was young--and 'service_names_to...' lookups are likely to be deleted in future in favour of service_key . I recommend you move to service key when you can. To learn more about service names and keys on a client, use the /get_services call (and cache the response--it doesn't change much!). Note Since JSON Object keys must be strings, these status numbers are strings, not ints. While service_XXX_to_statuses_to_tags represent the actual tags stored on the database for a file, the service_XXX_to_statuses_to_ display _tags structures reflect how tags appear in the UI, after siblings are collapsed and parents are added. If you want to edit a file's tags, start with service_keys_to_statuses_to_tags . If you want to render to the user, use service_keys_to_statuses_to_displayed_tags . If you add hide_service_names_tags=true , the service_names_to_statuses_to_tags and service_names_to_statuses_to_display_tags Objects will not be included. Use this to save data/CPU on large queries. If you add detailed_url_information=true , a new entry, detailed_known_urls , will be added for each file, with a list of the same structure as / add_urls/get_url_info . This may be an expensive request if you are querying thousands of files at once. For example \"detailed_known_urls\" : [ { \"normalised_url\" : \"https://gelbooru.com/index.php?id=4841557&page=post&s=view\" , \"url_type\" : 0 , \"url_type_string\" : \"post url\" , \"match_name\" : \"gelbooru file page\" , \"can_parse\" : true }, { \"normalised_url\" : \"https://img2.gelbooru.com//images/80/c8/80c8646b4a49395fb36c805f316c49a9.jpg\" , \"url_type\" : 5 , \"url_type_string\" : \"unknown url\" , \"match_name\" : \"unknown url\" , \"can_parse\" : false } ] GET /get_files/file \u00b6 Get a file. Restricted access: YES. Search for Files permission needed. Additional search permission limits may apply. Required Headers: n/a Arguments : file_id : (numerical file id for the file) hash : (a hexadecimal SHA256 hash for the file) Only use one. As with metadata fetching, you may only use the hash argument if you have access to all files. If you are tag-restricted, you will have to use a file_id in the last search you ran. Example request /get_files/file?file_id=452158 Example request /get_files/file?hash=7f30c113810985b69014957c93bc25e8eb4cf3355dae36d8b9d011d8b0cf623a Response: The file itself. You should get the correct mime type as the Content-Type header. GET /get_files/thumbnail \u00b6 Get a file's thumbnail. Restricted access: YES. Search for Files permission needed. Additional search permission limits may apply. Required Headers: n/a Arguments: file_id : (numerical file id for the file) hash : (a hexadecimal SHA256 hash for the file) Only use one. As with metadata fetching, you may only use the hash argument if you have access to all files. If you are tag-restricted, you will have to use a file_id in the last search you ran. Example request /get_files/thumbnail?file_id=452158 Example request /get_files/thumbnail?hash=7f30c113810985b69014957c93bc25e8eb4cf3355dae36d8b9d011d8b0cf623a Response: The thumbnail for the file. It will give application/octet-stream as the mime type. Some hydrus thumbs are jpegs, some are pngs. Managing the Database \u00b6 POST /manage_database/lock_on \u00b6 Pause the client's database activity and disconnect the current connection. Restricted access: YES. Manage Database permission needed. Arguments: None This is a hacky prototype. It commands the client database to pause its job queue and release its connection (and related file locks and journal files). This puts the client in a similar position as a long VACUUM command--it'll hang in there, but not much will work, and since the UI async code isn't great yet, the UI may lock up after a minute or two. If you would like to automate database backup without shutting the client down, this is the thing to play with. This should return pretty quick, but it will wait up to five seconds for the database to actually disconnect. If there is a big job (like a VACUUM) current going on, it may take substantially longer to finish that up and process this STOP command. You might like to check for the existence of a journal file in the db dir just to be safe. As long as this lock is on, all Client API calls except the unlock command will return 503. (This is a decent way to test the current lock status, too) POST /manage_database/lock_off \u00b6 Reconnect the client's database and resume activity. Restricted access: YES. Manage Database permission needed. Arguments: None This is the obvious complement to the lock. The client will resume processing its job queue and will catch up. If the UI was frozen, it should free up in a few seconds, just like after a big VACUUM. GET /manage_database/mr_bones \u00b6 Get the data from help->how boned am I?. This is a simple Object of numbers just for hacky advanced purposes if you want to build up some stats in the background. The numbers are the same as the dialog shows, so double check that to confirm what means what. Restricted access: YES. Manage Database permission needed. Arguments: None Example response { \"boned_stats\" : { \"num_inbox\" : 8356 , \"num_archive\" : 229 , \"num_deleted\" : 7010 , \"size_inbox\" : 7052596762 , \"size_archive\" : 262911007 , \"size_deleted\" : 13742290193 , \"earliest_import_time\" : 1451408539 , \"total_viewtime\" : [ 3280 , 41621 , 2932 , 83021 ], \"total_alternate_files\" : 265 , \"total_duplicate_files\" : 125 , \"total_potential_pairs\" : 3252 } }","title":"API documentation"},{"location":"developer_api.html#api_documentation","text":"","title":"API documentation"},{"location":"developer_api.html#library_modules_created_by_hydrus_users","text":"Hydrus API : A python module that talks to the API. hydrus.js : A node.js module that talks to the API.","title":"Library modules created by hydrus users"},{"location":"developer_api.html#api","text":"In general, the API deals with standard UTF-8 JSON. POST requests and 200 OK responses are generally going to be a JSON 'Object' with variable names as keys and values obviously as values. There are examples throughout this document. For GET requests, everything is in standard GET parameters, but some variables are complicated and will need to be JSON encoded and then URL encoded. An example would be the 'tags' parameter on GET /get_files/search_files , which is a list of strings. Since GET http URLs have limits on what characters are allowed, but hydrus tags can have all sorts of characters, you'll be doing this: Your list of tags: [ 'character:samus aran' , 'creator:\u9752\u3044\u685c' , 'system:height > 2000' ] JSON encoded: [ \"character:samus aran\" , \"creator:\\\\u9752\\\\u3044\\\\u685c\" , \"system:height > 2000\" ] Then URL encoded: %5B%22character%3Asamus%20aran%22%2C%20%22creator%3A%5Cu9752%5Cu3044%5Cu685c%22%2C%20%22system%3Aheight%20%3E%202000%22%5D In python, converting your tag list to the URL encoded string would be: urllib . parse . quote ( json . dumps ( tag_list ) ) Full URL path example: /get_files/search_files?file_sort_type=6&file_sort_asc=false&tags=%5B%22character%3Asamus%20aran%22%2C%20%22creator%3A%5Cu9752%5Cu3044%5Cu685c%22%2C%20%22system%3Aheight%20%3E%202000%22%5D On 200 OK, the API returns JSON for everything except actual file/thumbnail requests. On 4XX and 5XX, assume it will return plain text, which may be a raw traceback that I'd be interested in seeing. You'll typically get 400 for a missing parameter, 401/403/419 for missing/insufficient/expired access, and 500 for a real deal serverside error.","title":"API"},{"location":"developer_api.html#access_and_permissions","text":"The client gives access to its API through different 'access keys', which are the typical 64-character hex used in many other places across hydrus. Each guarantees different permissions such as handling files or tags. Most of the time, a user will provide full access, but do not assume this. If the access header or parameter is not provided, you will get 401, and all insufficient permission problems will return 403 with appropriate error text. Access is required for every request. You can provide this as an http header, like so: Hydrus-Client-API-Access-Key : 0150d9c4f6a6d2082534a997f4588dcf0c56dffe1d03ffbf98472236112236ae Or you can include it as a GET or POST parameter on any request (except POST /add_files/add_file , which uses the entire POST body for the file's bytes). Use the same name for your GET or POST argument, such as: /get_files/thumbnail?file_id=452158&Hydrus-Client-API-Access-Key=0150d9c4f6a6d2082534a997f4588dcf0c56dffe1d03ffbf98472236112236ae There is now a simple 'session' system, where you can get a temporary key that gives the same access without having to include the permanent access key in every request. You can fetch a session key with the /session_key command and thereafter use it just as you would an access key, just with Hydrus-Client-API-Session-Key instead. Session keys will expire if they are not used within 24 hours, or if the client is restarted, or if the underlying access key is deleted. An invalid/expired session key will give a 419 result with an appropriate error text. Bear in mind the Client API is still under construction. Setting up the Client API to be accessible across the internet requires technical experience to be convenient. HTTPS is available for encrypted comms, but the default certificate is self-signed (which basically means an eavesdropper can't see through it, but your ISP/government could if they decided to target you). If you have your own domain and SSL cert, you can replace them though (check the db directory for client.crt and client.key). Otherwise, be careful about transmitting sensitive content outside of your localhost/network.","title":"Access and permissions"},{"location":"developer_api.html#access_management","text":"","title":"Access Management"},{"location":"developer_api.html#api_version","text":"Gets the current API version. I will increment this every time I alter the API. Restricted access: NO. Required Headers: n/a Arguments: n/a Response: Some simple JSON describing the current api version (and hydrus client version, if you are interested). Example response { \"version\" : 17 , \"hydrus_version\" : 441 }","title":"GET /api_version"},{"location":"developer_api.html#request_new_permissions","text":"Register a new external program with the client. This requires the 'add from api request' mini-dialog under services->review services to be open, otherwise it will 403. Restricted access: NO. Required Headers: n/a Arguments: name : (descriptive name of your access) basic_permissions : A JSON-encoded list of numerical permission identifiers you want to request. The permissions are currently: 0 - Import URLs 1 - Import Files 2 - Add Tags 3 - Search for Files 4 - Manage Pages 5 - Manage Cookies 6 - Manage Database Example request /request_new_permissions?name=my%20import%20script&basic_permissions=[0,1] Response: Some JSON with your access key, which is 64 characters of hex. This will not be valid until the user approves the request in the client ui. Example response { \"access_key\" : \"73c9ab12751dcf3368f028d3abbe1d8e2a3a48d0de25e64f3a8f00f3a1424c57\" }","title":"GET /request_new_permissions"},{"location":"developer_api.html#session_key","text":"Get a new session key. Restricted access: YES. No permissions required. Required Headers: n/a Arguments: n/a Response: Some JSON with a new session key in hex. Example response { \"session_key\" : \"f6e651e7467255ade6f7c66050f3d595ff06d6f3d3693a3a6fb1a9c2b278f800\" } Note Note that the access you provide to get a new session key can be a session key, if that happens to be useful. As long as you have some kind of access, you can generate a new session key. A session key expires after 24 hours of inactivity, whenever the client restarts, or if the underlying access key is deleted. A request on an expired session key returns 419.","title":"GET /session_key"},{"location":"developer_api.html#verify_access_key","text":"Check your access key is valid. Restricted access: YES. No permissions required. Required Headers: n/a Arguments: n/a Response: 401/403/419 and some error text if the provided access/session key is invalid, otherwise some JSON with basic permission info. Example response { \"basic_permissions\" : [ 0 , 1 , 3 ], \"human_description\" : \"API Permissions (autotagger): add tags to files, import files, search for files: Can search: only autotag this\" }","title":"GET /verify_access_key"},{"location":"developer_api.html#get_services","text":"Ask the client about its file and tag services. Restricted access: YES. At least one of Add Files, Add Tags, Manage Pages, or Search Files permission needed. Required Headers: n/a Arguments: n/a Response: Some JSON listing the client's file and tag services by name and 'service key'. Example response { \"local_tags\" : [ { \"name\" : \"my tags\" , \"service_key\" : \"6c6f63616c2074616773\" }, { \"name\" : \"filenames\" , \"service_key\" : \"231a2e992b67101318c410abb6e7d98b6e32050623f138ca93bd4ad2993de31b\" } ], \"tag_repositories\" : [ { \"name\" : \"PTR\" , \"service_key\" : \"ccb0cf2f9e92c2eb5bd40986f72a339ef9497014a5fb8ce4cea6d6c9837877d9\" } ], \"local_files\" : [ { \"name\" : \"my files\" , \"service_key\" : \"6c6f63616c2066696c6573\" } ], \"file_repositories\" : [], \"all_local_files\" : [ { \"name\" : \"all local files\" , \"service_key\" : \"616c6c206c6f63616c2066696c6573\" } ], \"all_known_files\" : [ { \"name\" : \"all known files\" , \"service_key\" : \"616c6c206b6e6f776e2066696c6573\" } ], \"all_known_tags\" : [ { \"name\" : \"all known tags\" , \"service_key\" : \"616c6c206b6e6f776e2074616773\" } ], \"trash\" : [ { \"name\" : \"trash\" , \"service_key\" : \"7472617368\" } ] } These services may be referred to in various metadata responses or required in request parameters (e.g. where to add tag mappings). Note that a user can rename their services. Much of this Client API uses this renameable 'service name' as service identifier, but I may start using service key, which is non-mutable ID specific to each client. The hardcoded services have shorter service key strings (it is usually just 'all known files' etc.. ASCII-converted to hex), but user-made stuff will have 64-character hex.","title":"GET /get_services"},{"location":"developer_api.html#adding_files","text":"","title":"Adding Files"},{"location":"developer_api.html#add_files_add_file","text":"Tell the client to import a file. Restricted access: YES. Import Files permission needed. Required Headers: Content-Type: application/json (if sending path), application/octet-stream (if sending file) Arguments (in JSON): path : (the path you want to import) Example request body { \"path\" : \"E:\\\\to_import\\\\ayanami.jpg\" } Arguments (as bytes): You can alternately just send the file's bytes as the POST body. Response: Some JSON with the import result. Please note that file imports for large files may take several seconds, and longer if the client is busy doing other db work, so make sure your request is willing to wait that long for the response. Example response { \"status\" : 1 , \"hash\" : \"29a15ad0c035c0a0e86e2591660207db64b10777ced76565a695102a481c3dd1\" , \"note\" : \"\" } status is: 1 - File was successfully imported 2 - File already in database 3 - File previously deleted 4 - File failed to import 7 - File vetoed A file 'veto' is caused by the file import options (which in this case is the 'quiet' set under the client's options->importing ) stopping the file due to its resolution or minimum file size rules, etc... 'hash' is the file's SHA256 hash in hexadecimal, and 'note' is some occasional additional human-readable text appropriate to the file status that you may recognise from hydrus's normal import workflow. For an import error, it will always be the full traceback.","title":"POST /add_files/add_file"},{"location":"developer_api.html#add_files_delete_files","text":"Tell the client to send files to the trash. Restricted access: YES. Import Files permission needed. Required Headers: Content-Type : application/json Arguments (in JSON): hash : (an SHA256 hash for a file in 64 characters of hexadecimal) hashes : (a list of SHA256 hashes) Example request body { \"hash\" : \"78f92ba4a786225ee2a1236efa6b7dc81dd729faf4af99f96f3e20bad6d8b538\" } Response: 200 and no content. You can use hash or hashes, whichever is more convenient. At the moment, this is only able to send files from 'my files' to the trash, and so it cannot perform physical deletes. There is no error if any files do not currently exist in 'my files'. In future, it will take some sort of file service parameter to do more.","title":"POST /add_files/delete_files"},{"location":"developer_api.html#add_files_undelete_files","text":"Tell the client to pull files back out of the trash. Restricted access: YES. Import Files permission needed. Required Headers: Content-Type : application/json Arguments (in JSON): hash : (an SHA256 hash for a file in 64 characters of hexadecimal) hashes : (a list of SHA256 hashes) Example request body { \"hash\" : \"78f92ba4a786225ee2a1236efa6b7dc81dd729faf4af99f96f3e20bad6d8b538\" } Response: 200 and no content. You can use hash or hashes, whichever is more convenient. This is just the reverse of a delete_files--removing files from trash and putting them back in 'my files'. There is no error if any files do not currently exist in 'trash'.","title":"POST /add_files/undelete_files"},{"location":"developer_api.html#add_files_archive_files","text":"Tell the client to archive inboxed files. Restricted access: YES. Import Files permission needed. Required Headers: Content-Type : application/json Arguments (in JSON): hash : (an SHA256 hash for a file in 64 characters of hexadecimal) hashes : (a list of SHA256 hashes) Example request body { \"hash\" : \"78f92ba4a786225ee2a1236efa6b7dc81dd729faf4af99f96f3e20bad6d8b538\" } Response: 200 and no content. You can use hash or hashes, whichever is more convenient. This puts files in the 'archive', taking them out of the inbox. It only has meaning for files currently in 'my files' or 'trash'. There is no error if any files do not currently exist or are already in the archive.","title":"POST /add_files/archive_files"},{"location":"developer_api.html#add_files_unarchive_files","text":"Tell the client re-inbox archived files. Restricted access: YES. Import Files permission needed. Required Headers: Content-Type : application/json Arguments (in JSON): hash : (an SHA256 hash for a file in 64 characters of hexadecimal) hashes : (a list of SHA256 hashes) Example request body { \"hash\" : \"78f92ba4a786225ee2a1236efa6b7dc81dd729faf4af99f96f3e20bad6d8b538\" } Response: 200 and no content. You can use hash or hashes, whichever is more convenient. This puts files back in the inbox, taking them out of the archive. It only has meaning for files currently in 'my files' or 'trash'. There is no error if any files do not currently exist or are already in the inbox.","title":"POST /add_files/unarchive_files"},{"location":"developer_api.html#adding_tags","text":"","title":"Adding Tags"},{"location":"developer_api.html#add_tags_clean_tags","text":"Ask the client about how it will see certain tags. Restricted access: YES. Add Tags permission needed. Required Headers: n/a Arguments (in percent-encoded JSON): tags : (a list of the tags you want cleaned) Example request: Given tags [ \" bikini \" , \"blue eyes\" , \" character : samus aran \" , \":)\" , \" \" , \"\" , \"10\" , \"11\" , \"9\" , \"system:wew\" , \"-flower\" ] : /add_tags/clean_tags?tags=%5B%22%20bikini%20%22%2C%20%22blue%20%20%20%20eyes%22%2C%20%22%20character%20%3A%20samus%20aran%20%22%2C%20%22%3A%29%22%2C%20%22%20%20%20%22%2C%20%22%22%2C%20%2210%22%2C%20%2211%22%2C%20%229%22%2C%20%22system%3Awew%22%2C%20%22-flower%22%5D Response: The tags cleaned according to hydrus rules. They will also be in hydrus human-friendly sorting order. Example response { \"tags\" : [ \"9\" , \"10\" , \"11\" , \"::)\" , \"bikini\" , \"blue eyes\" , \"character:samus aran\" , \"flower\" , \"wew\" ] } Mostly, hydrus simply trims excess whitespace, but the other examples are rare issues you might run into. 'system' is an invalid namespace, tags cannot be prefixed with hyphens, and any tag starting with ':' is secretly dealt with internally as \"[no namespace]:[colon-prefixed-subtag]\". Again, you probably won't run into these, but if you see a mismatch somewhere and want to figure it out, or just want to sort some numbered tags, you might like to try this.","title":"GET /add_tags/clean_tags"},{"location":"developer_api.html#add_tags_get_tag_services","text":"Deprecated This is becoming obsolete and will be removed! Use /get_services instead! Ask the client about its tag services. Restricted access: YES. Add Tags permission needed. Required Headers: n/a Arguments: n/a Response: Some JSON listing the client's 'local tags' and tag repository services by name. Example response { \"local_tags\" : [ \"my tags\" ], \"tag_repositories\" : [ \"public tag repository\" , \"mlp fanfic tagging server\" ] } Note A user can rename their services. Don't assume the client's local tags service will be \"my tags\".","title":"GET /add_tags/get_tag_services"},{"location":"developer_api.html#add_tags_add_tags","text":"Make changes to the tags that files have. Restricted access: YES. Add Tags permission needed. Required Headers: n/a Arguments (in JSON): hash : (selective A, an SHA256 hash for a file in 64 characters of hexadecimal) hashes : (selective A, a list of SHA256 hashes) service_names_to_tags : (selective B, an Object of service names to lists of tags to be 'added' to the files) service_keys_to_tags : (selective B, an Object of service keys to lists of tags to be 'added' to the files) service_names_to_actions_to_tags : (selective B, an Object of service names to content update actions to lists of tags) service_keys_to_actions_to_tags : (selective B, an Object of service keys to content update actions to lists of tags) You can use either 'hash' or 'hashes'. You can use either 'service_names_to...' or 'service_keys_to...', where names is simple and human-friendly \"my tags\" and similar (but may be renamed by a user), but keys is a little more complicated but accurate/unique. Since a client may have multiple tag services with non-default names and pseudo-random keys, if it is not your client you will need to check the /get_services call to get the names or keys, and you may need some selection UI on your end so the user can pick what to do if there are multiple choices. I encourage using keys if you can. Also, you can use either '...to_tags', which is simple and add-only, or '...to_actions_to_tags', which is more complicated and allows you to remove/petition or rescind pending content. The permitted 'actions' are: 0 - Add to a local tag service. 1 - Delete from a local tag service. 2 - Pend to a tag repository. 3 - Rescind a pend from a tag repository. 4 - Petition from a tag repository. (This is special) 5 - Rescind a petition from a tag repository. When you petition a tag from a repository, a 'reason' for the petition is typically needed. If you send a normal list of tags here, a default reason of \"Petitioned from API\" will be given. If you want to set your own reason, you can instead give a list of [ tag, reason ] pairs. Some example requests: Adding some tags to a file { \"hash\" : \"df2a7b286d21329fc496e3aa8b8a08b67bb1747ca32749acb3f5d544cbfc0f56\" , \"service_names_to_tags\" : { \"my tags\" : [ \"character:supergirl\" , \"rating:safe\" ] } } Adding more tags to two files { \"hashes\" : [ \"df2a7b286d21329fc496e3aa8b8a08b67bb1747ca32749acb3f5d544cbfc0f56\" , \"f2b022214e711e9a11e2fcec71bfd524f10f0be40c250737a7861a5ddd3faebf\" ], \"service_names_to_tags\" : { \"my tags\" : [ \"process this\" ], \"public tag repository\" : [ \"creator:dandon fuga\" ] } } A complicated transaction with all possible actions { \"hash\" : \"df2a7b286d21329fc496e3aa8b8a08b67bb1747ca32749acb3f5d544cbfc0f56\" , \"service_keys_to_actions_to_tags\" : { \"6c6f63616c2074616773\" : { \"0\" : [ \"character:supergirl\" , \"rating:safe\" ], \"1\" : [ \"character:superman\" ] }, \"aa0424b501237041dab0308c02c35454d377eebd74cfbc5b9d7b3e16cc2193e9\" : { \"2\" : [ \"character:supergirl\" , \"rating:safe\" ], \"3\" : [ \"filename:image.jpg\" ], \"4\" : [[ \"creator:danban faga\" , \"typo\" ], [ \"character:super_girl\" , \"underscore\" ]], \"5\" : [ \"skirt\" ] } } } This last example is far more complicated than you will usually see. Pend rescinds and petition rescinds are not common. Petitions are also quite rare, and gathering a good petition reason for each tag is often a pain. Note that the enumerated status keys in the service_names_to_actions_to_tags structure are strings, not ints (JSON does not support int keys for Objects). Response description: 200 and no content. Note Note also that hydrus tag actions are safely idempotent. You can pend a tag that is already pended and not worry about an error--it will be discarded. The same for other reasonable logical scenarios: deleting a tag that does not exist will silently make no change, pending a tag that is already 'current' will again be passed over. It is fine to just throw 'process this' tags at every file import you add and not have to worry about checking which files you already added it to.","title":"POST /add_tags/add_tags"},{"location":"developer_api.html#adding_urls","text":"","title":"Adding URLs"},{"location":"developer_api.html#add_urls_get_url_files","text":"Ask the client about an URL's files. Restricted access: YES. Import URLs permission needed. Required Headers: n/a Arguments: url : (the url you want to ask about) Example request: for URL http://safebooru.org/index.php?page=post&s=view&id=2753608 : /add_urls/get_url_files?url=http%3A%2F%2Fsafebooru.org%2Findex.php%3Fpage%3Dpost%26s%3Dview%26id%3D2753608 Response: Some JSON which files are known to be mapped to that URL. Note this needs a database hit, so it may be delayed if the client is otherwise busy. Don't rely on this to always be fast. Example response { \"normalised_url\" : \"https://safebooru.org/index.php?id=2753608&page=post&s=view\" , \"url_file_statuses\" : [ { \"status\" : 2 , \"hash\" : \"20e9002824e5e7ffc240b91b6e4a6af552b3143993c1778fd523c30d9fdde02c\" , \"note\" : \"url recognised: Imported at 2015/10/18 10:58:01, which was 3 years 4 months ago (before this check).\" } ] } The url_file_statuses is a list of zero-to-n JSON Objects, each representing a file match the client found in its database for the URL. Typically, it will be of length 0 (for as-yet-unvisited URLs or Gallery/Watchable URLs that are not attached to files) or 1, but sometimes multiple files are given the same URL (sometimes by mistaken misattribution, sometimes by design, such as pixiv manga pages). Handling n files per URL is a pain but an unavoidable issue you should account for. status is the same as for /add_files/add_file : 0 - File not in database, ready for import (you will only see this very rarely--usually in this case you will just get no matches) 2 - File already in database 3 - File previously deleted hash is the file's SHA256 hash in hexadecimal, and 'note' is some occasional additional human-readable text you may recognise from hydrus's normal import workflow.","title":"GET /add_urls/get_url_files"},{"location":"developer_api.html#add_urls_get_url_info","text":"Ask the client for information about a URL. Restricted access: YES. Import URLs permission needed. Required Headers: n/a Arguments: url : (the url you want to ask about) Example request: for URL https://8ch.net/tv/res/1846574.html : /add_urls/get_url_info?url=https%3A%2F%2F8ch.net%2Ftv%2Fres%2F1846574.html Response: Some JSON describing what the client thinks of the URL. Example response { \"normalised_url\" : \"https://8ch.net/tv/res/1846574.html\" , \"url_type\" : 4 , \"url_type_string\" : \"watchable url\" , \"match_name\" : \"8chan thread\" , \"can_parse\" : true } The url types are currently: 0 - Post URL 2 - File URL 3 - Gallery URL 4 - Watchable URL 5 - Unknown URL (i.e. no matching URL Class) 'Unknown' URLs are treated in the client as direct File URLs. Even though the 'File URL' type is available, most file urls do not have a URL Class, so they will appear as Unknown. Adding them to the client will pass them to the URL Downloader as a raw file for download and import.","title":"GET /add_urls/get_url_info"},{"location":"developer_api.html#add_urls_add_url","text":"Tell the client to 'import' a URL. This triggers the exact same routine as drag-and-dropping a text URL onto the main client window. Restricted access: YES. Import URLs permission needed. Add Tags needed to include tags. Required Headers: Content-Type : application/json Arguments (in JSON): url : (the url you want to add) destination_page_key : (optional page identifier for the page to receive the url) destination_page_name : (optional page name to receive the url) show_destination_page : (optional, defaulting to false, controls whether the UI will change pages on add) service_names_to_additional_tags : (optional, selective, tags to give to any files imported from this url) service_keys_to_additional_tags : (optional, selective, tags to give to any files imported from this url) filterable_tags : (optional tags to be filtered by any tag import options that applies to the URL) service_names_to_tags : (obsolete, legacy synonym for service_names_to_additional_tags) If you specify a destination_page_name and an appropriate importer page already exists with that name, that page will be used. Otherwise, a new page with that name will be recreated (and used by subsequent calls with that name). Make sure it that page name is unique (e.g. '/b/ threads', not 'watcher') in your client, or it may not be found. Alternately, destination_page_key defines exactly which page should be used. Bear in mind this page key is only valid to the current session (they are regenerated on client reset or session reload), so you must figure out which one you want using the /manage_pages/get_pages call. If the correct page_key is not found, or the page it corresponds to is of the incorrect type, the standard page selection/creation rules will apply. show_destination_page defaults to False to reduce flicker when adding many URLs to different pages quickly. If you turn it on, the client will behave like a URL drag and drop and select the final page the URL ends up on. service_names_to_additional_tags and service_keys_to_additional_tags use the same data structure as in /add_tags/add_tags--service ids to a list of tags to add. You will need 'add tags' permission or this will 403. These tags work exactly as 'additional' tags work in a tag import options . They are service specific, and always added unless some advanced tag import options checkbox (like 'only add tags to new files') is set. filterable_tags works like the tags parsed by a hydrus downloader. It is just a list of strings. They have no inherant service and will be sent to a tag import options , if one exists, to decide which tag services get what. This parameter is useful if you are pulling all a URL's tags outside of hydrus and want to have them processed like any other downloader, rather than figuring out service names and namespace filtering on your end. Note that in order for a tag import options to kick in, I think you will have to have a Post URL URL Class hydrus-side set up for the URL so some tag import options (whether that is Class-specific or just the default) can be loaded at import time. Example request body { \"url\" : \"https://8ch.net/tv/res/1846574.html\" , \"destination_page_name\" : \"kino zone\" , \"service_names_to_additional_tags\" : { \"my tags\" : [ \"as seen on /tv/\" ] } } Example request body { \"url\" : \"https://safebooru.org/index.php?page=post&s=view&id=3195917\" , \"filterable_tags\" : [ \"1girl\" , \"artist name\" , \"creator:azto dio\" , \"blonde hair\" , \"blue eyes\" , \"breasts\" , \"character name\" , \"commentary\" , \"english commentary\" , \"formal\" , \"full body\" , \"glasses\" , \"gloves\" , \"hair between eyes\" , \"high heels\" , \"highres\" , \"large breasts\" , \"long hair\" , \"long sleeves\" , \"looking at viewer\" , \"series:metroid\" , \"mole\" , \"mole under mouth\" , \"patreon username\" , \"ponytail\" , \"character:samus aran\" , \"solo\" , \"standing\" , \"suit\" , \"watermark\" ] } Response: Some JSON with info on the URL added. Example response { \"human_result_text\" : \"\\\"https://8ch.net/tv/res/1846574.html\\\" URL added successfully.\" , \"normalised_url\" : \"https://8ch.net/tv/res/1846574.html\" }","title":"POST /add_urls/add_url"},{"location":"developer_api.html#add_urls_associate_url","text":"Manage which URLs the client considers to be associated with which files. Restricted access: YES. Import URLs permission needed. Required Headers: Content-Type : application/json Arguments (in JSON): url_to_add : (an url you want to associate with the file(s)) urls_to_add : (a list of urls you want to associate with the file(s)) url_to_delete : (an url you want to disassociate from the file(s)) urls_to_delete : (a list of urls you want to disassociate from the file(s)) hash : (an SHA256 hash for a file in 64 characters of hexadecimal) hashes : (a list of SHA256 hashes) All of these are optional, but you obviously need to have at least one of url arguments and one of the hash arguments. The single/multiple arguments work the same--just use whatever is convenient for you. Unless you really know what you are doing with URL Classes, I strongly recommend you stick to associating URLs with just one single 'hash' at a time. Multiple hashes pointing to the same URL is unusual and frequently unhelpful. Example request body { \"url_to_add\" : \"https://rule34.xxx/index.php?id=2588418&page=post&s=view\" , \"hash\" : \"3b820114f658d768550e4e3d4f1dced3ff8db77443472b5ad93700647ad2d3ba\" } Response: 200 with no content. Like when adding tags, this is safely idempotent--do not worry about re-adding URLs associations that already exist or accidentally trying to delete ones that don't.","title":"POST /add_urls/associate_url"},{"location":"developer_api.html#managing_cookies_and_http_headers","text":"This refers to the cookies held in the client's session manager, which are sent with network requests to different domains.","title":"Managing Cookies and HTTP Headers"},{"location":"developer_api.html#manage_cookies_get_cookies","text":"Get the cookies for a particular domain. Restricted access: YES. Manage Cookies permission needed. Required Headers: n/a Arguments: domain Example request (for gelbooru.com) /manage_cookies/get_cookies?domain=gelbooru.com Response: A JSON Object listing all the cookies for that domain in [ name, value, domain, path, expires ] format. Example response { \"cookies\" : [ [ \"__cfduid\" , \"f1bef65041e54e93110a883360bc7e71\" , \".gelbooru.com\" , \"/\" , 1596223327 ], [ \"pass_hash\" , \"0b0833b797f108e340b315bc5463c324\" , \"gelbooru.com\" , \"/\" , 1585855361 ], [ \"user_id\" , \"123456\" , \"gelbooru.com\" , \"/\" , 1585855361 ] ] } Note that these variables are all strings except 'expires', which is either an integer timestamp or null for session cookies. This request will also return any cookies for subdomains. The session system in hydrus generally stores cookies according to the second-level domain, so if you request for specific.someoverbooru.net, you will still get the cookies for someoverbooru.net and all its subdomains.","title":"GET /manage_cookies/get_cookies"},{"location":"developer_api.html#manage_cookies_set_cookies","text":"Set some new cookies for the client. This makes it easier to 'copy' a login from a web browser or similar to hydrus if hydrus's login system can't handle the site yet. Restricted access: YES. Manage Cookies permission needed. Required Headers: Content-Type : application/json Arguments (in JSON): cookies : (a list of cookie rows in the same format as the GET request above) Example request body { \"cookies\" : [ [ \"PHPSESSID\" , \"07669eb2a1a6e840e498bb6e0799f3fb\" , \".somesite.com\" , \"/\" , 1627327719 ], [ \"tag_filter\" , \"1\" , \".somesite.com\" , \"/\" , 1627327719 ] ] } You can set 'value' to be null, which will clear any existing cookie with the corresponding name, domain, and path (acting essentially as a delete). Expires can be null, but session cookies will time-out in hydrus after 60 minutes of non-use.","title":"POST /manage_cookies/set_cookies"},{"location":"developer_api.html#manage_headers_set_user_agent","text":"This sets the 'Global' User-Agent for the client, as typically editable under network->data->manage http headers , for instance if you want hydrus to appear as a specific browser associated with some cookies. Restricted access: YES. Manage Cookies permission needed. Required Headers: * Content-Type : application/json Arguments (in JSON): user-agent : (a string) Example request body { \"user-agent\" : \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0\" } Send an empty string to reset the client back to the default User-Agent, which should be Mozilla/5.0 (compatible; Hydrus Client) .","title":"POST /manage_headers/set_user_agent"},{"location":"developer_api.html#managing_pages","text":"This refers to the pages of the main client UI.","title":"Managing Pages"},{"location":"developer_api.html#manage_pages_get_pages","text":"Get the page structure of the current UI session. Restricted access: YES. Manage Pages permission needed. Required Headers: n/a Arguments: n/a Response: A JSON Object of the top-level page 'notebook' (page of pages) detailing its basic information and current sub-pages. Page of pages beneath it will list their own sub-page lists. Example response { \"pages\" : { \"name\" : \"top pages notebook\" , \"page_key\" : \"3b28d8a59ec61834325eb6275d9df012860a1ecfd9e1246423059bc47fb6d5bd\" , \"page_type\" : 10 , \"selected\" : true , \"pages\" : [ { \"name\" : \"files\" , \"page_key\" : \"d436ff5109215199913705eb9a7669d8a6b67c52e41c3b42904db083255ca84d\" , \"page_type\" : 6 , \"selected\" : false }, { \"name\" : \"thread watcher\" , \"page_key\" : \"40887fa327edca01e1d69b533dddba4681b2c43e0b4ebee0576177852e8c32e7\" , \"page_type\" : 9 , \"selected\" : false }, { \"name\" : \"pages\" , \"page_key\" : \"2ee7fa4058e1e23f2bd9e915cdf9347ae90902a8622d6559ba019a83a785c4dc\" , \"page_type\" : 10 , \"selected\" : true , \"pages\" : [ { \"name\" : \"urls\" , \"page_key\" : \"9fe22cb760d9ee6de32575ed9f27b76b4c215179cf843d3f9044efeeca98411f\" , \"page_type\" : 7 , \"selected\" : true }, { \"name\" : \"files\" , \"page_key\" : \"2977d57fc9c588be783727bcd54225d577b44e8aa2f91e365a3eb3c3f580dc4e\" , \"page_type\" : 6 , \"selected\" : false } ] } ] } } The page types are as follows: 1 - Gallery downloader 2 - Simple downloader 3 - Hard drive import 5 - Petitions (used by repository janitors) 6 - File search 7 - URL downloader 8 - Duplicates 9 - Thread watcher 10 - Page of pages The top page of pages will always be there, and always selected. 'selected' means which page is currently in view and will propagate down other page of pages until it terminates. It may terminate in an empty page of pages, so do not assume it will end on a 'media' page. The 'page_key' is a unique identifier for the page. It will stay the same for a particular page throughout the session, but new ones are generated on a client restart or other session reload.","title":"GET /manage_pages/get_pages"},{"location":"developer_api.html#manage_pages_get_page_info","text":"Get information about a specific page. Under Construction This is under construction. The current call dumps a ton of info for different downloader pages. Please experiment in IRL situations and give feedback for now! I will flesh out this help with more enumeration info and examples as this gets nailed down. POST commands to alter pages (adding, removing, highlighting), will come later. Restricted access: YES. Manage Pages permission needed. Required Headers: n/a Arguments: page_key : (hexadecimal page_key as stated in /manage_pages/get_pages ) simple : true or false (optional, defaulting to true) Example request /manage_pages/get_page_info?page_key=aebbf4b594e6986bddf1eeb0b5846a1e6bc4e07088e517aff166f1aeb1c3c9da&simple=true Response description A JSON Object of the page's information. At present, this mostly means downloader information. Example response with simple = true { \"page_info\" : { \"name\" : \"threads\" , \"page_key\" : \"aebbf4b594e6986bddf1eeb0b5846a1e6bc4e07088e517aff166f1aeb1c3c9da\" , \"page_type\" : 3 , \"management\" : { \"multiple_watcher_import\" : { \"watcher_imports\" : [ { \"url\" : \"https://someimageboard.net/m/123456\" , \"watcher_key\" : \"cf8c3525c57a46b0e5c2625812964364a2e801f8c49841c216b8f8d7a4d06d85\" , \"created\" : 1566164269 , \"last_check_time\" : 1566164272 , \"next_check_time\" : 1566174272 , \"files_paused\" : false , \"checking_paused\" : false , \"checking_status\" : 0 , \"subject\" : \"gundam pictures\" , \"imports\" : { \"status\" : \"4 successful (2 already in db)\" , \"simple_status\" : \"4\" , \"total_processed\" : 4 , \"total_to_process\" : 4 }, \"gallery_log\" : { \"status\" : \"1 successful\" , \"simple_status\" : \"1\" , \"total_processed\" : 1 , \"total_to_process\" : 1 } }, { \"url\" : \"https://someimageboard.net/a/1234\" , \"watcher_key\" : \"6bc17555b76da5bde2dcceedc382cf7d23281aee6477c41b643cd144ec168510\" , \"created\" : 1566063125 , \"last_check_time\" : 1566063133 , \"next_check_time\" : 1566104272 , \"files_paused\" : false , \"checking_paused\" : true , \"checking_status\" : 1 , \"subject\" : \"anime pictures\" , \"imports\" : { \"status\" : \"124 successful (22 already in db), 2 previously deleted\" , \"simple_status\" : \"124\" , \"total_processed\" : 124 , \"total_to_process\" : 124 }, \"gallery_log\" : { \"status\" : \"3 successful\" , \"simple_status\" : \"3\" , \"total_processed\" : 3 , \"total_to_process\" : 3 } } ] }, \"highlight\" : \"cf8c3525c57a46b0e5c2625812964364a2e801f8c49841c216b8f8d7a4d06d85\" } }, \"media\" : { \"num_files\" : 4 } } As you can see, even the 'simple' mode can get very large. Imagine that response for a page watching 100 threads! Turning simple mode off will display every import item, gallery log entry, and all hashes in the media (thumbnail) panel. For this first version, the five importer pages--hdd import, simple downloader, url downloader, gallery page, and watcher page--all give rich info based on their specific variables. The first three only have one importer/gallery log combo, but the latter two of course can have multiple. The \"imports\" and \"gallery_log\" entries are all in the same data format.","title":"GET /manage_pages/get_page_info"},{"location":"developer_api.html#manage_pages_add_files","text":"Add files to a page. Restricted access: YES. Manage Pages permission needed. Required Headers: Content-Type : application/json Arguments (in JSON): page_key : (the page key for the page you wish to add files to) file_ids : (selective, a list of numerical file ids) hashes : (selective, a list of hexadecimal SHA256 hashes) You need to use either file_ids or hashes. The files they refer to will be appended to the given page, just like a thumbnail drag and drop operation. The page key is the same as fetched in the /manage_pages/get_pages call. Example request body { \"page_key\" : \"af98318b6eece15fef3cf0378385ce759bfe056916f6e12157cd928eb56c1f18\" , \"file_ids\" : [ 123 , 124 , 125 ] } Response: 200 with no content. If the page key is not found, this will 404.","title":"POST /manage_pages/add_files"},{"location":"developer_api.html#manage_pages_focus_page","text":"'Show' a page in the main GUI, making it the current page in view. If it is already the current page, no change is made. Restricted access: YES. Manage Pages permission needed. Required Headers: Content-Type : application/json Arguments (in JSON): page_key : (the page key for the page you wish to show) The page key is the same as fetched in the /manage_pages/get_pages call. Example request body { \"page_key\" : \"af98318b6eece15fef3cf0378385ce759bfe056916f6e12157cd928eb56c1f18\" } Response: 200 with no content. If the page key is not found, this will 404.","title":"POST /manage_pages/focus_page"},{"location":"developer_api.html#searching_files","text":"File search in hydrus is not paginated like a booru--all searches return all results in one go. In order to keep this fast, search is split into two steps--fetching file identifiers with a search, and then fetching file metadata in batches. You may have noticed that the client itself performs searches like this--thinking a bit about a search and then bundling results in batches of 256 files before eventually throwing all the thumbnails on screen.","title":"Searching Files"},{"location":"developer_api.html#get_files_search_files","text":"Search for the client's files. Restricted access: YES. Search for Files permission needed. Additional search permission limits may apply. Required Headers: n/a Arguments (in percent-encoded JSON): tags : (a list of tags you wish to search for) file_service_name : (optional, selective, string, the file domain on which to search) file_service_key : (optional, selective, hexadecimal, the file domain on which to search) tag_service_name : (optional, selective, string, the tag domain on which to search) tag_service_key : (optional, selective, hexadecimal, the tag domain on which to search) file_sort_type : (optional, integer, the results sort method) file_sort_asc : true or false (optional, the results sort order) return_hashes : true or false (optional, default false, returns hex hashes instead of file ids) system_inbox : true or false (obsolete, use tags) system_archive : true or false (obsolete, use tags) Example request for 16 files (system:limit=16) in the inbox with tags \"blue eyes\", \"blonde hair\", and \"\u043a\u0438\u043d\u043e\" /get_files/search_files?tags=%5B%22blue%20eyes%22%2C%20%22blonde%20hair%22%2C%20%22%5Cu043a%5Cu0438%5Cu043d%5Cu043e%22%2C%20%22system%3Ainbox%22%2C%20%22system%3Alimit%3D16%22%5D If the access key's permissions only permit search for certain tags, at least one positive whitelisted/non-blacklisted tag must be in the \"tags\" list or this will 403. Tags can be prepended with a hyphen to make a negated tag (e.g. \"-green eyes\"), but these will not be checked against the permissions whitelist. Wildcards and namespace searches are supported, so if you search for 'character:sam*' or 'series:*', this will be handled correctly clientside. Many system predicates are also supported using a text parser! The parser was designed by a clever user for human input and allows for a certain amount of error (e.g. ~= instead of \u2248, or \"isn't\" instead of \"is not\") or requires more information (e.g. the specific hashes for a hash lookup). Here's a big list of current formats supported: System Predicates system:everything system:inbox system:archive system:has duration system:no duration system:is the best quality file of its duplicate group system:is not the best quality file of its duplicate group system:has audio system:no audio system:has icc profile system:no icc profile system:has tags system:no tags system:untagged system:number of tags > 5 system:number of tags ~= 10 system:number of tags > 0 system:number of words < 2 system:height = 600 system:height > 900 system:width < 200 system:width > 1000 system:filesize ~= 50 kilobytes system:filesize > 10megabytes system:filesize < 1 GB system:filesize > 0 B system:similar to abcdef01 abcdef02 abcdef03, abcdef04 with distance 3 system:similar to abcdef distance 5 system:limit = 100 system:filetype = image/jpg, image/png, apng system:hash = abcdef01 abcdef02 abcdef03 (this does sha256) system:hash = abcdef01 abcdef02 md5 system:modified date < 7 years 45 days 7h system:modified date > 2011-06-04 system:date modified > 7 years 2 months system:date modified < 0 years 1 month 1 day 1 hour system:time imported < 7 years 45 days 7h system:time imported > 2011-06-04 system:time imported > 7 years 2 months system:time imported < 0 years 1 month 1 day 1 hour system:time imported ~= 2011-1-3 system:time imported ~= 1996-05-2 system:duration < 5 seconds system:duration ~= 600 msecs system:duration > 3 milliseconds system:file service is pending to my files system:file service currently in my files system:file service is not currently in my files system:file service is not pending to my files system:num file relationships < 3 alternates system:number of file relationships > 3 false positives system:ratio is wider than 16:9 system:ratio is 16:9 system:ratio taller than 1:1 system:num pixels > 50 px system:num pixels < 1 megapixels system:num pixels ~= 5 kilopixel system:media views ~= 10 system:all views > 0 system:preview views < 10 system:media viewtime < 1 days 1 hour 0 minutes system:all viewtime > 1 hours 100 seconds system:preview viewtime ~= 1 day 30 hours 100 minutes 90s system:has url matching regex index\\.php system:does not have a url matching regex index\\.php system:has url https://safebooru.donmai.us/posts/4695284 system:does not have url https://safebooru.donmai.us/posts/4695284 system:has domain safebooru.com system:does not have domain safebooru.com system:has a url with class safebooru file page system:does not have a url with url class safebooru file page system:tag as number page < 5 More system predicate types and input formats will be available in future. Please test out the system predicates you want to send. Reverse engineering system predicate data from text is obviously tricky. If a system predicate does not parse, you'll get 400. Also, OR predicates are now supported! Just nest within the tag list, and it'll be treated like an OR. For instance: [ \"skirt\" , [ \"samus aran\" , \"lara croft\" ], \"system:height > 1000\" ] Makes: skirt samus aran OR lara croft system:height > 1000 The file and tag services are for search domain selection, just like clicking the buttons in the client. They are optional--default is 'my files' and 'all known tags', and you can use either key or name as in GET /get_services , whichever is easiest for your situation. file_sort_asc is 'true' for ascending, and 'false' for descending. The default is descending. file_sort_type is by default import time . It is an integer according to the following enum, and I have written the semantic (asc/desc) meaning for each type after: 0 - file size (smallest first/largest first) 1 - duration (shortest first/longest first) 2 - import time (oldest first/newest first) 3 - filetype (N/A) 4 - random (N/A) 5 - width (slimmest first/widest first) 6 - height (shortest first/tallest first) 7 - ratio (tallest first/widest first) 8 - number of pixels (ascending/descending) 9 - number of tags (on the current tag domain) (ascending/descending) 10 - number of media views (ascending/descending) 11 - total media viewtime (ascending/descending) 12 - approximate bitrate (smallest first/largest first) 13 - has audio (audio first/silent first) 14 - modified time (oldest first/newest first) 15 - framerate (slowest first/fastest first) 16 - number of frames (smallest first/largest first) 18 - last viewed time (oldest first/newest first) Response: The full list of numerical file ids that match the search. Example response { \"file_ids\" : [ 125462 , 4852415 , 123 , 591415 ] } Example response with return_hashes=true { \"hashes\" : [ \"1b04c4df7accd5a61c5d02b36658295686b0abfebdc863110e7d7249bba3f9ad\" , \"fe416723c731d679aa4d20e9fd36727f4a38cd0ac6d035431f0f452fad54563f\" , \"b53505929c502848375fbc4dab2f40ad4ae649d34ef72802319a348f81b52bad\" ] } File ids are internal and specific to an individual client. For a client, a file with hash H always has the same file id N, but two clients will have different ideas about which N goes with which H. They are a bit faster than hashes to retrieve and search with en masse , which is why they are exposed here. This search does not apply the implicit limit that most clients set to all searches (usually 10,000), so if you do system:everything on a client with millions of files, expect to get boshed. Even with a system:limit included, complicated queries with large result sets may take several seconds to respond. Just like the client itself.","title":"GET /get_files/search_files"},{"location":"developer_api.html#get_files_file_metadata","text":"Get metadata about files in the client. Restricted access: YES. Search for Files permission needed. Additional search permission limits may apply. Required Headers: n/a Arguments (in percent-encoded JSON): file_ids : (selective, a list of numerical file ids) hashes : (selective, a list of hexadecimal SHA256 hashes) only_return_identifiers : true or false (optional, defaulting to false) detailed_url_information : true or false (optional, defaulting to false) hide_service_names_tags : true or false (optional, defaulting to false) You need one of file_ids or hashes. If your access key is restricted by tag, you cannot search by hashes, and the file_ids you search for must have been in the most recent search result . Example request for two files with ids 123 and 4567 /get_files/file_metadata?file_ids=%5B123%2C%204567%5D The same, but only wants hashes back /get_files/file_metadata?file_ids=%5B123%2C%204567%5D&only_return_identifiers=true And one that fetches two hashes /get_files/file_metadata?hashes=%5B%224c77267f93415de0bc33b7725b8c331a809a924084bee03ab2f5fae1c6019eb2%22%2C%20%223e7cb9044fe81bda0d7a84b5cb781cba4e255e4871cba6ae8ecd8207850d5b82%22%5D This request string can obviously get pretty ridiculously long. It also takes a bit of time to fetch metadata from the database. In its normal searches, the client usually fetches file metadata in batches of 256. Response: A list of JSON Objects that store a variety of file metadata. Example response { \"metadata\" : [ { \"file_id\" : 123 , \"hash\" : \"4c77267f93415de0bc33b7725b8c331a809a924084bee03ab2f5fae1c6019eb2\" , \"size\" : 63405 , \"mime\" : \"image/jpg\" , \"ext\" : \".jpg\" , \"width\" : 640 , \"height\" : 480 , \"duration\" : null , \"time_modified\" : null , \"file_services\" : { \"current\" : {}, \"deleted\" : {} }, \"has_audio\" : false , \"num_frames\" : null , \"num_words\" : null , \"is_inbox\" : true , \"is_local\" : true , \"is_trashed\" : false , \"known_urls\" : [], \"service_names_to_statuses_to_tags\" : {}, \"service_keys_to_statuses_to_tags\" : {}, \"service_names_to_statuses_to_display_tags\" : {}, \"service_keys_to_statuses_to_display_tags\" : {} }, { \"file_id\" : 4567 , \"hash\" : \"3e7cb9044fe81bda0d7a84b5cb781cba4e255e4871cba6ae8ecd8207850d5b82\" , \"size\" : 199713 , \"mime\" : \"video/webm\" , \"ext\" : \".webm\" , \"width\" : 1920 , \"height\" : 1080 , \"duration\" : 4040 , \"time_modified\" : 1624055647 , \"file_services\" : { \"current\" : { \"616c6c206c6f63616c2066696c6573\" : { \"time_imported\" : 1641044491 } }, \"deleted\" : { \"6c6f63616c2066696c6573\" : { \"time_deleted\" : 1641204274 , \"time_imported\" : 1641044491 } } }, \"has_audio\" : true , \"num_frames\" : 102 , \"num_words\" : null , \"is_inbox\" : false , \"is_local\" : true , \"is_trashed\" : false , \"known_urls\" : [ \"https://gelbooru.com/index.php?page=post&s=view&id=4841557\" , \"https://img2.gelbooru.com//images/80/c8/80c8646b4a49395fb36c805f316c49a9.jpg\" , \"http://origin-orig.deviantart.net/ed31/f/2019/210/7/8/beachqueen_samus_by_dandonfuga-ddcu1xg.jpg\" ], \"service_names_to_statuses_to_tags\" : { \"my tags\" : { \"0\" : [ \"favourites\" ], \"2\" : [ \"process this later\" ] }, \"my tag repository\" : { \"0\" : [ \"blonde_hair\" , \"blue_eyes\" , \"looking_at_viewer\" ], \"1\" : [ \"bodysuit\" ] } }, \"service_keys_to_statuses_to_tags\" : { \"6c6f63616c2074616773\" : { \"0\" : [ \"favourites\" ], \"2\" : [ \"process this later\" ] }, \"37e3849bda234f53b0e9792a036d14d4f3a9a136d1cb939705dbcd5287941db4\" : { \"0\" : [ \"blonde_hair\" , \"blue_eyes\" , \"looking_at_viewer\" ], \"1\" : [ \"bodysuit\" ] } }, \"service_names_to_statuses_to_display_tags\" : { \"my tags\" : { \"0\" : [ \"favourites\" ], \"2\" : [ \"process this later\" , \"processing\" ] }, \"my tag repository\" : { \"0\" : [ \"blonde hair\" , \"blue eyes\" , \"looking at viewer\" ], \"1\" : [ \"bodysuit\" , \"clothing\" ] } }, \"service_keys_to_statuses_to_display_tags\" : { \"6c6f63616c2074616773\" : { \"0\" : [ \"favourites\" ], \"2\" : [ \"process this later\" , \"processing\" ] }, \"37e3849bda234f53b0e9792a036d14d4f3a9a136d1cb939705dbcd5287941db4\" : { \"0\" : [ \"blonde hair\" , \"blue eyes\" , \"looking at viewer\" ], \"1\" : [ \"bodysuit\" , \"clothing\" ] } } } ] } And one where only_return_identifiers is true { \"metadata\" : [ { \"file_id\" : 123 , \"hash\" : \"4c77267f93415de0bc33b7725b8c331a809a924084bee03ab2f5fae1c6019eb2\" }, { \"file_id\" : 4567 , \"hash\" : \"3e7cb9044fe81bda0d7a84b5cb781cba4e255e4871cba6ae8ecd8207850d5b82\" } ] } Size is in bytes. Duration is in milliseconds, and may be an int or a float. file_services stores which file services the file is current ly in and deleted from. The entries are by the service key, same as for tags later on. In rare cases, the timestamps may be null , if they are unknown (e.g. a time_deleted for the file deleted before this information was tracked). The time_modified can also be null. Time modified is just the filesystem modified time for now, but it will evolve into more complicated storage in future with multiple locations (website post times) that'll be aggregated to a sensible value in UI. The service_names_to_statuses_to_tags and service_keys_to_statuses_to_tags structures are similar to the /add_tags/add_tags scheme, excepting that the status numbers are: 0 - current 1 - pending 2 - deleted 3 - petitioned The tag structure is duplicated for both name and key . The use of name is an increasingly legacy issue--a hack when the Client API was young--and 'service_names_to...' lookups are likely to be deleted in future in favour of service_key . I recommend you move to service key when you can. To learn more about service names and keys on a client, use the /get_services call (and cache the response--it doesn't change much!). Note Since JSON Object keys must be strings, these status numbers are strings, not ints. While service_XXX_to_statuses_to_tags represent the actual tags stored on the database for a file, the service_XXX_to_statuses_to_ display _tags structures reflect how tags appear in the UI, after siblings are collapsed and parents are added. If you want to edit a file's tags, start with service_keys_to_statuses_to_tags . If you want to render to the user, use service_keys_to_statuses_to_displayed_tags . If you add hide_service_names_tags=true , the service_names_to_statuses_to_tags and service_names_to_statuses_to_display_tags Objects will not be included. Use this to save data/CPU on large queries. If you add detailed_url_information=true , a new entry, detailed_known_urls , will be added for each file, with a list of the same structure as / add_urls/get_url_info . This may be an expensive request if you are querying thousands of files at once. For example \"detailed_known_urls\" : [ { \"normalised_url\" : \"https://gelbooru.com/index.php?id=4841557&page=post&s=view\" , \"url_type\" : 0 , \"url_type_string\" : \"post url\" , \"match_name\" : \"gelbooru file page\" , \"can_parse\" : true }, { \"normalised_url\" : \"https://img2.gelbooru.com//images/80/c8/80c8646b4a49395fb36c805f316c49a9.jpg\" , \"url_type\" : 5 , \"url_type_string\" : \"unknown url\" , \"match_name\" : \"unknown url\" , \"can_parse\" : false } ]","title":"GET /get_files/file_metadata"},{"location":"developer_api.html#get_files_file","text":"Get a file. Restricted access: YES. Search for Files permission needed. Additional search permission limits may apply. Required Headers: n/a Arguments : file_id : (numerical file id for the file) hash : (a hexadecimal SHA256 hash for the file) Only use one. As with metadata fetching, you may only use the hash argument if you have access to all files. If you are tag-restricted, you will have to use a file_id in the last search you ran. Example request /get_files/file?file_id=452158 Example request /get_files/file?hash=7f30c113810985b69014957c93bc25e8eb4cf3355dae36d8b9d011d8b0cf623a Response: The file itself. You should get the correct mime type as the Content-Type header.","title":"GET /get_files/file"},{"location":"developer_api.html#get_files_thumbnail","text":"Get a file's thumbnail. Restricted access: YES. Search for Files permission needed. Additional search permission limits may apply. Required Headers: n/a Arguments: file_id : (numerical file id for the file) hash : (a hexadecimal SHA256 hash for the file) Only use one. As with metadata fetching, you may only use the hash argument if you have access to all files. If you are tag-restricted, you will have to use a file_id in the last search you ran. Example request /get_files/thumbnail?file_id=452158 Example request /get_files/thumbnail?hash=7f30c113810985b69014957c93bc25e8eb4cf3355dae36d8b9d011d8b0cf623a Response: The thumbnail for the file. It will give application/octet-stream as the mime type. Some hydrus thumbs are jpegs, some are pngs.","title":"GET /get_files/thumbnail"},{"location":"developer_api.html#managing_the_database","text":"","title":"Managing the Database"},{"location":"developer_api.html#manage_database_lock_on","text":"Pause the client's database activity and disconnect the current connection. Restricted access: YES. Manage Database permission needed. Arguments: None This is a hacky prototype. It commands the client database to pause its job queue and release its connection (and related file locks and journal files). This puts the client in a similar position as a long VACUUM command--it'll hang in there, but not much will work, and since the UI async code isn't great yet, the UI may lock up after a minute or two. If you would like to automate database backup without shutting the client down, this is the thing to play with. This should return pretty quick, but it will wait up to five seconds for the database to actually disconnect. If there is a big job (like a VACUUM) current going on, it may take substantially longer to finish that up and process this STOP command. You might like to check for the existence of a journal file in the db dir just to be safe. As long as this lock is on, all Client API calls except the unlock command will return 503. (This is a decent way to test the current lock status, too)","title":"POST /manage_database/lock_on"},{"location":"developer_api.html#manage_database_lock_off","text":"Reconnect the client's database and resume activity. Restricted access: YES. Manage Database permission needed. Arguments: None This is the obvious complement to the lock. The client will resume processing its job queue and will catch up. If the UI was frozen, it should free up in a few seconds, just like after a big VACUUM.","title":"POST /manage_database/lock_off"},{"location":"developer_api.html#manage_database_mr_bones","text":"Get the data from help->how boned am I?. This is a simple Object of numbers just for hacky advanced purposes if you want to build up some stats in the background. The numbers are the same as the dialog shows, so double check that to confirm what means what. Restricted access: YES. Manage Database permission needed. Arguments: None Example response { \"boned_stats\" : { \"num_inbox\" : 8356 , \"num_archive\" : 229 , \"num_deleted\" : 7010 , \"size_inbox\" : 7052596762 , \"size_archive\" : 262911007 , \"size_deleted\" : 13742290193 , \"earliest_import_time\" : 1451408539 , \"total_viewtime\" : [ 3280 , 41621 , 2932 , 83021 ], \"total_alternate_files\" : 265 , \"total_duplicate_files\" : 125 , \"total_potential_pairs\" : 3252 } }","title":"GET /manage_database/mr_bones"},{"location":"docker.html","text":"Hydrus in a container(HiC) \u00b6 Latest hydrus client that runs in docker 24/7. Employs xvfb and vnc. Runs on alpine. TL;DR: docker run --name hydrusclient -d -p 5800:5800 -p 5900:5900 ghcr.io/hydrusnetwork/hydrus:latest . Connect to noVNC via http://yourdockerhost:5800/vnc.html or use Tiger VNC Viewer or any other VNC client and connect on port 5900 . For persistent storage you can either create a named volume or mount a new/existing db path -v /hydrus/client/db:/opt/hydrus/db . The client runs with default permissions of 1000:1000 , this can be changed by the ENV UID and GID (not working atm, fixed to 1000) will be fixed someday\u2122. The container will NOT fix the permissions inside the db folder. CHOWN YOUR DB FOLDER CONTENT ON YOUR OWN \u00b6 If you have enough RAM, mount /tmp as tmpfs. If not, download more RAM. As of v359 hydrus understands IPFS nocopy . And can be easily run with go-ipfs container. Read Hydrus IPFS help . Mount HOST_PATH_DB/client_files to /data/client_files in ipfs. Go manage the ipfs service and set the path to /data/client_files , you'll know where to put it in. Example compose file: version : '3.8' volumes : tor-config : driver : local hybooru-pg-data : driver : local hydrus-server : driver : local hydrus-client : driver : local ipfs-data : driver : local hydownloader-data : driver : local services : hydrusclient : image : ghcr.io/hydrusnetwork/hydrus:latest container_name : hydrusclient restart : unless-stopped environment : - UID=1000 - GID=1000 volumes : - hydrus-client:/opt/hydrus/db tmpfs : - /tmp #optional for SPEEEEEEEEEEEEEEEEEEEEEEEEED and less disk access ports : - 5800:5800 #noVNC - 5900:5900 #VNC - 45868:45868 #Booru - 45869:45869 #API hydrusserver : image : ghcr.io/hydrusnetwork/hydrus:server container_name : hydrusserver restart : unless-stopped volumes : - hydrus-server:/opt/hydrus/db hydrusclient-ipfs : image : ipfs/go-ipfs container_name : hydrusclient-ipfs restart : unless-stopped volumes : - ipfs-data:/data/ipfs - hydrus-clients:/data/db:ro ports : - 4001:4001 # READ - 5001:5001 # THE - 8080:8080 # IPFS - 8081:8081 # DOCS hydrus-web : image : floogulinc/hydrus-web container_name : hydrus-web restart : always ports : - 8080:80 # READ hybooru-pg : image : healthcheck/postgres container_name : hybooru-pg environment : - POSTGRES_USER=hybooru - POSTGRES_PASSWORD=hybooru - POSTGRES_DB=hybooru volumes : - hybooru-pg-data:/var/lib/postgresql/data restart : unless-stopped hybooru : image : suika/hybooru:latest # https://github.com/funmaker/hybooru build it yourself container_name : hybooru restart : unless-stopped depends_on : hybooru-pg : condition : service_started ports : - 8081:80 # READ volumes : - hydrus-client:/opt/hydrus/db hydownloader : image : ghcr.io/thatfuckingbird/hydownloader:edge container_name : hydownloader restart : unless-stopped ports : - 53211:53211 volumes : - hydownloader-data:/db - hydrus-client:/hydb tor-socks-proxy : #network_mode: \"container:myvpn_container\" # in case you have a vpn container container_name : tor-socks-proxy image : peterdavehello/tor-socks-proxy:latest restart : unless-stopped tor-hydrus : image : goldy/tor-hidden-service container_name : tor-hydrus depends_on : hydrusclient : condition : service_healthy hydrusserver : condition : service_healthy hybooru : condition : service_started environment : HYBOORU_TOR_SERVICE_HOSTS : '80:hybooru:80' HYBOORU_TOR_SERVICE_VERSION : '3' HYSERV_TOR_SERVICE_HOSTS : 45870:hydrusserver:45870,45871:hydrusserver:45871 HYSERV_TOR_SERVICE_VERSION : '3' HYCLNT_TOR_SERVICE_HOSTS : 45868:hydrusclient:45868,45869:hydrusclient:45869 HYCLNT_TOR_SERVICE_VERSION : '3' volumes : - tor-config:/var/lib/tor/hidden_service Further containerized application of interest: Hybooru : Hydrus -based booru-styled imageboard in React, inspired by hyve . hydownloader : Alternative way of downloading and importing files. Decoupled from hydrus logic and limitations. Building \u00b6 # Alpine (client) cd hydrus/ docker build -t ghcr.io/hydrusnetwork/hydrus:latest -f static/build_files/docker/client/Dockerfile .","title":"Docker"},{"location":"docker.html#hydrus_in_a_containerhic","text":"Latest hydrus client that runs in docker 24/7. Employs xvfb and vnc. Runs on alpine. TL;DR: docker run --name hydrusclient -d -p 5800:5800 -p 5900:5900 ghcr.io/hydrusnetwork/hydrus:latest . Connect to noVNC via http://yourdockerhost:5800/vnc.html or use Tiger VNC Viewer or any other VNC client and connect on port 5900 . For persistent storage you can either create a named volume or mount a new/existing db path -v /hydrus/client/db:/opt/hydrus/db . The client runs with default permissions of 1000:1000 , this can be changed by the ENV UID and GID (not working atm, fixed to 1000) will be fixed someday\u2122.","title":"Hydrus in a container(HiC)"},{"location":"docker.html#the_container_will_not_fix_the_permissions_inside_the_db_folder_chown_your_db_folder_content_on_your_own","text":"If you have enough RAM, mount /tmp as tmpfs. If not, download more RAM. As of v359 hydrus understands IPFS nocopy . And can be easily run with go-ipfs container. Read Hydrus IPFS help . Mount HOST_PATH_DB/client_files to /data/client_files in ipfs. Go manage the ipfs service and set the path to /data/client_files , you'll know where to put it in. Example compose file: version : '3.8' volumes : tor-config : driver : local hybooru-pg-data : driver : local hydrus-server : driver : local hydrus-client : driver : local ipfs-data : driver : local hydownloader-data : driver : local services : hydrusclient : image : ghcr.io/hydrusnetwork/hydrus:latest container_name : hydrusclient restart : unless-stopped environment : - UID=1000 - GID=1000 volumes : - hydrus-client:/opt/hydrus/db tmpfs : - /tmp #optional for SPEEEEEEEEEEEEEEEEEEEEEEEEED and less disk access ports : - 5800:5800 #noVNC - 5900:5900 #VNC - 45868:45868 #Booru - 45869:45869 #API hydrusserver : image : ghcr.io/hydrusnetwork/hydrus:server container_name : hydrusserver restart : unless-stopped volumes : - hydrus-server:/opt/hydrus/db hydrusclient-ipfs : image : ipfs/go-ipfs container_name : hydrusclient-ipfs restart : unless-stopped volumes : - ipfs-data:/data/ipfs - hydrus-clients:/data/db:ro ports : - 4001:4001 # READ - 5001:5001 # THE - 8080:8080 # IPFS - 8081:8081 # DOCS hydrus-web : image : floogulinc/hydrus-web container_name : hydrus-web restart : always ports : - 8080:80 # READ hybooru-pg : image : healthcheck/postgres container_name : hybooru-pg environment : - POSTGRES_USER=hybooru - POSTGRES_PASSWORD=hybooru - POSTGRES_DB=hybooru volumes : - hybooru-pg-data:/var/lib/postgresql/data restart : unless-stopped hybooru : image : suika/hybooru:latest # https://github.com/funmaker/hybooru build it yourself container_name : hybooru restart : unless-stopped depends_on : hybooru-pg : condition : service_started ports : - 8081:80 # READ volumes : - hydrus-client:/opt/hydrus/db hydownloader : image : ghcr.io/thatfuckingbird/hydownloader:edge container_name : hydownloader restart : unless-stopped ports : - 53211:53211 volumes : - hydownloader-data:/db - hydrus-client:/hydb tor-socks-proxy : #network_mode: \"container:myvpn_container\" # in case you have a vpn container container_name : tor-socks-proxy image : peterdavehello/tor-socks-proxy:latest restart : unless-stopped tor-hydrus : image : goldy/tor-hidden-service container_name : tor-hydrus depends_on : hydrusclient : condition : service_healthy hydrusserver : condition : service_healthy hybooru : condition : service_started environment : HYBOORU_TOR_SERVICE_HOSTS : '80:hybooru:80' HYBOORU_TOR_SERVICE_VERSION : '3' HYSERV_TOR_SERVICE_HOSTS : 45870:hydrusserver:45870,45871:hydrusserver:45871 HYSERV_TOR_SERVICE_VERSION : '3' HYCLNT_TOR_SERVICE_HOSTS : 45868:hydrusclient:45868,45869:hydrusclient:45869 HYCLNT_TOR_SERVICE_VERSION : '3' volumes : - tor-config:/var/lib/tor/hidden_service Further containerized application of interest: Hybooru : Hydrus -based booru-styled imageboard in React, inspired by hyve . hydownloader : Alternative way of downloading and importing files. Decoupled from hydrus logic and limitations.","title":"The container will NOT fix the permissions inside the db folder. CHOWN YOUR DB FOLDER CONTENT ON YOUR OWN"},{"location":"docker.html#building","text":"# Alpine (client) cd hydrus/ docker build -t ghcr.io/hydrusnetwork/hydrus:latest -f static/build_files/docker/client/Dockerfile .","title":"Building"},{"location":"downloader_completion.html","text":"Now you know what GUGs, URL Classes, and Parsers are, you should have some ideas of how URL Classes could steer what happens when the downloader is faced with an URL to process. Should a URL be imported as a media file, or should it be parsed? If so, how? You may have noticed in the Edit GUG ui that it lists if a current URL Class matches the example URL output. If the GUG has no matching URL Class, it won't be listed in the main 'gallery selector' button's list--it'll be relegated to the 'non-functioning' page. Without a URL Class, the client doesn't know what to do with the output of that GUG. But if a URL Class does match, we can then hand the result over to a parser set at network->downloader definitions->manage url class links : Here you simply set which parsers go with which URL Classes. If you have URL Classes that do not have a parser linked (which is the default for new URL Classes), you can use the 'try to fill in gaps...' button to automatically fill the gaps based on guesses using the parsers' example URLs. This is usually the best way to line things up unless you have multiple potential parsers for that URL Class, in which case it'll usually go by the parser name earliest in the alphabet. If the URL Class has no parser set or the parser is broken or otherwise invalid, the respective URL's file import object in the downloader or subscription is going to throw some kind of error when it runs. If you make and share some parsers, the first indication that something is wrong is going to be several users saying 'I got this error: ( copy notes from file import status window)'. You can then load the parser back up in manage parsers and try to figure out what changed and roll out an update. manage url class links also shows 'api link review', which summarises which URL Classes api-link to others. In these cases, only the api URL gets a parser entry in the first 'parser links' window, since the first will never be fetched for parsing (in the downloader, it will always be converted to the API URL, and that is fetched and parsed). Once your GUG has a URL Class and your URL Classes have parsers linked, test your downloader! Note that Hydrus's URL drag-and-drop import uses URL Classes, so if you don't have the GUG and gallery stuff done but you have a Post URL set up, you can test that just by dragging a Post URL from your browser to the client, and it should be added to a new URL Downloader and just work. It feels pretty good once it does!","title":"Putting it All Together"},{"location":"downloader_gugs.html","text":"Gallery URL Generators, or GUGs are simple objects that take a simple string from the user, like: blue_eyes blue_eyes blonde_hair InCase elsa dandon_fuga wlop goth* order:id_asc And convert them into an initialising Gallery URL, such as: http://safebooru.org/index.php?page=post&s=list&tags=blue_eyes&pid=0 https://konachan.com/post?page=1&tags=blonde_hair+blue_eyes https://www.hentai-foundry.com/pictures/user/InCase/page/1 http://rule34.paheal.net/post/list/elsa dandon_fuga/1 https://www.deviantart.com/wlop/favourites/?offset=0 https://danbooru.donmai.us/posts?page=1&tags=goth*+order:id_asc These are all the 'first page' of the results if you type or click-through to the same location on those sites. We are essentially emulating their own simple search-url generation inside the hydrus client. actually doing it \u00b6 Although it is usually a fairly simple process of just substituting the inputted tags into a string template, there are a couple of extra things to think about. Let's look at the ui under network->downloader definitions->manage gugs : The client will split whatever the user enters by whitespace, so blue_eyes blonde_hair becomes two search terms, [ 'blue_eyes', 'blonde_hair' ] , which are then joined back together with the given 'search terms separator', to make blue_eyes+blonde_hair . Different sites use different separators, although ' ', '+', and ',' are most common. The new string is substituted into the %tags% in the template phrase, and the URL is made. Note that you will not have to make %20 or %3A percent-encodings for reserved characters here--the network engine handles all that before the request is sent. For the most part, if you need to include or a user puts in ':' or ' ' or '\u304a\u3063\u3071\u3044', you can just pass it along straight into the final URL without worrying. This ui should update as you change it, so have a play and look at how the output example url changes to get a feel for things. Look at the other defaults to see different examples. Even if you break something, you can just cancel out. The name of the GUG is important, as this is what will be listed when the user chooses what 'downloader' they want to use. Make sure it has a clear unambiguous name. The initial search text is also important. Most downloaders just take some text tags, but if your GUG expects a numerical artist id (like pixiv artist search does), you should specify that explicitly to the user. You can even put in a brief '(two tag maximum)' type of instruction if you like. Notice that the Deviart Art example above is actually the stream of wlop's favourites , not his works, and without an explicit notice of that, a user could easily mistake what they have selected. 'gelbooru' or 'newgrounds' are bad names, 'type here' is a bad initialising text. Nested GUGs \u00b6 Nested Gallery URL Generators are GUGs that hold other GUGs. Some searches actually use more than one stream (such as a Hentai Foundry artist lookup, where you might want to get both their regular works and their scraps, which are two separate galleries under the site), so NGUGs allow you to generate multiple initialising URLs per input. You can experiment with this ui if you like--it isn't too complicated--but you might want to hold off doing anything for real until you are comfortable with everything and know how producing multiple initialising URLs is going to work in the actual downloader.","title":"Gallery URL Generators"},{"location":"downloader_gugs.html#doing_it","text":"Although it is usually a fairly simple process of just substituting the inputted tags into a string template, there are a couple of extra things to think about. Let's look at the ui under network->downloader definitions->manage gugs : The client will split whatever the user enters by whitespace, so blue_eyes blonde_hair becomes two search terms, [ 'blue_eyes', 'blonde_hair' ] , which are then joined back together with the given 'search terms separator', to make blue_eyes+blonde_hair . Different sites use different separators, although ' ', '+', and ',' are most common. The new string is substituted into the %tags% in the template phrase, and the URL is made. Note that you will not have to make %20 or %3A percent-encodings for reserved characters here--the network engine handles all that before the request is sent. For the most part, if you need to include or a user puts in ':' or ' ' or '\u304a\u3063\u3071\u3044', you can just pass it along straight into the final URL without worrying. This ui should update as you change it, so have a play and look at how the output example url changes to get a feel for things. Look at the other defaults to see different examples. Even if you break something, you can just cancel out. The name of the GUG is important, as this is what will be listed when the user chooses what 'downloader' they want to use. Make sure it has a clear unambiguous name. The initial search text is also important. Most downloaders just take some text tags, but if your GUG expects a numerical artist id (like pixiv artist search does), you should specify that explicitly to the user. You can even put in a brief '(two tag maximum)' type of instruction if you like. Notice that the Deviart Art example above is actually the stream of wlop's favourites , not his works, and without an explicit notice of that, a user could easily mistake what they have selected. 'gelbooru' or 'newgrounds' are bad names, 'type here' is a bad initialising text.","title":"actually doing it"},{"location":"downloader_gugs.html#nested_gugs","text":"Nested Gallery URL Generators are GUGs that hold other GUGs. Some searches actually use more than one stream (such as a Hentai Foundry artist lookup, where you might want to get both their regular works and their scraps, which are two separate galleries under the site), so NGUGs allow you to generate multiple initialising URLs per input. You can experiment with this ui if you like--it isn't too complicated--but you might want to hold off doing anything for real until you are comfortable with everything and know how producing multiple initialising URLs is going to work in the actual downloader.","title":"Nested GUGs"},{"location":"downloader_intro.html","text":"Making a Downloader \u00b6 Caution Creating custom downloaders is only for advanced users who understand HTML or JSON. Beware! If you are simply looking for how to add new downloaders, please head over here . this system \u00b6 The first versions of hydrus's downloaders were all hardcoded and static--I wrote everything into the program itself and nothing was user-creatable or -fixable. After the maintenance burden of the entire messy system proved too large for me to keep up with and a semi-editable booru system proved successful, I decided to overhaul the entire thing to allow user creation and sharing of every component. It is designed to be very simple to the front-end user--they will typically handle a couple of png files and then select a new downloader from a list--but very flexible (and hence potentially complicated) on the back-end. These help pages describe the different compontents with the intention of making an HTML- or JSON- fluent user able to create and share a full new downloader on their own. As always, this is all under active development. Your feedback on the system would be appreciated, and if something is confusing or you discover something in here that is out of date, please let me know . what is a downloader? \u00b6 In hydrus, a downloader is one of: Gallery Downloader This takes a string like 'blue_eyes' to produce a series of thumbnail gallery page URLs that can be parsed for image page URLs which can ultimately be parsed for file URLs and metadata like tags. Boorus fall into this category. URL Downloader This does just the Gallery Downloader's back-end--instead of taking a string query, it takes the gallery or post URLs directly from the user, whether that is one from a drag-and-drop event or hundreds pasted from clipboard. For our purposes here, the URL Downloader is a subset of the Gallery Downloader. Watcher This takes a URL that it will check in timed intervals, parsing it for new URLs that it then queues up to be downloaded. It typically stops checking after the 'file velocity' (such as '1 new file per day') drops below a certain level. It is mostly for watching imageboard threads. Simple Downloader This takes a URL one-time and parses it for direct file URLs. This is a miscellaneous system for certain simple gallery types and some testing/'I just need the third tag's src on this one page' jobs. The system currently supports HTML and JSON parsing. XML should be fine under the HTML parser--it isn't strict about checking types and all that. what does a downloader do? \u00b6 The Gallery Downloader is the most complicated downloader and uses all the possible components. In order for hydrus to convert our example 'blue_eyes' query into a bunch of files with tags, it needs to: Present some user interface named 'safebooru tag search' to the user that will convert their input of 'blue_eyes' into https://safebooru.org/index.php?page=post&s=list&tags=blue_eyes&pid=0 . Recognise https://safebooru.org/index.php?page=post&s=list&tags=blue_eyes&pid=0 as a Safebooru Gallery URL. Convert the HTML of a Safebooru Gallery URL into a list URLs like https://safebooru.org/index.php?page=post&s=view&id=2437965 and possibly a 'next page' URL (e.g. https://safebooru.org/index.php?page=post&s=list&tags=blue_eyes&pid=40 ) that points to the next page of thumbnails. Recognise the https://safebooru.org/index.php?page=post&s=view&id=2437965 URLs as Safebooru Post URLs. Convert the HTML of a Safebooru Post URL into a file URL like https://safebooru.org//images/2329/b6e8c263d691d1c39a2eeba5e00709849d8f864d.jpg and some tags like: 1girl, bangs, black gloves, blonde hair, blue eyes, braid, closed mouth, day, fingerless gloves, fingernails, gloves, grass, hair ornament, hairclip, hands clasped, creator:hankuri, interlocked fingers, long hair, long sleeves, outdoors, own hands together, parted bangs, pointy ears, character:princess zelda, smile, solo, series:the legend of zelda, underbust. So we have three components: Gallery URL Generator (GUG): faces the user and converts text input into initialising Gallery URLs. URL Class: identifies URLs and informs the client how to deal with them. Parser: converts data from URLs into hydrus-understandable metadata. URL downloaders and watchers do not need the Gallery URL Generator, as their input is an URL. And simple downloaders also have an explicit 'just download it and parse it with this simple rule' action, so they do not use URL Classes (or even full-fledged Page Parsers) either.","title":"Introduction"},{"location":"downloader_intro.html#making_a_downloader","text":"Caution Creating custom downloaders is only for advanced users who understand HTML or JSON. Beware! If you are simply looking for how to add new downloaders, please head over here .","title":"Making a Downloader"},{"location":"downloader_intro.html#intro","text":"The first versions of hydrus's downloaders were all hardcoded and static--I wrote everything into the program itself and nothing was user-creatable or -fixable. After the maintenance burden of the entire messy system proved too large for me to keep up with and a semi-editable booru system proved successful, I decided to overhaul the entire thing to allow user creation and sharing of every component. It is designed to be very simple to the front-end user--they will typically handle a couple of png files and then select a new downloader from a list--but very flexible (and hence potentially complicated) on the back-end. These help pages describe the different compontents with the intention of making an HTML- or JSON- fluent user able to create and share a full new downloader on their own. As always, this is all under active development. Your feedback on the system would be appreciated, and if something is confusing or you discover something in here that is out of date, please let me know .","title":"this system"},{"location":"downloader_intro.html#downloader","text":"In hydrus, a downloader is one of: Gallery Downloader This takes a string like 'blue_eyes' to produce a series of thumbnail gallery page URLs that can be parsed for image page URLs which can ultimately be parsed for file URLs and metadata like tags. Boorus fall into this category. URL Downloader This does just the Gallery Downloader's back-end--instead of taking a string query, it takes the gallery or post URLs directly from the user, whether that is one from a drag-and-drop event or hundreds pasted from clipboard. For our purposes here, the URL Downloader is a subset of the Gallery Downloader. Watcher This takes a URL that it will check in timed intervals, parsing it for new URLs that it then queues up to be downloaded. It typically stops checking after the 'file velocity' (such as '1 new file per day') drops below a certain level. It is mostly for watching imageboard threads. Simple Downloader This takes a URL one-time and parses it for direct file URLs. This is a miscellaneous system for certain simple gallery types and some testing/'I just need the third tag's src on this one page' jobs. The system currently supports HTML and JSON parsing. XML should be fine under the HTML parser--it isn't strict about checking types and all that.","title":"what is a downloader?"},{"location":"downloader_intro.html#pipeline","text":"The Gallery Downloader is the most complicated downloader and uses all the possible components. In order for hydrus to convert our example 'blue_eyes' query into a bunch of files with tags, it needs to: Present some user interface named 'safebooru tag search' to the user that will convert their input of 'blue_eyes' into https://safebooru.org/index.php?page=post&s=list&tags=blue_eyes&pid=0 . Recognise https://safebooru.org/index.php?page=post&s=list&tags=blue_eyes&pid=0 as a Safebooru Gallery URL. Convert the HTML of a Safebooru Gallery URL into a list URLs like https://safebooru.org/index.php?page=post&s=view&id=2437965 and possibly a 'next page' URL (e.g. https://safebooru.org/index.php?page=post&s=list&tags=blue_eyes&pid=40 ) that points to the next page of thumbnails. Recognise the https://safebooru.org/index.php?page=post&s=view&id=2437965 URLs as Safebooru Post URLs. Convert the HTML of a Safebooru Post URL into a file URL like https://safebooru.org//images/2329/b6e8c263d691d1c39a2eeba5e00709849d8f864d.jpg and some tags like: 1girl, bangs, black gloves, blonde hair, blue eyes, braid, closed mouth, day, fingerless gloves, fingernails, gloves, grass, hair ornament, hairclip, hands clasped, creator:hankuri, interlocked fingers, long hair, long sleeves, outdoors, own hands together, parted bangs, pointy ears, character:princess zelda, smile, solo, series:the legend of zelda, underbust. So we have three components: Gallery URL Generator (GUG): faces the user and converts text input into initialising Gallery URLs. URL Class: identifies URLs and informs the client how to deal with them. Parser: converts data from URLs into hydrus-understandable metadata. URL downloaders and watchers do not need the Gallery URL Generator, as their input is an URL. And simple downloaders also have an explicit 'just download it and parse it with this simple rule' action, so they do not use URL Classes (or even full-fledged Page Parsers) either.","title":"what does a downloader do?"},{"location":"downloader_login.html","text":"Login Manager \u00b6 The system works, but this help was never done! Check the defaults for examples of how it works, sorry!","title":"Login Manager"},{"location":"downloader_login.html#login_manager","text":"The system works, but this help was never done! Check the defaults for examples of how it works, sorry!","title":"Login Manager"},{"location":"downloader_parsers.html","text":"Parsers \u00b6 In hydrus, a parser is an object that takes a single block of HTML or JSON data and returns many kinds of hydrus-level metadata. Parsers are flexible and potentially quite complicated. You might like to open network->manage parsers and explore the UI as you read these pages. Check out how the default parsers already in the client work, and if you want to write a new one, see if there is something already in there that is similar--it is usually easier to duplicate an existing parser and then alter it than to create a new one from scratch every time. There are three main components in the parsing system (click to open each component's help page): Formulae: Take parsable data, search it in some manner, and return 0 to n strings. Content Parsers: Take parsable data, apply a formula to it to get some strings, and apply a single metadata 'type' and perhaps some additional modifiers. Page Parsers: Take parsable data, apply content parsers to it, and return all the metadata in an appropriate structure. Once you are comfortable with these objects, you might like to check out these walkthroughs, which create full parsers from nothing: e621 HTML gallery page Gelbooru HTML file page Artstation JSON file page API Once you are comfortable with parsers, and if you are feeling brave, check out how the default imageboard and pixiv parsers work. These are complicated and use more experimental areas of the code to get their job done. If you are trying to get a new imageboard parser going and can't figure out subsidiary page parsers, send me a mail or something and I'll try to help you out! When you are making a parser, consider this checklist (you might want to copy/have your own version of this somewhere): Do you get good URLs with good priority? Do you ever accidentally get favourite/popular/advert results you didn't mean to? If you need a next gallery page URL, is it ever not available (and hence needs a URL Class fix)? Does it change for search tags with unicode or http-restricted characters? Do you get nice namespaced tags? Are any unwanted single characters like -/+/? getting through? Is the file hash available anywhere? Is a source/post time available? Is a source URL available? Is it good quality, or does it often just point to an artist's base twitter profile? If you pull it from text or a tooltip, is it clipped for longer URLs? Taken a break? Now let's put it all together ---->","title":"Overview"},{"location":"downloader_parsers.html#parsers","text":"In hydrus, a parser is an object that takes a single block of HTML or JSON data and returns many kinds of hydrus-level metadata. Parsers are flexible and potentially quite complicated. You might like to open network->manage parsers and explore the UI as you read these pages. Check out how the default parsers already in the client work, and if you want to write a new one, see if there is something already in there that is similar--it is usually easier to duplicate an existing parser and then alter it than to create a new one from scratch every time. There are three main components in the parsing system (click to open each component's help page): Formulae: Take parsable data, search it in some manner, and return 0 to n strings. Content Parsers: Take parsable data, apply a formula to it to get some strings, and apply a single metadata 'type' and perhaps some additional modifiers. Page Parsers: Take parsable data, apply content parsers to it, and return all the metadata in an appropriate structure. Once you are comfortable with these objects, you might like to check out these walkthroughs, which create full parsers from nothing: e621 HTML gallery page Gelbooru HTML file page Artstation JSON file page API Once you are comfortable with parsers, and if you are feeling brave, check out how the default imageboard and pixiv parsers work. These are complicated and use more experimental areas of the code to get their job done. If you are trying to get a new imageboard parser going and can't figure out subsidiary page parsers, send me a mail or something and I'll try to help you out! When you are making a parser, consider this checklist (you might want to copy/have your own version of this somewhere): Do you get good URLs with good priority? Do you ever accidentally get favourite/popular/advert results you didn't mean to? If you need a next gallery page URL, is it ever not available (and hence needs a URL Class fix)? Does it change for search tags with unicode or http-restricted characters? Do you get nice namespaced tags? Are any unwanted single characters like -/+/? getting through? Is the file hash available anywhere? Is a source/post time available? Is a source URL available? Is it good quality, or does it often just point to an artist's base twitter profile? If you pull it from text or a tooltip, is it clipped for longer URLs? Taken a break? Now let's put it all together ---->","title":"Parsers"},{"location":"downloader_parsers_content_parsers.html","text":"Content Parsers \u00b6 So, we can now generate some strings from a document. Content Parsers will let us apply a single metadata type to those strings to inform hydrus what they are. A content parser has a name, a content type, and a formula. This example fetches the character tags from a danbooru post. The name is just decorative, but it is generally a good idea so you can find things again when you next revisit them. The current content types are: urls \u00b6 This should be applied to relative ('/image/smile.jpg') and absolute ('https://mysite.com/content/image/smile.jpg') URLs. If the URL is relative, the client will generate an absolute URL based on the original URL used to fetch the data being parsed (i.e. it should all just work). You can set several types of URL: url to download/pursue means a Post URL or a File URL in our URL Classes system, like a booru post or an actual raw file like a jpg or webm. url to associate means an URL you want added to the list of 'known urls' for the file, but not one you want to client to actually download and parse. Use this to neatly add booru 'source' urls. next gallery page means the next Gallery URL on from the current one. The 'file url quality precedence' allows the client to select the best of several possible URLs. Given multiple content parsers producing URLs at the same 'level' of parsing, it will select the one with the highest value. Consider these two posts: https://danbooru.donmai.us/posts/3016415 https://danbooru.donmai.us/posts/3040603 The Garnet image fits into a regular page and so Danbooru embed the whole original file in the main media canvas. One easy way to find the full File URL in this case would be to select the \"src\" attribute of the \"img\" tag with id=\"image\". The Cirno one, however, is much larger and has been scaled down. The src of the main canvas tag points to a resized 'sample' link. The full link can be found at the 'view original' link up top, which is an \"a\" tag with id=\"image-resize-link\". The Garnet post does not have the 'view original' link, so to cover both situations we might want two content parsers--one fetching the 'canvas' \"src\" and the other finding the 'view original' \"href\". If we set the 'canvas' one with a quality of 40 and the 'view original' 60, then the parsing system would know to select the 60 when it was available but to fall back to the 40 if not. As it happens, Danbooru (afaik, always) gives a link to the original file under the 'Size:' metadata to the left. This is the same 'best link' for both posts above, but it isn't so easy to identify. It is a quiet \"a\" tag without an \"id\" and it isn't always in the same location, but if you could pin it down reliably, it might be nice to circumvent the whole issue. Sites can change suddenly, so it is nice to have a bit of redundancy here if it is easy. tags \u00b6 These are simple--they tell the client that the given strings are tags. You set the namespace here as well. I recommend you parse 'splashbrush' and set the namespace 'creator' here rather than trying to mess around with 'append prefix \"creator:\"' string conversions at the formula level--it is simpler up here and it lets hydrus handle any edge case logic for you. Leave the namespace field blank for unnamespaced tags. file hash \u00b6 This says 'this is the hash for the file otherwise referenced in this parser'. So, if you have another content parser finding a File or Post URL, this lets the client know early that that destination happens to have a particular MD5, for instance. The client will look for that hash in its own database, and if it finds a match, it can predetermine if it already has the file (or has previously deleted it) without ever having to download it. When this happens, it will still add tags and associate the file with the URL for it's 'known urls' just as if it had downloaded it! If you understand this concept, it is great to include. It saves time and bandwidth for everyone. Many site APIs include a hash for this exact reason--they want you to be able to skip a needless download just as much as you do. The usual suite of hash types are supported: MD5, SHA1, SHA256, and SHA512. An old version of this required some weird string decoding, but this is no longer true. Select 'hex' or 'base64' from the encoding type dropdown, and then just parse the 'e5af57a687f089894f5ecede50049458' or '5a9XpofwiYlPXs7eUASUWA==' text, and hydrus should handle the rest. It will present the parsed hash in hex. timestamp \u00b6 This lets you say that a given number refers to a particular time for a file. At the moment, I only support 'source time', which represents a 'post' time for the file and is useful for thread and subscription check time calculations. It takes a Unix time integer, like 1520203484, which many APIs will provide. If you are feeling very clever, you can decode a 'MM/DD/YYYY hh:mm:ss' style string to a Unix time integer using string converters, which use some hacky and semi-reliable python %d-style values as per here . Look at the existing defaults for examples of this, and don't worry about being more accurate than 12/24 hours--trying to figure out timezone is a hell not worth attempting, and doesn't really matter in the long-run for subscriptions and thread watchers that might care. watcher page title \u00b6 This lets the watcher know a good name/subject for its entries. The subject of a thread is obviously ideal here, but failing that you can try to fetch the first part of the first post's comment. It has precendence, like for URLs, so you can tell the parser which to prefer if you have multiple options. Just for neatness and ease of testing, you probably want to use a string converter here to cut it down to the first 64 characters or so. veto \u00b6 This is a special content type--it tells the next highest stage of parsing that this 'post' of parsing is invalid and to cancel and not return any data. For instance, if a thread post's file was deleted, the site might provide a default '404' stock File URL using the same markup structure as it would for normal images. You don't want to give the user the same 404 image ten times over (with fifteen kinds of tag and source time metadata attached), so you can add a little rule here that says \"If the image link is 'https://somesite.com/404.png', raise a veto: File 404\" or \"If the page has 'No results found' in its main content div, raise a veto: No results found\" or \"If the expected download tag does not have 'download link' as its text, raise a veto: No Download Link found--possibly Ugoira?\" and so on. They will associate their name with the veto being raised, so it is useful to give these a decent descriptive name so you can see what might be going right or wrong during testing. If it is an appropriate and serious enough veto, it may also rise up to the user level and will be useful if they need to report you an error (like \"After five pages of parsing, it gives 'veto: no next page link'\").","title":"Content Parsers"},{"location":"downloader_parsers_content_parsers.html#content_parsers","text":"So, we can now generate some strings from a document. Content Parsers will let us apply a single metadata type to those strings to inform hydrus what they are. A content parser has a name, a content type, and a formula. This example fetches the character tags from a danbooru post. The name is just decorative, but it is generally a good idea so you can find things again when you next revisit them. The current content types are:","title":"Content Parsers"},{"location":"downloader_parsers_content_parsers.html#intro","text":"This should be applied to relative ('/image/smile.jpg') and absolute ('https://mysite.com/content/image/smile.jpg') URLs. If the URL is relative, the client will generate an absolute URL based on the original URL used to fetch the data being parsed (i.e. it should all just work). You can set several types of URL: url to download/pursue means a Post URL or a File URL in our URL Classes system, like a booru post or an actual raw file like a jpg or webm. url to associate means an URL you want added to the list of 'known urls' for the file, but not one you want to client to actually download and parse. Use this to neatly add booru 'source' urls. next gallery page means the next Gallery URL on from the current one. The 'file url quality precedence' allows the client to select the best of several possible URLs. Given multiple content parsers producing URLs at the same 'level' of parsing, it will select the one with the highest value. Consider these two posts: https://danbooru.donmai.us/posts/3016415 https://danbooru.donmai.us/posts/3040603 The Garnet image fits into a regular page and so Danbooru embed the whole original file in the main media canvas. One easy way to find the full File URL in this case would be to select the \"src\" attribute of the \"img\" tag with id=\"image\". The Cirno one, however, is much larger and has been scaled down. The src of the main canvas tag points to a resized 'sample' link. The full link can be found at the 'view original' link up top, which is an \"a\" tag with id=\"image-resize-link\". The Garnet post does not have the 'view original' link, so to cover both situations we might want two content parsers--one fetching the 'canvas' \"src\" and the other finding the 'view original' \"href\". If we set the 'canvas' one with a quality of 40 and the 'view original' 60, then the parsing system would know to select the 60 when it was available but to fall back to the 40 if not. As it happens, Danbooru (afaik, always) gives a link to the original file under the 'Size:' metadata to the left. This is the same 'best link' for both posts above, but it isn't so easy to identify. It is a quiet \"a\" tag without an \"id\" and it isn't always in the same location, but if you could pin it down reliably, it might be nice to circumvent the whole issue. Sites can change suddenly, so it is nice to have a bit of redundancy here if it is easy.","title":"urls"},{"location":"downloader_parsers_content_parsers.html#tags","text":"These are simple--they tell the client that the given strings are tags. You set the namespace here as well. I recommend you parse 'splashbrush' and set the namespace 'creator' here rather than trying to mess around with 'append prefix \"creator:\"' string conversions at the formula level--it is simpler up here and it lets hydrus handle any edge case logic for you. Leave the namespace field blank for unnamespaced tags.","title":"tags"},{"location":"downloader_parsers_content_parsers.html#file_hash","text":"This says 'this is the hash for the file otherwise referenced in this parser'. So, if you have another content parser finding a File or Post URL, this lets the client know early that that destination happens to have a particular MD5, for instance. The client will look for that hash in its own database, and if it finds a match, it can predetermine if it already has the file (or has previously deleted it) without ever having to download it. When this happens, it will still add tags and associate the file with the URL for it's 'known urls' just as if it had downloaded it! If you understand this concept, it is great to include. It saves time and bandwidth for everyone. Many site APIs include a hash for this exact reason--they want you to be able to skip a needless download just as much as you do. The usual suite of hash types are supported: MD5, SHA1, SHA256, and SHA512. An old version of this required some weird string decoding, but this is no longer true. Select 'hex' or 'base64' from the encoding type dropdown, and then just parse the 'e5af57a687f089894f5ecede50049458' or '5a9XpofwiYlPXs7eUASUWA==' text, and hydrus should handle the rest. It will present the parsed hash in hex.","title":"file hash"},{"location":"downloader_parsers_content_parsers.html#timestamp","text":"This lets you say that a given number refers to a particular time for a file. At the moment, I only support 'source time', which represents a 'post' time for the file and is useful for thread and subscription check time calculations. It takes a Unix time integer, like 1520203484, which many APIs will provide. If you are feeling very clever, you can decode a 'MM/DD/YYYY hh:mm:ss' style string to a Unix time integer using string converters, which use some hacky and semi-reliable python %d-style values as per here . Look at the existing defaults for examples of this, and don't worry about being more accurate than 12/24 hours--trying to figure out timezone is a hell not worth attempting, and doesn't really matter in the long-run for subscriptions and thread watchers that might care.","title":"timestamp"},{"location":"downloader_parsers_content_parsers.html#page_title","text":"This lets the watcher know a good name/subject for its entries. The subject of a thread is obviously ideal here, but failing that you can try to fetch the first part of the first post's comment. It has precendence, like for URLs, so you can tell the parser which to prefer if you have multiple options. Just for neatness and ease of testing, you probably want to use a string converter here to cut it down to the first 64 characters or so.","title":"watcher page title"},{"location":"downloader_parsers_content_parsers.html#veto","text":"This is a special content type--it tells the next highest stage of parsing that this 'post' of parsing is invalid and to cancel and not return any data. For instance, if a thread post's file was deleted, the site might provide a default '404' stock File URL using the same markup structure as it would for normal images. You don't want to give the user the same 404 image ten times over (with fifteen kinds of tag and source time metadata attached), so you can add a little rule here that says \"If the image link is 'https://somesite.com/404.png', raise a veto: File 404\" or \"If the page has 'No results found' in its main content div, raise a veto: No results found\" or \"If the expected download tag does not have 'download link' as its text, raise a veto: No Download Link found--possibly Ugoira?\" and so on. They will associate their name with the veto being raised, so it is useful to give these a decent descriptive name so you can see what might be going right or wrong during testing. If it is an appropriate and serious enough veto, it may also rise up to the user level and will be useful if they need to report you an error (like \"After five pages of parsing, it gives 'veto: no next page link'\").","title":"veto"},{"location":"downloader_parsers_formulae.html","text":"Parser Formulae \u00b6 Formulae are tools used by higher-level components of the parsing system. They take some data (typically some HTML or JSON) and return 0 to n strings. For our purposes, these strings will usually be tags, URLs, and timestamps. You will usually see them summarised with this panel: The different types are currently html , json , compound , and context variable . html \u00b6 This takes a full HTML document or a sample of HTML--and any regular sort of XML should also work. It starts at the root node and searches for lower nodes using one or more ordered rules based on tag name and attributes, and then returns string data from those final nodes. For instance, if you have this: < html > < body > < div class = \"media_taglist\" > < span class = \"generaltag\" >< a href = \"(search page)\" > blonde hair </ a > (3456) </ span > < span class = \"generaltag\" >< a href = \"(search page)\" > blue eyes </ a > (4567) </ span > < span class = \"generaltag\" >< a href = \"(search page)\" > bodysuit </ a > (5678) </ span > < span class = \"charactertag\" >< a href = \"(search page)\" > samus aran </ a > (2345) </ span > < span class = \"artisttag\" >< a href = \"(search page)\" > splashbrush </ a > (123) </ span > </ div > < div class = \"content\" > < span class = \"media\" > (a whole bunch of content that doesn't have tags in) </ span > </ div > </ body > </ html > (Most boorus have a taglist like this on their file pages.) To find the artist, \"splashbrush\", here, you could: search beneath the root tag ( < html > ) for the < div > tag with attribute class=\"media_taglist\" search beneath that < div > for < span > tags with attribute class=\"artisttag\" search beneath those < span > tags for < a > tags and then get the string content of those < a > tags Changing the artisttag to charactertag or generaltag would give you samus aran or blonde hair , blue eyes , bodysuit respectively. You might be tempted to just go straight for any < span > with class=\"artisttag\" , but many sites use the same class to render a sidebar of favourite/popular tags or some other sponsored content, so it is generally best to try to narrow down to a larger < div > container so you don't get anything you don't mean. the ui \u00b6 Clicking 'edit formula' on an HTML formula gives you this: You edit on the left and test on the right. finding the right html tags \u00b6 When you add or edit one of the specific tag search rules, you get this: You can set multiple key/value attribute search conditions, but you'll typically be searching for 'class' or 'id' here, if anything. Note that you can set it to fetch only the xth instance of a found tag, which can be useful in situations like this: < span class = \"generaltag\" > < a href = \"(add tag)\" > + </ a > < a href = \"(remove tag)\" > - </ a > < a href = \"(search page)\" > blonde hair </ a > (3456) </ span > Without any more attributes, there isn't a great way to distinguish the < a > with \"blonde hair\" from the other two--so just set get the 3rd <a> tag and you are good. Most of the time, you'll be searching descendants (i.e. walking down the tree), but sometimes you might have this: < span > < a href = \"(link to post url)\" > < img class = \"thumb\" src = \"(thumbnail image)\" /> </ a > </ span > There isn't a great way to find the < span > or the < a > when looking from above here, as they are lacking a class or id, but you can find the < img > ok, so if you find those and then add a rule where instead of searching descendants, you are 'walking back up ancestors' like this: You can solve some tricky problems this way! You can also set a String Match, which is the same panel as you say in with URL Classes. It tests its best guess at the tag's 'string' value, so you can find a tag with 'Original Image' as its text or that with a regex starts with 'Posted on: '. Have a play with it and you'll figure it out. content to fetch \u00b6 Once you have narrowed down the right nodes you want, you can decide what text to fetch. Given a node of: < a href = \"(URL A)\" class = \"thumb_title\" > Forest Glade </ a > Returning the href attribute would return the string \"(URL A)\", returning the string content would give \"Forest Glade\", and returning the full html would give < a href = \"(URL A)\" class = \"thumb\" > Forest Glade </ a > . This last choice is useful in complicated situations where you want a second, separated layer of parsing, which we will get to later. string match and conversion \u00b6 You can set a final String Match to filter the parsed results (e.g. \"only allow strings that only contain numbers\" or \"only allow full URLs as based on (complicated regex)\") and String Converter to edit it (e.g. \"remove the first three characters of whatever you find\" or \"decode from base64\"). You won't use these much, but they can sometimes get you out of a complicated situation. testing \u00b6 The testing panel on the right is important and worth using. Copy the html from the source you want to parse and then hit the paste buttons to set that as the data to test with. json \u00b6 This takes some JSON and does a similar style of search: It is a bit simpler than HTML--if the current node is a list (called an 'Array' in JSON), you can fetch every item or the xth item, and if it is a dictionary (called an 'Object' in JSON), you can fetch a particular entry by name. Since you can't jump down several layers with attribute lookups or tag names like with HTML, you have to go down every layer one at a time. In any case, if you have something like this: Note It is a great idea to check the html or json you are trying to parse with your browser. Some web browsers have excellent developer tools that let you walk through the nodes of the document you are trying to parse in a prettier way than I would ever have time to put together. This image is one of the views Firefox provides if you simply enter a JSON URL. Searching for \"posts\"->1 st list item->\"sub\" on this data will give you \"Nobody like kino here.\". Searching for \"posts\"->all list items->\"tim\" will give you the three SHA256 file hashes (since the third post has no file attached and so no 'tim' entry, the parser skips over it without complaint). Searching for \"posts\"->1 st list item->\"com\" will give you the OP's comment, ~AS RAW UNPARSED HTML~ . The default is to fetch the final nodes' 'data content', which means coercing simple variables into strings. If the current node is a list or dict, no string is returned. But if you like, you can return the json beneath the current node (which, like HTML, includes the current node). This again will come in useful later. compound \u00b6 If you want to create a string from multiple parsed strings--for instance by appending the 'tim' and the 'ext' in our json example together--you can use a Compound formula. This fetches multiple lists of strings and tries to place them into a single string using \\1 regex substitution syntax: This is a complicated example taken from one of my thread parsers. I have to take a modified version of the original thread URL (the first rule, so \\1 ) and then append the filename ( \\2 ) and its extension ( \\3 ) on the end to get the final file URL of a post. You can mix in more characters in the substitution phrase, like \\1.jpg or even have multiple instances ( https://\\2.muhsite.com/\\2/\\1 ), if that is appropriate. This is where the magic happens, sometimes, so keep it in mind if you need to do something cleverer than the data you have seems to provide. context variable \u00b6 This is a basic hacky answer to a particular problem. It is a simple key:value dictionary that at the moment only stores one variable, 'url', which contains the original URL used to fetch the data being parsed. If a different URL Class links to this parser via an API URL, this 'url' variable will always be the API URL (i.e. it literally is the URL used to fetch the data), not any thread/whatever URL the user entered. Hit the 'edit example parsing context' to change the URL used for testing. I have used this several times to stitch together file URLs when I am pulling data from APIs, like in the compound formula example above. In this case, the starting URL is https://a.4cdn.org/tg/thread/57806016.json , from which I extract the board name, \"tg\", using the string converter, and then add in 4chan's CDN domain to make the appropriate base file URL ( https:/i.4cdn.org/tg/ ) for the given thread. I only have to jump through this hoop in 4chan's case because they explicitly store file URLs by board name. 8chan on the other hand, for instance, has a static https://media.8ch.net/file_store/ for all files, so it is a little easier (I think I just do a single 'prepend' string transformation somewhere). If you want to make some parsers, you will have to get familiar with how different sites store and present their data!","title":"Formulae"},{"location":"downloader_parsers_formulae.html#formulae","text":"Formulae are tools used by higher-level components of the parsing system. They take some data (typically some HTML or JSON) and return 0 to n strings. For our purposes, these strings will usually be tags, URLs, and timestamps. You will usually see them summarised with this panel: The different types are currently html , json , compound , and context variable .","title":"Parser Formulae"},{"location":"downloader_parsers_formulae.html#html_formula","text":"This takes a full HTML document or a sample of HTML--and any regular sort of XML should also work. It starts at the root node and searches for lower nodes using one or more ordered rules based on tag name and attributes, and then returns string data from those final nodes. For instance, if you have this: < html > < body > < div class = \"media_taglist\" > < span class = \"generaltag\" >< a href = \"(search page)\" > blonde hair </ a > (3456) </ span > < span class = \"generaltag\" >< a href = \"(search page)\" > blue eyes </ a > (4567) </ span > < span class = \"generaltag\" >< a href = \"(search page)\" > bodysuit </ a > (5678) </ span > < span class = \"charactertag\" >< a href = \"(search page)\" > samus aran </ a > (2345) </ span > < span class = \"artisttag\" >< a href = \"(search page)\" > splashbrush </ a > (123) </ span > </ div > < div class = \"content\" > < span class = \"media\" > (a whole bunch of content that doesn't have tags in) </ span > </ div > </ body > </ html > (Most boorus have a taglist like this on their file pages.) To find the artist, \"splashbrush\", here, you could: search beneath the root tag ( < html > ) for the < div > tag with attribute class=\"media_taglist\" search beneath that < div > for < span > tags with attribute class=\"artisttag\" search beneath those < span > tags for < a > tags and then get the string content of those < a > tags Changing the artisttag to charactertag or generaltag would give you samus aran or blonde hair , blue eyes , bodysuit respectively. You might be tempted to just go straight for any < span > with class=\"artisttag\" , but many sites use the same class to render a sidebar of favourite/popular tags or some other sponsored content, so it is generally best to try to narrow down to a larger < div > container so you don't get anything you don't mean.","title":"html"},{"location":"downloader_parsers_formulae.html#the_ui","text":"Clicking 'edit formula' on an HTML formula gives you this: You edit on the left and test on the right.","title":"the ui"},{"location":"downloader_parsers_formulae.html#finding_the_right_html_tags","text":"When you add or edit one of the specific tag search rules, you get this: You can set multiple key/value attribute search conditions, but you'll typically be searching for 'class' or 'id' here, if anything. Note that you can set it to fetch only the xth instance of a found tag, which can be useful in situations like this: < span class = \"generaltag\" > < a href = \"(add tag)\" > + </ a > < a href = \"(remove tag)\" > - </ a > < a href = \"(search page)\" > blonde hair </ a > (3456) </ span > Without any more attributes, there isn't a great way to distinguish the < a > with \"blonde hair\" from the other two--so just set get the 3rd <a> tag and you are good. Most of the time, you'll be searching descendants (i.e. walking down the tree), but sometimes you might have this: < span > < a href = \"(link to post url)\" > < img class = \"thumb\" src = \"(thumbnail image)\" /> </ a > </ span > There isn't a great way to find the < span > or the < a > when looking from above here, as they are lacking a class or id, but you can find the < img > ok, so if you find those and then add a rule where instead of searching descendants, you are 'walking back up ancestors' like this: You can solve some tricky problems this way! You can also set a String Match, which is the same panel as you say in with URL Classes. It tests its best guess at the tag's 'string' value, so you can find a tag with 'Original Image' as its text or that with a regex starts with 'Posted on: '. Have a play with it and you'll figure it out.","title":"finding the right html tags"},{"location":"downloader_parsers_formulae.html#content_to_fetch","text":"Once you have narrowed down the right nodes you want, you can decide what text to fetch. Given a node of: < a href = \"(URL A)\" class = \"thumb_title\" > Forest Glade </ a > Returning the href attribute would return the string \"(URL A)\", returning the string content would give \"Forest Glade\", and returning the full html would give < a href = \"(URL A)\" class = \"thumb\" > Forest Glade </ a > . This last choice is useful in complicated situations where you want a second, separated layer of parsing, which we will get to later.","title":"content to fetch"},{"location":"downloader_parsers_formulae.html#string_match_and_conversion","text":"You can set a final String Match to filter the parsed results (e.g. \"only allow strings that only contain numbers\" or \"only allow full URLs as based on (complicated regex)\") and String Converter to edit it (e.g. \"remove the first three characters of whatever you find\" or \"decode from base64\"). You won't use these much, but they can sometimes get you out of a complicated situation.","title":"string match and conversion"},{"location":"downloader_parsers_formulae.html#testing","text":"The testing panel on the right is important and worth using. Copy the html from the source you want to parse and then hit the paste buttons to set that as the data to test with.","title":"testing"},{"location":"downloader_parsers_formulae.html#json_formula","text":"This takes some JSON and does a similar style of search: It is a bit simpler than HTML--if the current node is a list (called an 'Array' in JSON), you can fetch every item or the xth item, and if it is a dictionary (called an 'Object' in JSON), you can fetch a particular entry by name. Since you can't jump down several layers with attribute lookups or tag names like with HTML, you have to go down every layer one at a time. In any case, if you have something like this: Note It is a great idea to check the html or json you are trying to parse with your browser. Some web browsers have excellent developer tools that let you walk through the nodes of the document you are trying to parse in a prettier way than I would ever have time to put together. This image is one of the views Firefox provides if you simply enter a JSON URL. Searching for \"posts\"->1 st list item->\"sub\" on this data will give you \"Nobody like kino here.\". Searching for \"posts\"->all list items->\"tim\" will give you the three SHA256 file hashes (since the third post has no file attached and so no 'tim' entry, the parser skips over it without complaint). Searching for \"posts\"->1 st list item->\"com\" will give you the OP's comment, ~AS RAW UNPARSED HTML~ . The default is to fetch the final nodes' 'data content', which means coercing simple variables into strings. If the current node is a list or dict, no string is returned. But if you like, you can return the json beneath the current node (which, like HTML, includes the current node). This again will come in useful later.","title":"json"},{"location":"downloader_parsers_formulae.html#compound_formula","text":"If you want to create a string from multiple parsed strings--for instance by appending the 'tim' and the 'ext' in our json example together--you can use a Compound formula. This fetches multiple lists of strings and tries to place them into a single string using \\1 regex substitution syntax: This is a complicated example taken from one of my thread parsers. I have to take a modified version of the original thread URL (the first rule, so \\1 ) and then append the filename ( \\2 ) and its extension ( \\3 ) on the end to get the final file URL of a post. You can mix in more characters in the substitution phrase, like \\1.jpg or even have multiple instances ( https://\\2.muhsite.com/\\2/\\1 ), if that is appropriate. This is where the magic happens, sometimes, so keep it in mind if you need to do something cleverer than the data you have seems to provide.","title":"compound"},{"location":"downloader_parsers_formulae.html#context_variable_formula","text":"This is a basic hacky answer to a particular problem. It is a simple key:value dictionary that at the moment only stores one variable, 'url', which contains the original URL used to fetch the data being parsed. If a different URL Class links to this parser via an API URL, this 'url' variable will always be the API URL (i.e. it literally is the URL used to fetch the data), not any thread/whatever URL the user entered. Hit the 'edit example parsing context' to change the URL used for testing. I have used this several times to stitch together file URLs when I am pulling data from APIs, like in the compound formula example above. In this case, the starting URL is https://a.4cdn.org/tg/thread/57806016.json , from which I extract the board name, \"tg\", using the string converter, and then add in 4chan's CDN domain to make the appropriate base file URL ( https:/i.4cdn.org/tg/ ) for the given thread. I only have to jump through this hoop in 4chan's case because they explicitly store file URLs by board name. 8chan on the other hand, for instance, has a static https://media.8ch.net/file_store/ for all files, so it is a little easier (I think I just do a single 'prepend' string transformation somewhere). If you want to make some parsers, you will have to get familiar with how different sites store and present their data!","title":"context variable"},{"location":"downloader_parsers_full_example_api.html","text":"api example \u00b6 Some sites offer API calls for their pages. Depending on complexity and quality of content, using these APIs may or may not be a good idea. Artstation has a good one--let's first review our URL Classes: We convert the original Post URL, https://www.artstation.com/artwork/mQLe1 to https://www.artstation.com/projects/mQLe1.json . Note that Artstation Post URLs can produce multiple files, and that the API url should not be associated with those final files. So, when the client encounters an 'artstation file page' URL, it will generate the equivalent 'artstation file page json api' URL and use that for downloading and parsing. If you would like to review your API links, check out network->downloader definitions->manage url class links->api links . Using Example URLs, it will figure out which URL Classes link to others and ensure you are mapping parsers only to the final link in the chain--there should be several already in there by default. Now lets look at the JSON. Loading clean JSON in a browser should present you with a nicer view: I have highlighted the data we want, which is: The File URLs. Creator, title, medium, and unnamespaced tags. Source time. JSON is a dream to parse, and I will assume you are comfortable with Content Parsers from the previous examples, so I'll simply paste the different formulae one after another: Each image is stored under a separate numbered 'assets' list item. This one has just two, but some Artstation pages have dozens of images. The only unusual part here is I also put a String Match of ^(?!.*assets\\/covers).*$ , which filters out 'cover' images (such as on here ), which make for nice portfolio thumbs on the site but are not interesting to us. This fetches the 'creator' tag. Artstation's API is great because it includes profile data in content requests. There's the creator's presentation name, username, profile link, avatar URLs, all that inside a regular request about this particular work. When that information is missing (like in yiff.party), it may make the API useless to you. These are all simple. You can take or leave the title and medium tags--some people like them, some don't. This example has no unnamespaced tags, but this one does. Creator-entered tags are sometimes not worth parsing (on tumblr, for instance, you often get run-on tags like #imbored #whatisevengoingon that are irrelevent to the work), but Artstation users are all professionals trying to get their work noticed, so the tags are usually pretty good. This again uses python's datetime to decode the date, which Artstation presents with millisecond accuracy, ha ha. I use a (.+:..)\\..*->\\1 regex (i.e. \"get everything before the period\") to strip off the timezone and milliseconds and then decode as normal. summary \u00b6 APIs that are stable and free to access (e.g. do not require OAuth or other complicated login headers) can make parsing fantastic. They save bandwidth and CPU time, and they are typically easier to work with than HTML. Unfortunately, the boorus that do provide APIs often list their tags without namespace information, so I recommend you double-check you can get what you want before you get too deep into it. Some APIs also offer incomplete data, such as relative URLs (relative to the original URL!), which can be a pain to figure out in our system.","title":"api example"},{"location":"downloader_parsers_full_example_api.html#api_example","text":"Some sites offer API calls for their pages. Depending on complexity and quality of content, using these APIs may or may not be a good idea. Artstation has a good one--let's first review our URL Classes: We convert the original Post URL, https://www.artstation.com/artwork/mQLe1 to https://www.artstation.com/projects/mQLe1.json . Note that Artstation Post URLs can produce multiple files, and that the API url should not be associated with those final files. So, when the client encounters an 'artstation file page' URL, it will generate the equivalent 'artstation file page json api' URL and use that for downloading and parsing. If you would like to review your API links, check out network->downloader definitions->manage url class links->api links . Using Example URLs, it will figure out which URL Classes link to others and ensure you are mapping parsers only to the final link in the chain--there should be several already in there by default. Now lets look at the JSON. Loading clean JSON in a browser should present you with a nicer view: I have highlighted the data we want, which is: The File URLs. Creator, title, medium, and unnamespaced tags. Source time. JSON is a dream to parse, and I will assume you are comfortable with Content Parsers from the previous examples, so I'll simply paste the different formulae one after another: Each image is stored under a separate numbered 'assets' list item. This one has just two, but some Artstation pages have dozens of images. The only unusual part here is I also put a String Match of ^(?!.*assets\\/covers).*$ , which filters out 'cover' images (such as on here ), which make for nice portfolio thumbs on the site but are not interesting to us. This fetches the 'creator' tag. Artstation's API is great because it includes profile data in content requests. There's the creator's presentation name, username, profile link, avatar URLs, all that inside a regular request about this particular work. When that information is missing (like in yiff.party), it may make the API useless to you. These are all simple. You can take or leave the title and medium tags--some people like them, some don't. This example has no unnamespaced tags, but this one does. Creator-entered tags are sometimes not worth parsing (on tumblr, for instance, you often get run-on tags like #imbored #whatisevengoingon that are irrelevent to the work), but Artstation users are all professionals trying to get their work noticed, so the tags are usually pretty good. This again uses python's datetime to decode the date, which Artstation presents with millisecond accuracy, ha ha. I use a (.+:..)\\..*->\\1 regex (i.e. \"get everything before the period\") to strip off the timezone and milliseconds and then decode as normal.","title":"api example"},{"location":"downloader_parsers_full_example_api.html#summary","text":"APIs that are stable and free to access (e.g. do not require OAuth or other complicated login headers) can make parsing fantastic. They save bandwidth and CPU time, and they are typically easier to work with than HTML. Unfortunately, the boorus that do provide APIs often list their tags without namespace information, so I recommend you double-check you can get what you want before you get too deep into it. Some APIs also offer incomplete data, such as relative URLs (relative to the original URL!), which can be a pain to figure out in our system.","title":"summary"},{"location":"downloader_parsers_full_example_file_page.html","text":"file page example \u00b6 Let's look at this page: https://gelbooru.com/index.php?page=post&s=view&id=3837615 . What sorts of data are we interested in here? The image URL. The different tags and their namespaces. The secret md5 hash buried in the HTML. The post time. The Deviant Art source URL. the file url \u00b6 A tempting strategy for pulling the file URL is to just fetch the src of the embedded < img > tag, but: If the booru also supports videos or flash, you'll have to write separate and likely more complicated rules for < video > and < embed > tags. If the booru shows 'sample' sizes for large images--as this one does!--pulling the src of the image you see won't get the full-size original for large images. If you have an account with the site you are parsing and have clicked the appropriate 'Always view original' setting, you may not see these sorts of sample-size banners! I recommend you log out of/go incognito for sites you are inspecting for hydrus parsing (unless a log-in is required to see content, so the hydrus user will have to set up hydrus-side login to actually use the parser), or you can easily NSFW-gates and other logged-out hurdles. When trying to pin down the right link, if there are no good alternatives, you often have to write several File URL rules with different precedence, saying 'get the \"Click Here to See Full Size\" link at 75' and 'get the embed's \"src\" at 25' and so on to make sure you cover different situations, but as it happens Gelbooru always posts the actual File URL at: < meta property = \"og:image\" content = \"https://gelbooru.com/images/38/6e/386e12e33726425dbd637e134c4c09b5.jpeg\" /> under the < head > < a href = \"https://simg3.gelbooru.com//images/38/6e/386e12e33726425dbd637e134c4c09b5.jpeg\" target = \"_blank\" style = \"font-weight: bold;\" > Original image </ a > which can be found by putting a String Match in the html formula. < meta > with property=\"og:image\" is easy to search for (and they use the same tag for video links as well!). For the Original Image, you can use a String Match like so: Gelbooru uses \"Original Image\" even when they link to webm, which is helpful, but like \"og:image\", it could be changed to 'video' in future. I think I wrote my gelbooru parser before I added String Matches to individual HTML formulae tag rules, so I went with this, which is a bit more cheeky: But it works. Sometimes, just regexing for links that fit the site's CDN is a good bet for finding difficult stuff. tags \u00b6 Most boorus have a taglist on the left that has a nice id or class you can pull, and then each namespace gets its own class for CSS-colouring: Make sure you browse around the booru for a bit, so you can find all the different classes they use. character/artist/copyright are common, but some sneak in the odd meta/species/rating. Skipping ?/-/+ characters can be a pain if you are lacking a nice tag-text class, in which case you can add a regex String Match to the HTML formula (as I do here, since Gelb offers '?' links for tag definitions) like [^\\?\\-+\\s], which means \"the text includes something other than just '?' or '-' or '+' or whitespace\". md5 hash \u00b6 If you look at the Gelbooru File URL, https://gelbooru.com/images/38/6e/386e12e33726425dbd637e134c4c09b5.jpeg , you may notice the filename is all hexadecimal. It looks like they store their files under a two-deep folder structure, using the first four characters--386e here--as the key. It sure looks like '386e12e33726425dbd637e134c4c09b5' is not random ephemeral garbage! In fact, Gelbooru use the MD5 of the file as the filename. Many storage systems do something like this (hydrus uses SHA256!), so if they don't offer a < meta > tag that explicitly states the md5 or sha1 or whatever, you can sometimes infer it from one of the file links. This screenshot is from the more recent version of hydrus, which has the more powerful 'string processing' system for string transformations. It has an intimidating number of nested dialogs, but we can stay simple for now, with only the one regex substitution step inside a string 'converter': Here we are using the same property=\"og:image\" rule to fetch the File URL, and then we are regexing the hex hash with .*(\\[0-9a-f\\]{32}).* (MD5s are 32 hex characters). We select 'hex' as the encoding type. Hashes require a tiny bit more data handling behind the scenes, but in the Content Parser test page it presents the hash again neatly in English: \"md5 hash: 386e12e33726425dbd637e134c4c09b5\"), meaning everything parsed correct. It presents the hash in hex even if you select the encoding type as base64. If you think you have found a hash string, you should obviously test your theory! The site might not be using the actual MD5 of file bytes, as hydrus does, but instead some proprietary scheme. Download the file and run it through a program like HxD (or hydrus!) to figure out its hashes, and then search the View Source for those hex strings--you might be surprised! Finding the hash is hugely beneficial for a parser--it lets hydrus skip downloading files without ever having seen them before! source time \u00b6 Post/source time lets subscriptions and watchers make more accurate guesses at current file velocity. It is neat to have if you can find it, but: FUCK ALL TIMEZONES FOREVER Gelbooru offers-- < li > Posted: 2017-08-18 19:59:44 < br /> by < a href = \"index.php?page=account&s=profile&uname=jayage5ds\" > jayage5ds </ a ></ li > --so let's see how we can turn that into a Unix timestamp: I find the < li > that starts \"Posted: \" and then decode the date according to the hackery-dackery-doo format from here . %c and %z are unreliable, and attempting timezone adjustments is overall a supervoid that will kill your time for no real benefit--subs and watchers work fine with 12-hour imprecision, so if you have a +0300 or EST in your string, just cut those characters off with another String Transformation. As long as you are getting about the right day, you are fine. source url \u00b6 Source URLs are nice to have if they are high quality. Some boorus only ever offer artist profiles, like https://twitter.com/artistname , whereas we want singular Post URLs that point to other places that host this work. For Gelbooru, you could fetch the Source URL as we did source time, searching for \"Source: \", but they also offer more easily in an edit form: < input type = \"text\" name = \"source\" size = \"40\" id = \"source\" value = \"https://www.deviantart.com/art/Lara-Croft-Artifact-Dive-699335378\" /> This is a bit of a fragile location to parse from--Gelb could change or remove this form at any time, whereas the \"Posted: \" < li > is probably firmer, but I expect I wrote it before I had String Matches in. It works for now, which in this game is often Good Enough\u2122. Also--be careful pulling from text or tooltips rather than an href-like attribute, as whatever is presented to the user may be clipped for longer URLs. Make sure you try your rules on a couple of different pages to make sure you aren't pulling \"https://www.deviantart.com/art/Lara...\" by accident anywhere! summary \u00b6 Phew--all that for a bit of Lara Croft! Thankfully, most sites use similar schemes. Once you are familiar with the basic idea, the only real work is to duplicate an existing parser and edit for differences. Our final parser looks like this: This is overall a decent parser. Some parts of it may fail when Gelbooru update to their next version, but that can be true of even very good parsers with multiple redundancy. For now, hydrus can use this to quickly and efficiently pull content from anything running Gelbooru 0.2.5., and the effort spent now can save millions of combined right-click->save as and manual tag copies in future. If you make something like this and share it about, you'll be doing a good service for those who could never figure it out.","title":"file page example"},{"location":"downloader_parsers_full_example_file_page.html#file_page_example","text":"Let's look at this page: https://gelbooru.com/index.php?page=post&s=view&id=3837615 . What sorts of data are we interested in here? The image URL. The different tags and their namespaces. The secret md5 hash buried in the HTML. The post time. The Deviant Art source URL.","title":"file page example"},{"location":"downloader_parsers_full_example_file_page.html#the_file_url","text":"A tempting strategy for pulling the file URL is to just fetch the src of the embedded < img > tag, but: If the booru also supports videos or flash, you'll have to write separate and likely more complicated rules for < video > and < embed > tags. If the booru shows 'sample' sizes for large images--as this one does!--pulling the src of the image you see won't get the full-size original for large images. If you have an account with the site you are parsing and have clicked the appropriate 'Always view original' setting, you may not see these sorts of sample-size banners! I recommend you log out of/go incognito for sites you are inspecting for hydrus parsing (unless a log-in is required to see content, so the hydrus user will have to set up hydrus-side login to actually use the parser), or you can easily NSFW-gates and other logged-out hurdles. When trying to pin down the right link, if there are no good alternatives, you often have to write several File URL rules with different precedence, saying 'get the \"Click Here to See Full Size\" link at 75' and 'get the embed's \"src\" at 25' and so on to make sure you cover different situations, but as it happens Gelbooru always posts the actual File URL at: < meta property = \"og:image\" content = \"https://gelbooru.com/images/38/6e/386e12e33726425dbd637e134c4c09b5.jpeg\" /> under the < head > < a href = \"https://simg3.gelbooru.com//images/38/6e/386e12e33726425dbd637e134c4c09b5.jpeg\" target = \"_blank\" style = \"font-weight: bold;\" > Original image </ a > which can be found by putting a String Match in the html formula. < meta > with property=\"og:image\" is easy to search for (and they use the same tag for video links as well!). For the Original Image, you can use a String Match like so: Gelbooru uses \"Original Image\" even when they link to webm, which is helpful, but like \"og:image\", it could be changed to 'video' in future. I think I wrote my gelbooru parser before I added String Matches to individual HTML formulae tag rules, so I went with this, which is a bit more cheeky: But it works. Sometimes, just regexing for links that fit the site's CDN is a good bet for finding difficult stuff.","title":"the file url"},{"location":"downloader_parsers_full_example_file_page.html#tags","text":"Most boorus have a taglist on the left that has a nice id or class you can pull, and then each namespace gets its own class for CSS-colouring: Make sure you browse around the booru for a bit, so you can find all the different classes they use. character/artist/copyright are common, but some sneak in the odd meta/species/rating. Skipping ?/-/+ characters can be a pain if you are lacking a nice tag-text class, in which case you can add a regex String Match to the HTML formula (as I do here, since Gelb offers '?' links for tag definitions) like [^\\?\\-+\\s], which means \"the text includes something other than just '?' or '-' or '+' or whitespace\".","title":"tags"},{"location":"downloader_parsers_full_example_file_page.html#md5_hash","text":"If you look at the Gelbooru File URL, https://gelbooru.com/images/38/6e/386e12e33726425dbd637e134c4c09b5.jpeg , you may notice the filename is all hexadecimal. It looks like they store their files under a two-deep folder structure, using the first four characters--386e here--as the key. It sure looks like '386e12e33726425dbd637e134c4c09b5' is not random ephemeral garbage! In fact, Gelbooru use the MD5 of the file as the filename. Many storage systems do something like this (hydrus uses SHA256!), so if they don't offer a < meta > tag that explicitly states the md5 or sha1 or whatever, you can sometimes infer it from one of the file links. This screenshot is from the more recent version of hydrus, which has the more powerful 'string processing' system for string transformations. It has an intimidating number of nested dialogs, but we can stay simple for now, with only the one regex substitution step inside a string 'converter': Here we are using the same property=\"og:image\" rule to fetch the File URL, and then we are regexing the hex hash with .*(\\[0-9a-f\\]{32}).* (MD5s are 32 hex characters). We select 'hex' as the encoding type. Hashes require a tiny bit more data handling behind the scenes, but in the Content Parser test page it presents the hash again neatly in English: \"md5 hash: 386e12e33726425dbd637e134c4c09b5\"), meaning everything parsed correct. It presents the hash in hex even if you select the encoding type as base64. If you think you have found a hash string, you should obviously test your theory! The site might not be using the actual MD5 of file bytes, as hydrus does, but instead some proprietary scheme. Download the file and run it through a program like HxD (or hydrus!) to figure out its hashes, and then search the View Source for those hex strings--you might be surprised! Finding the hash is hugely beneficial for a parser--it lets hydrus skip downloading files without ever having seen them before!","title":"md5 hash"},{"location":"downloader_parsers_full_example_file_page.html#source_time","text":"Post/source time lets subscriptions and watchers make more accurate guesses at current file velocity. It is neat to have if you can find it, but: FUCK ALL TIMEZONES FOREVER Gelbooru offers-- < li > Posted: 2017-08-18 19:59:44 < br /> by < a href = \"index.php?page=account&s=profile&uname=jayage5ds\" > jayage5ds </ a ></ li > --so let's see how we can turn that into a Unix timestamp: I find the < li > that starts \"Posted: \" and then decode the date according to the hackery-dackery-doo format from here . %c and %z are unreliable, and attempting timezone adjustments is overall a supervoid that will kill your time for no real benefit--subs and watchers work fine with 12-hour imprecision, so if you have a +0300 or EST in your string, just cut those characters off with another String Transformation. As long as you are getting about the right day, you are fine.","title":"source time"},{"location":"downloader_parsers_full_example_file_page.html#source_url","text":"Source URLs are nice to have if they are high quality. Some boorus only ever offer artist profiles, like https://twitter.com/artistname , whereas we want singular Post URLs that point to other places that host this work. For Gelbooru, you could fetch the Source URL as we did source time, searching for \"Source: \", but they also offer more easily in an edit form: < input type = \"text\" name = \"source\" size = \"40\" id = \"source\" value = \"https://www.deviantart.com/art/Lara-Croft-Artifact-Dive-699335378\" /> This is a bit of a fragile location to parse from--Gelb could change or remove this form at any time, whereas the \"Posted: \" < li > is probably firmer, but I expect I wrote it before I had String Matches in. It works for now, which in this game is often Good Enough\u2122. Also--be careful pulling from text or tooltips rather than an href-like attribute, as whatever is presented to the user may be clipped for longer URLs. Make sure you try your rules on a couple of different pages to make sure you aren't pulling \"https://www.deviantart.com/art/Lara...\" by accident anywhere!","title":"source url"},{"location":"downloader_parsers_full_example_file_page.html#summary","text":"Phew--all that for a bit of Lara Croft! Thankfully, most sites use similar schemes. Once you are familiar with the basic idea, the only real work is to duplicate an existing parser and edit for differences. Our final parser looks like this: This is overall a decent parser. Some parts of it may fail when Gelbooru update to their next version, but that can be true of even very good parsers with multiple redundancy. For now, hydrus can use this to quickly and efficiently pull content from anything running Gelbooru 0.2.5., and the effort spent now can save millions of combined right-click->save as and manual tag copies in future. If you make something like this and share it about, you'll be doing a good service for those who could never figure it out.","title":"summary"},{"location":"downloader_parsers_full_example_gallery_page.html","text":"gallery page example \u00b6 Caution These guides should roughly follow what comes with the client by default! You might like to have the actual UI open in front of you so you can play around with the rules and try different test parses yourself. Let's look at this page: https://e621.net/post/index/1/rating:safe pokemon We've got 75 thumbnails and a bunch of page URLs at the bottom. first, the main page \u00b6 This is easy. It gets a good name and some example URLs. e621 has some different ways of writing out their queries (and as they use some tags with '/', like 'male/female', this can cause character encoding issues depending on whether the tag is in the path or query!), but we'll put that off for now--we just want to parse some stuff. thumbnail links \u00b6 Most browsers have some good developer tools to let you Inspect Element and get a better view of the HTML DOM. Be warned that this information isn't always the same as View Source (which is what hydrus will get when it downloads the initial HTML document), as some sites load results dynamically with javascript and maybe an internal JSON API call (when sites move to systems that load more thumbs as you scroll down, it makes our job more difficult--in these cases, you'll need to chase down the embedded JSON or figure out what API calls their JS is making--the browser's developer tools can help you here again). Thankfully, e621 is (and most boorus are) fairly static and simple: Every thumb on e621 is a < span > with class=\"thumb\" wrapping an < a > and an < img > . This is a common pattern, and easy to parse: There's no tricky String Matches or String Converters needed--we are just fetching hrefs. Note that the links get relative-matched to example.com for now--I'll probably fix this to apply to one of the example URLs, but rest assured that IRL the parser will 'join' its url up with the appropriate Gallery URL used to fetch the data. Sometimes, you might want to add a rule for search descendents for the first <div> tag with id=content to make sure you are only grabbing thumbs from the main box, whether that is a < div > or a < span > , and whether it has id=\"content \" or class=\"mainBox\" , but unless you know that booru likes to embed \"popular\" or \"favourite\" 'thumbs' up top that will be accidentally caught by a < span > 's with class=\"thumb\" , I recommend you not make your rules overly specific--all it takes is for their dev to change the name of their content box, and your whole parser breaks. I've ditched the < span > requirement in the rule here for exactly that reason-- class=\"thumb\" is necessary and sufficient. Remember that the parsing system allows you to go up ancestors as well as down descendants. If your thumb-box has multiple links--like to see the artist's profile or 'set as favourite'--you can try searching for the < span > s, then down to the < img > , and then up to the nearest < a > . In English, this is saying, \"Find me all the image link URLs in the thumb boxes.\" next gallery page link \u00b6 Most boorus have 'next' or '>>' at the bottom, which can be simple enough, but many have a neat < link href = \"/post/index/2/rating:safe%20pokemon\" rel = \"next\" /> in the < head > . The < head > solution is easier, if available, but my default e621 parser happens to pursue the 'paginator': As it happens, e621 also apply the rel=\"next\" attribute to their \"Next >>\" links, which makes it all that easier for us to find. Sometimes there is no \"next\" id or class, and you'll want to add a String Match to your html formula to test for a string value of '>>' or whatever it is. A good trick is to View Source and then search for the critical /post/index/2/ phrase you are looking for--you might find what you want in a < link > tag you didn't expect or even buried in a hidden 'share to tumblr' button. < form > s for reporting or commenting on content are another good place to find content ids. Note that this finds two URLs. e621 apply the rel=\"next\" to both the \"2\" link and the \"Next >>\" one. The download engine merges the parser's dupes, so don't worry if you end up parsing both the 'top' and 'bottom' next page links, or if you use multiple rules to parse the same data in different ways. summary \u00b6 With those two rules, we are done. Gallery parsers are nice and simple.","title":"gallery page example"},{"location":"downloader_parsers_full_example_gallery_page.html#gallery_page_example","text":"Caution These guides should roughly follow what comes with the client by default! You might like to have the actual UI open in front of you so you can play around with the rules and try different test parses yourself. Let's look at this page: https://e621.net/post/index/1/rating:safe pokemon We've got 75 thumbnails and a bunch of page URLs at the bottom.","title":"gallery page example"},{"location":"downloader_parsers_full_example_gallery_page.html#main_page","text":"This is easy. It gets a good name and some example URLs. e621 has some different ways of writing out their queries (and as they use some tags with '/', like 'male/female', this can cause character encoding issues depending on whether the tag is in the path or query!), but we'll put that off for now--we just want to parse some stuff.","title":"first, the main page"},{"location":"downloader_parsers_full_example_gallery_page.html#thumbnail_urls","text":"Most browsers have some good developer tools to let you Inspect Element and get a better view of the HTML DOM. Be warned that this information isn't always the same as View Source (which is what hydrus will get when it downloads the initial HTML document), as some sites load results dynamically with javascript and maybe an internal JSON API call (when sites move to systems that load more thumbs as you scroll down, it makes our job more difficult--in these cases, you'll need to chase down the embedded JSON or figure out what API calls their JS is making--the browser's developer tools can help you here again). Thankfully, e621 is (and most boorus are) fairly static and simple: Every thumb on e621 is a < span > with class=\"thumb\" wrapping an < a > and an < img > . This is a common pattern, and easy to parse: There's no tricky String Matches or String Converters needed--we are just fetching hrefs. Note that the links get relative-matched to example.com for now--I'll probably fix this to apply to one of the example URLs, but rest assured that IRL the parser will 'join' its url up with the appropriate Gallery URL used to fetch the data. Sometimes, you might want to add a rule for search descendents for the first <div> tag with id=content to make sure you are only grabbing thumbs from the main box, whether that is a < div > or a < span > , and whether it has id=\"content \" or class=\"mainBox\" , but unless you know that booru likes to embed \"popular\" or \"favourite\" 'thumbs' up top that will be accidentally caught by a < span > 's with class=\"thumb\" , I recommend you not make your rules overly specific--all it takes is for their dev to change the name of their content box, and your whole parser breaks. I've ditched the < span > requirement in the rule here for exactly that reason-- class=\"thumb\" is necessary and sufficient. Remember that the parsing system allows you to go up ancestors as well as down descendants. If your thumb-box has multiple links--like to see the artist's profile or 'set as favourite'--you can try searching for the < span > s, then down to the < img > , and then up to the nearest < a > . In English, this is saying, \"Find me all the image link URLs in the thumb boxes.\"","title":"thumbnail links"},{"location":"downloader_parsers_full_example_gallery_page.html#next_gallery_url","text":"Most boorus have 'next' or '>>' at the bottom, which can be simple enough, but many have a neat < link href = \"/post/index/2/rating:safe%20pokemon\" rel = \"next\" /> in the < head > . The < head > solution is easier, if available, but my default e621 parser happens to pursue the 'paginator': As it happens, e621 also apply the rel=\"next\" attribute to their \"Next >>\" links, which makes it all that easier for us to find. Sometimes there is no \"next\" id or class, and you'll want to add a String Match to your html formula to test for a string value of '>>' or whatever it is. A good trick is to View Source and then search for the critical /post/index/2/ phrase you are looking for--you might find what you want in a < link > tag you didn't expect or even buried in a hidden 'share to tumblr' button. < form > s for reporting or commenting on content are another good place to find content ids. Note that this finds two URLs. e621 apply the rel=\"next\" to both the \"2\" link and the \"Next >>\" one. The download engine merges the parser's dupes, so don't worry if you end up parsing both the 'top' and 'bottom' next page links, or if you use multiple rules to parse the same data in different ways.","title":"next gallery page link"},{"location":"downloader_parsers_full_example_gallery_page.html#summary","text":"With those two rules, we are done. Gallery parsers are nice and simple.","title":"summary"},{"location":"downloader_parsers_page_parsers.html","text":"Page Parsers \u00b6 We can now produce individual rows of rich metadata. To arrange them all into a useful structure, we will use Page Parsers. The Page Parser is the top level parsing object. It takes a single document and produces a list--or a list of lists--of metadata. Here's the main UI: Notice that the edit panel has three sub-pages. main \u00b6 Name : Like for content parsers, I recommend you add good names for your parsers. Pre-parsing conversion : If your API source encodes or wraps the data you want to parse, you can do some string transformations here. You won't need to use this very often, but if your source gives the JSON wrapped in javascript (like the old tumblr API), it can be invaluable. Example URLs : Here you should add a list of example URLs the parser works for. This lets the client automatically link this parser up with URL classes for you and any users you share the parser with. content parsers \u00b6 This page is just a simple list: Each content parser here will be applied to the document and returned in this page parser's results list. Like most boorus, e621's File Pages only ever present one file, and they have simple markup, so the solution here was simple. The full contents of that test window are: *** 1 RESULTS BEGIN *** tag: character:krystal tag: creator:s mino930 file url: https://static1.e621.net/data/fc/b6/fcb673ed89241a7b8d87a5dcb3a08af7.jpg tag: anthro tag: black nose tag: blue fur tag: blue hair tag: clothing tag: female tag: fur tag: green eyes tag: hair tag: hair ornament tag: jewelry tag: short hair tag: solo tag: video games tag: white fur tag: series:nintendo tag: series:star fox tag: species:canine tag: species:fox tag: species:mammal *** RESULTS END *** When the client sees this in a downloader context, it will where to download the file and which tags to associate with it based on what the user has chosen in their 'tag import options'. subsidiary page parsers \u00b6 Here be dragons. This was an attempt to make parsing more helpful in certain API situations, but it ended up ugly. I do not recommend you use it, as I will likely scratch the whole thing and replace it with something better one day. It basically splits the page up into pieces that can then be parsed by nested page parsers as separate objects, but the UI and workflow is hell. Afaik, the imageboard API parsers use it, but little/nothing else. If you are really interested, check out how those work and maybe duplicate to figure out your own imageboard parser and/or send me your thoughts on how to separate File URL/timestamp combos better.","title":"Page Parsers"},{"location":"downloader_parsers_page_parsers.html#page_parsers","text":"We can now produce individual rows of rich metadata. To arrange them all into a useful structure, we will use Page Parsers. The Page Parser is the top level parsing object. It takes a single document and produces a list--or a list of lists--of metadata. Here's the main UI: Notice that the edit panel has three sub-pages.","title":"Page Parsers"},{"location":"downloader_parsers_page_parsers.html#main","text":"Name : Like for content parsers, I recommend you add good names for your parsers. Pre-parsing conversion : If your API source encodes or wraps the data you want to parse, you can do some string transformations here. You won't need to use this very often, but if your source gives the JSON wrapped in javascript (like the old tumblr API), it can be invaluable. Example URLs : Here you should add a list of example URLs the parser works for. This lets the client automatically link this parser up with URL classes for you and any users you share the parser with.","title":"main"},{"location":"downloader_parsers_page_parsers.html#content_parsers","text":"This page is just a simple list: Each content parser here will be applied to the document and returned in this page parser's results list. Like most boorus, e621's File Pages only ever present one file, and they have simple markup, so the solution here was simple. The full contents of that test window are: *** 1 RESULTS BEGIN *** tag: character:krystal tag: creator:s mino930 file url: https://static1.e621.net/data/fc/b6/fcb673ed89241a7b8d87a5dcb3a08af7.jpg tag: anthro tag: black nose tag: blue fur tag: blue hair tag: clothing tag: female tag: fur tag: green eyes tag: hair tag: hair ornament tag: jewelry tag: short hair tag: solo tag: video games tag: white fur tag: series:nintendo tag: series:star fox tag: species:canine tag: species:fox tag: species:mammal *** RESULTS END *** When the client sees this in a downloader context, it will where to download the file and which tags to associate with it based on what the user has chosen in their 'tag import options'.","title":"content parsers"},{"location":"downloader_parsers_page_parsers.html#subsidiary_page_parsers","text":"Here be dragons. This was an attempt to make parsing more helpful in certain API situations, but it ended up ugly. I do not recommend you use it, as I will likely scratch the whole thing and replace it with something better one day. It basically splits the page up into pieces that can then be parsed by nested page parsers as separate objects, but the UI and workflow is hell. Afaik, the imageboard API parsers use it, but little/nothing else. If you are really interested, check out how those work and maybe duplicate to figure out your own imageboard parser and/or send me your thoughts on how to separate File URL/timestamp combos better.","title":"subsidiary page parsers"},{"location":"downloader_sharing.html","text":"Sharing Downloaders \u00b6 If you are working with users who also understand the downloader system, you can swap your GUGs, URL Classes, and Parsers separately using the import/export buttons on the relevant dialogs, which work in pngs and clipboard text. But if you want to share conveniently, and with users who are not familiar with the different downloader objects, you can package everything into a single easy-import png as per here . The dialog to use is network->downloader definitions->export downloaders : It isn't difficult. Essentially, you want to bundle enough objects to make one or more 'working' GUGs at the end. I recommend you start by just hitting 'add gug', which--using Example URLs--will attempt to figure out everything you need by itself. This all works on Example URLs and some domain guesswork, so make sure your url classes are good and the parsers have correct Example URLs as well. If they don't, they won't all link up neatly for the end user. If part of your downloader is on a different domain to the GUGs and Gallery URLs, then you'll have to add them manually. Just start with 'add gug' and see if it looks like enough. Once you have the necessary and sufficient objects added, you can export to png. You'll get a similar 'does this look right?' summary as what the end-user will see, just to check you have everything in order and the domains all correct. If that is good, then make sure to give the png a sensible filename and embellish the title and description if you need to. You can then send/post that png wherever, and any regular user will be able to use your work.","title":"Sharing"},{"location":"downloader_sharing.html#sharing_downloaders","text":"If you are working with users who also understand the downloader system, you can swap your GUGs, URL Classes, and Parsers separately using the import/export buttons on the relevant dialogs, which work in pngs and clipboard text. But if you want to share conveniently, and with users who are not familiar with the different downloader objects, you can package everything into a single easy-import png as per here . The dialog to use is network->downloader definitions->export downloaders : It isn't difficult. Essentially, you want to bundle enough objects to make one or more 'working' GUGs at the end. I recommend you start by just hitting 'add gug', which--using Example URLs--will attempt to figure out everything you need by itself. This all works on Example URLs and some domain guesswork, so make sure your url classes are good and the parsers have correct Example URLs as well. If they don't, they won't all link up neatly for the end user. If part of your downloader is on a different domain to the GUGs and Gallery URLs, then you'll have to add them manually. Just start with 'add gug' and see if it looks like enough. Once you have the necessary and sufficient objects added, you can export to png. You'll get a similar 'does this look right?' summary as what the end-user will see, just to check you have everything in order and the domains all correct. If that is good, then make sure to give the png a sensible filename and embellish the title and description if you need to. You can then send/post that png wherever, and any regular user will be able to use your work.","title":"Sharing Downloaders"},{"location":"downloader_url_classes.html","text":"URL Classes \u00b6 The fundamental connective tissue of the downloader system is the 'URL Class'. This object identifies and normalises URLs and links them to other components. Whenever the client handles a URL, it tries to match it to a URL Class to figure out what to do. the types of url \u00b6 For hydrus, an URL is useful if it is one of: File URL This returns the full, raw media file with no HTML wrapper. They typically end in a filename like http://safebooru.org//images/2333/cab1516a7eecf13c462615120ecf781116265f17.jpg , but sometimes they have a more complicated fetch command ending like 'file.php?id=123456' or '/post/content/123456'. These URLs are remembered for the file in the 'known urls' list, so if the client happens to encounter the same URL in future, it can determine whether it can skip the download because the file is already in the database or has previously been deleted. It is not important that File URLs be matched by a URL Class. File URL is considered the 'default', so if the client finds no match, it will assume the URL is a file and try to download and import the result. You might want to particularly specify them if you want to present them in the media viewer or discover File URLs are being confused for Post URLs or something. Post URL This typically return some HTML that contains a File URL and metadata such as tags and post time. They sometimes present multiple sizes (like 'sample' vs 'full size') of the file or even different formats (like 'ugoira' vs 'webm'). The Post URL for the file above, http://safebooru.org/index.php?page=post&s=view&id=2429668 has this 'sample' presentation. Finding the best File URL in these cases can be tricky! This URL is also saved to 'known urls' and will usually be similarly skipped if it has previously been downloaded. It will also appear in the media viewer as a clickable link. Gallery URL This presents a list of Post URLs or File URLs. They often also present a 'next page' URL. It could be a page like http://safebooru.org/index.php?page=post&s=list&tags=yorha_no._2_type_b&pid=0 or an API URL like http://safebooru.org/index.php?page=dapi&s=post&tags=yorha_no._2_type_b&q=index&pid=0 . Watchable URL This is the same as a Gallery URL but represents an ephemeral page that receives new files much faster than a gallery but will soon 'die' and be deleted. For our purposes, this typically means imageboard threads. the components of a url \u00b6 As far as we are concerned, a URL string has four parts: Scheme: http or https Location/Domain: safebooru.org or i.4cdn.org or cdn002.somebooru.net Path Components: index.php or tesla/res/7518.json or pictures/user/daruak/page/2 or art/Commission-animation-Elsa-and-Anna-541820782 Query Parameters: page=post&s=list&tags=yorha_no._2_type_b&pid=40 or page=post&s=view&id=2429668 So, let's look at the 'edit url class' panel, which is found under network->manage url classes : A TBIB File Page like https://tbib.org/index.php?page=post&s=view&id=6391256 is a Post URL. Let's look at the metadata first: Name and type Like with GUGs, we should set a good unambiguous name so the client can clearly summarise this url to the user. 'tbib file page' is good. This is a Post URL, so we set the 'post url' type. Association logic All boorus and most sites only present one file per page, but some sites present multiple files on one page, usually several pages in a series/comic, as with pixiv. Danbooru-style thumbnail links to 'this file has a post parent' do not count here--I mean that a single URL embeds multiple full-size images, either with shared or separate tags. It is very important to the hydrus client's downloader logic (making decisions about whether it has previously visited a URL, so whether to skip checking it again) that if a site can present multiple files on a single page that 'can produce multiple files' is checked. Related is the idea of whether a 'known url' should be associated. Typically, this should be checked for Post and File URLs, which are fixed, and unchecked for Gallery and Watchable URLs, which are ephemeral and give different results from day to day. There are some unusual exceptions, so give it a brief thought--but if you have no special reason, leave this as the default for the url type. And now, for matching the string itself, let's revisit our four components: Scheme TBIB supports http and https, so I have set the 'preferred' scheme to https. Any 'http' TBIB URL a user inputs will be automatically converted to https. Location/Domain For Post URLs, the domain is always \"tbib.org\". The 'allow' and 'keep' subdomains checkboxes let you determine if a URL with \"artistname.artsite.com\" will match a URL Class with \"artsite.com\" domain and if that subdomain should be remembered going forward. Most sites do not host content on subdomains, so you can usually leave 'match' unchecked. The 'keep' option (which is only available if 'keep' is checked) is more subtle, only useful for rare cases, and unless you have a special reason, you should leave it checked. (For keep: In cases where a site farms out File URLs to CDN servers on subdomains--like randomly serving a mirror of \"https://muhbooru.org/file/123456\" on \"https://srv2.muhbooru.org/file/123456\"--and removing the subdomain still gives a valid URL, you may not wish to keep the subdomain.) Since TBIB does not use subdomains, these options do not matter--we can leave both unchecked. 'www' and 'www2' and similar subdomains are automatically matched. Don't worry about them. Path Components TBIB just uses a single \"index.php\" on the root directory, so the path is not complicated. Were it longer (like \"gallery/cgi/index.php\", we would add more (\"gallery\" and \"cgi\"), and since the path of a URL has a strict order, we would need to arrange the items in the listbox there so they were sorted correctly. Query Parameters TBIB's index.php takes many query parameters to render different page types. Note that the Post URL uses \"s=view\", while TBIB Gallery URLs use \"s=list\". In any case, for a Post URL, \"id\", \"page\", and \"s\" are necessary and sufficient. string matches \u00b6 As you edit these components, you will be presented with the Edit String Match Panel: This lets you set the type of string that will be valid for that component. If a given path or query component does not match the rules given here, the URL will not match the URL Class. Most of the time you will probably want to set 'fixed characters' of something like \"post\" or \"index.php\", but if the component you are editing is more complicated and could have a range of different valid values, you can specify just numbers or letters or even a regex pattern. If you try to do something complicated, experiment with the 'example string' entry to make sure you have it set how you think. Don't go overboard with this stuff, though--most sites do not have super-fine distinctions between their different URL types, and hydrus users will not be dropping user account or logout pages or whatever on the client, so you can be fairly liberal with the rules. how do they match, exactly? \u00b6 This URL Class will be assigned to any URL that matches the location, path, and query. Missing path compontent or query parameters in the URL will invalidate the match but additonal ones will not! For instance, given: URL A: https://8ch.net/tv/res/1002432.html URL B: https://8ch.net/tv/res URL C: https://8ch.net/tv/res/1002432 URL D: https://8ch.net/tv/res/1002432.json URL Class that looks for \"(characters)/res/(numbers).html\" for the path Only URL A will match And: URL A: https://boards.4chan.org/m/thread/16086187 URL B: https://boards.4chan.org/m/thread/16086187/ssg-super-sentai-general-651 URL Class that looks for \"(characters)/thread/(numbers)\" for the path Both URL A and B will match And: URL A: https://www.pixiv.net/member_illust.php?mode=medium&illust_id=66476204 URL B: https://www.pixiv.net/member_illust.php?mode=medium&illust_id=66476204&lang=jp URL C: https://www.pixiv.net/member_illust.php?mode=medium URL Class that looks for \"illust_id=(numbers)\" in the query Both URL A and B will match, URL C will not If multiple URL Classes match a URL, the client will try to assign the most 'complicated' one, with the most path components and then query parameters. Given two example URLs and URL Classes: URL A: https://somebooru.com/post/123456 URL B: https://somebooru.com/post/123456/manga_subpage/2 URL Class A that looks for \"post/(number)\" for the path URL Class B that looks for \"post/(number)/manga_subpage/(number)\" for the path URL A will match URL Class A but not URL Class B and so will receive A. URL B will match both and receive URL Class B as it is more complicated. This situation is not common, but when it does pop up, it can be a pain. It is usually a good idea to match exactly what you need--no more, no less. normalising urls \u00b6 Different URLs can give the same content. The http and https versions of a URL are typically the same, and: https://gelbooru.com/index.php?page=post&s=view&id=3767497 gives the same as: https://gelbooru.com/index.php?id=3767497&page=post&s=view And: https://e621.net/post/show/1421754/abstract_background-animal_humanoid-blush-brown_ey is the same as: https://e621.net/post/show/1421754 is the same as: https://e621.net/post/show/1421754/help_computer-made_up_tags-REEEEEEEE Since we are in the business of storing and comparing URLs, we want to 'normalise' them to a single comparable beautiful value. You see a preview of this normalisation on the edit panel. Normalisation happens to all URLs that enter the program. Note that in e621's case (and for many other sites!), that text after the id is purely decoration. It can change when the file's tags change, so if we want to compare today's URLs with those we saw a month ago, we'd rather just be without it. On normalisation, all URLs will get the preferred http/https switch, and their query parameters will be alphabetised. File and Post URLs will also cull out any surplus path or query components. This wouldn't affect our TBIB example above, but it will clip the e621 example down to that 'bare' id URL, and it will take any surplus 'lang=en' or 'browser=netscape_24.11' garbage off the query text as well. URLs that are not associated and saved and compared (i.e. normal Gallery and Watchable URLs) are not culled of unmatched path components or query parameters, which can sometimes be useful if you want to match (and keep intact) gallery URLs that might or might not include an important 'sort=desc' type of parameter. Since File and Post URLs will do this culling, be careful that you not leave out anything important in your rules. Make sure what you have is both necessary (nothing can be removed and still keep it valid) and sufficient (no more needs to be added to make it valid). It is a good idea to try pasting the 'normalised' version of the example URL into your browser, just to check it still works. 'default' values \u00b6 Some sites present the first page of a search like this: https://danbooru.donmai.us/posts?tags=skirt But the second page is: https://danbooru.donmai.us/posts?tags=skirt&page=2 Another example is: https://www.hentai-foundry.com/pictures/user/Mister69M https://www.hentai-foundry.com/pictures/user/Mister69M/page/2 What happened to 'page=1' and '/page/1'? Adding those '1' values in works fine! Many sites, when an index is absent, will secretly imply an appropriate 0 or 1. This looks pretty to users looking at a browser address bar, but it can be a pain for us, who want to match both styles to one URL Class. It would be nice if we could recognise the 'bare' initial URL and fill in the '1' values to coerce it to the explicit, automation-friendly format. Defaults to the rescue: After you set a path component or query parameter String Match, you will be asked for an optional 'default' value. You won't want to set one most of the time, but for Gallery URLs, it can be hugely useful--see how the normalisation process automatically fills in the missing path component with the default! There are plenty of examples in the default Gallery URLs of this, so check them out. Most sites use page indices starting at '1', but Gelbooru-style imageboards use 'pid=0' file index (and often move forward 42, so the next pages will be 'pid=42', 'pid=84', and so on, although others use deltas of 20 or 40). can we predict the next gallery page? \u00b6 Now we can harmonise gallery urls to a single format, we can predict the next gallery page! If, say, the third path component or 'page' query parameter is always a number referring to page, you can select this under the 'next gallery page' section and set the delta to change it by. The 'next gallery page url' section will be automatically filled in. This value will be consulted if the parser cannot find a 'next gallery page url' from the page content. It is neat to set this up, but I only recommend it if you actually cannot reliably parse a next gallery page url from the HTML later in the process. It is neater to have searches stop naturally because the parser said 'no more gallery pages' than to have hydrus always one page beyond and end every single search on an uglier 'No results found' or 404 result. Unfortunately, some sites will either not produce an easily parsable next page link or randomly just not include it due to some issue on their end (Gelbooru is a funny example of this). Also, APIs will often have a kind of 'start=200&num=50', 'start=250&num=50' progression but not include that state in the XML or JSON they return. These cases require the automatic next gallery page rules (check out Artstation and tumblr api gallery page URL Classes in the defaults for examples of this). how do we link to APIs? \u00b6 If you know that a URL has an API backend, you can tell the client to use that API URL when it fetches data. The API URL needs its own URL Class. To define the relationship, click the \"String Converter\" button, which gives you this: You may have seen this panel elsewhere. It lets you convert a string to another over a number of transformation steps. The steps can be as simple as adding or removing some characters or applying a full regex substitution. For API URLs, you are mostly looking to isolate some unique identifying data (\"m/thread/16086187\" in this case) and then substituting that into the new API path. It is worth testing this with several different examples! When the client links regular URLs to API URLs like this, it will still associate the human-pretty regular URL when it needs to display to the user and record 'known urls' and so on. The API is just a quick lookup when it actually fetches and parses the respective data.","title":"URL Classes"},{"location":"downloader_url_classes.html#url_classes","text":"The fundamental connective tissue of the downloader system is the 'URL Class'. This object identifies and normalises URLs and links them to other components. Whenever the client handles a URL, it tries to match it to a URL Class to figure out what to do.","title":"URL Classes"},{"location":"downloader_url_classes.html#url_types","text":"For hydrus, an URL is useful if it is one of: File URL This returns the full, raw media file with no HTML wrapper. They typically end in a filename like http://safebooru.org//images/2333/cab1516a7eecf13c462615120ecf781116265f17.jpg , but sometimes they have a more complicated fetch command ending like 'file.php?id=123456' or '/post/content/123456'. These URLs are remembered for the file in the 'known urls' list, so if the client happens to encounter the same URL in future, it can determine whether it can skip the download because the file is already in the database or has previously been deleted. It is not important that File URLs be matched by a URL Class. File URL is considered the 'default', so if the client finds no match, it will assume the URL is a file and try to download and import the result. You might want to particularly specify them if you want to present them in the media viewer or discover File URLs are being confused for Post URLs or something. Post URL This typically return some HTML that contains a File URL and metadata such as tags and post time. They sometimes present multiple sizes (like 'sample' vs 'full size') of the file or even different formats (like 'ugoira' vs 'webm'). The Post URL for the file above, http://safebooru.org/index.php?page=post&s=view&id=2429668 has this 'sample' presentation. Finding the best File URL in these cases can be tricky! This URL is also saved to 'known urls' and will usually be similarly skipped if it has previously been downloaded. It will also appear in the media viewer as a clickable link. Gallery URL This presents a list of Post URLs or File URLs. They often also present a 'next page' URL. It could be a page like http://safebooru.org/index.php?page=post&s=list&tags=yorha_no._2_type_b&pid=0 or an API URL like http://safebooru.org/index.php?page=dapi&s=post&tags=yorha_no._2_type_b&q=index&pid=0 . Watchable URL This is the same as a Gallery URL but represents an ephemeral page that receives new files much faster than a gallery but will soon 'die' and be deleted. For our purposes, this typically means imageboard threads.","title":"the types of url"},{"location":"downloader_url_classes.html#url_components","text":"As far as we are concerned, a URL string has four parts: Scheme: http or https Location/Domain: safebooru.org or i.4cdn.org or cdn002.somebooru.net Path Components: index.php or tesla/res/7518.json or pictures/user/daruak/page/2 or art/Commission-animation-Elsa-and-Anna-541820782 Query Parameters: page=post&s=list&tags=yorha_no._2_type_b&pid=40 or page=post&s=view&id=2429668 So, let's look at the 'edit url class' panel, which is found under network->manage url classes : A TBIB File Page like https://tbib.org/index.php?page=post&s=view&id=6391256 is a Post URL. Let's look at the metadata first: Name and type Like with GUGs, we should set a good unambiguous name so the client can clearly summarise this url to the user. 'tbib file page' is good. This is a Post URL, so we set the 'post url' type. Association logic All boorus and most sites only present one file per page, but some sites present multiple files on one page, usually several pages in a series/comic, as with pixiv. Danbooru-style thumbnail links to 'this file has a post parent' do not count here--I mean that a single URL embeds multiple full-size images, either with shared or separate tags. It is very important to the hydrus client's downloader logic (making decisions about whether it has previously visited a URL, so whether to skip checking it again) that if a site can present multiple files on a single page that 'can produce multiple files' is checked. Related is the idea of whether a 'known url' should be associated. Typically, this should be checked for Post and File URLs, which are fixed, and unchecked for Gallery and Watchable URLs, which are ephemeral and give different results from day to day. There are some unusual exceptions, so give it a brief thought--but if you have no special reason, leave this as the default for the url type. And now, for matching the string itself, let's revisit our four components: Scheme TBIB supports http and https, so I have set the 'preferred' scheme to https. Any 'http' TBIB URL a user inputs will be automatically converted to https. Location/Domain For Post URLs, the domain is always \"tbib.org\". The 'allow' and 'keep' subdomains checkboxes let you determine if a URL with \"artistname.artsite.com\" will match a URL Class with \"artsite.com\" domain and if that subdomain should be remembered going forward. Most sites do not host content on subdomains, so you can usually leave 'match' unchecked. The 'keep' option (which is only available if 'keep' is checked) is more subtle, only useful for rare cases, and unless you have a special reason, you should leave it checked. (For keep: In cases where a site farms out File URLs to CDN servers on subdomains--like randomly serving a mirror of \"https://muhbooru.org/file/123456\" on \"https://srv2.muhbooru.org/file/123456\"--and removing the subdomain still gives a valid URL, you may not wish to keep the subdomain.) Since TBIB does not use subdomains, these options do not matter--we can leave both unchecked. 'www' and 'www2' and similar subdomains are automatically matched. Don't worry about them. Path Components TBIB just uses a single \"index.php\" on the root directory, so the path is not complicated. Were it longer (like \"gallery/cgi/index.php\", we would add more (\"gallery\" and \"cgi\"), and since the path of a URL has a strict order, we would need to arrange the items in the listbox there so they were sorted correctly. Query Parameters TBIB's index.php takes many query parameters to render different page types. Note that the Post URL uses \"s=view\", while TBIB Gallery URLs use \"s=list\". In any case, for a Post URL, \"id\", \"page\", and \"s\" are necessary and sufficient.","title":"the components of a url"},{"location":"downloader_url_classes.html#string_matches","text":"As you edit these components, you will be presented with the Edit String Match Panel: This lets you set the type of string that will be valid for that component. If a given path or query component does not match the rules given here, the URL will not match the URL Class. Most of the time you will probably want to set 'fixed characters' of something like \"post\" or \"index.php\", but if the component you are editing is more complicated and could have a range of different valid values, you can specify just numbers or letters or even a regex pattern. If you try to do something complicated, experiment with the 'example string' entry to make sure you have it set how you think. Don't go overboard with this stuff, though--most sites do not have super-fine distinctions between their different URL types, and hydrus users will not be dropping user account or logout pages or whatever on the client, so you can be fairly liberal with the rules.","title":"string matches"},{"location":"downloader_url_classes.html#match_details","text":"This URL Class will be assigned to any URL that matches the location, path, and query. Missing path compontent or query parameters in the URL will invalidate the match but additonal ones will not! For instance, given: URL A: https://8ch.net/tv/res/1002432.html URL B: https://8ch.net/tv/res URL C: https://8ch.net/tv/res/1002432 URL D: https://8ch.net/tv/res/1002432.json URL Class that looks for \"(characters)/res/(numbers).html\" for the path Only URL A will match And: URL A: https://boards.4chan.org/m/thread/16086187 URL B: https://boards.4chan.org/m/thread/16086187/ssg-super-sentai-general-651 URL Class that looks for \"(characters)/thread/(numbers)\" for the path Both URL A and B will match And: URL A: https://www.pixiv.net/member_illust.php?mode=medium&illust_id=66476204 URL B: https://www.pixiv.net/member_illust.php?mode=medium&illust_id=66476204&lang=jp URL C: https://www.pixiv.net/member_illust.php?mode=medium URL Class that looks for \"illust_id=(numbers)\" in the query Both URL A and B will match, URL C will not If multiple URL Classes match a URL, the client will try to assign the most 'complicated' one, with the most path components and then query parameters. Given two example URLs and URL Classes: URL A: https://somebooru.com/post/123456 URL B: https://somebooru.com/post/123456/manga_subpage/2 URL Class A that looks for \"post/(number)\" for the path URL Class B that looks for \"post/(number)/manga_subpage/(number)\" for the path URL A will match URL Class A but not URL Class B and so will receive A. URL B will match both and receive URL Class B as it is more complicated. This situation is not common, but when it does pop up, it can be a pain. It is usually a good idea to match exactly what you need--no more, no less.","title":"how do they match, exactly?"},{"location":"downloader_url_classes.html#url_normalisation","text":"Different URLs can give the same content. The http and https versions of a URL are typically the same, and: https://gelbooru.com/index.php?page=post&s=view&id=3767497 gives the same as: https://gelbooru.com/index.php?id=3767497&page=post&s=view And: https://e621.net/post/show/1421754/abstract_background-animal_humanoid-blush-brown_ey is the same as: https://e621.net/post/show/1421754 is the same as: https://e621.net/post/show/1421754/help_computer-made_up_tags-REEEEEEEE Since we are in the business of storing and comparing URLs, we want to 'normalise' them to a single comparable beautiful value. You see a preview of this normalisation on the edit panel. Normalisation happens to all URLs that enter the program. Note that in e621's case (and for many other sites!), that text after the id is purely decoration. It can change when the file's tags change, so if we want to compare today's URLs with those we saw a month ago, we'd rather just be without it. On normalisation, all URLs will get the preferred http/https switch, and their query parameters will be alphabetised. File and Post URLs will also cull out any surplus path or query components. This wouldn't affect our TBIB example above, but it will clip the e621 example down to that 'bare' id URL, and it will take any surplus 'lang=en' or 'browser=netscape_24.11' garbage off the query text as well. URLs that are not associated and saved and compared (i.e. normal Gallery and Watchable URLs) are not culled of unmatched path components or query parameters, which can sometimes be useful if you want to match (and keep intact) gallery URLs that might or might not include an important 'sort=desc' type of parameter. Since File and Post URLs will do this culling, be careful that you not leave out anything important in your rules. Make sure what you have is both necessary (nothing can be removed and still keep it valid) and sufficient (no more needs to be added to make it valid). It is a good idea to try pasting the 'normalised' version of the example URL into your browser, just to check it still works.","title":"normalising urls"},{"location":"downloader_url_classes.html#default_values","text":"Some sites present the first page of a search like this: https://danbooru.donmai.us/posts?tags=skirt But the second page is: https://danbooru.donmai.us/posts?tags=skirt&page=2 Another example is: https://www.hentai-foundry.com/pictures/user/Mister69M https://www.hentai-foundry.com/pictures/user/Mister69M/page/2 What happened to 'page=1' and '/page/1'? Adding those '1' values in works fine! Many sites, when an index is absent, will secretly imply an appropriate 0 or 1. This looks pretty to users looking at a browser address bar, but it can be a pain for us, who want to match both styles to one URL Class. It would be nice if we could recognise the 'bare' initial URL and fill in the '1' values to coerce it to the explicit, automation-friendly format. Defaults to the rescue: After you set a path component or query parameter String Match, you will be asked for an optional 'default' value. You won't want to set one most of the time, but for Gallery URLs, it can be hugely useful--see how the normalisation process automatically fills in the missing path component with the default! There are plenty of examples in the default Gallery URLs of this, so check them out. Most sites use page indices starting at '1', but Gelbooru-style imageboards use 'pid=0' file index (and often move forward 42, so the next pages will be 'pid=42', 'pid=84', and so on, although others use deltas of 20 or 40).","title":"'default' values"},{"location":"downloader_url_classes.html#next_gallery_page_prediction","text":"Now we can harmonise gallery urls to a single format, we can predict the next gallery page! If, say, the third path component or 'page' query parameter is always a number referring to page, you can select this under the 'next gallery page' section and set the delta to change it by. The 'next gallery page url' section will be automatically filled in. This value will be consulted if the parser cannot find a 'next gallery page url' from the page content. It is neat to set this up, but I only recommend it if you actually cannot reliably parse a next gallery page url from the HTML later in the process. It is neater to have searches stop naturally because the parser said 'no more gallery pages' than to have hydrus always one page beyond and end every single search on an uglier 'No results found' or 404 result. Unfortunately, some sites will either not produce an easily parsable next page link or randomly just not include it due to some issue on their end (Gelbooru is a funny example of this). Also, APIs will often have a kind of 'start=200&num=50', 'start=250&num=50' progression but not include that state in the XML or JSON they return. These cases require the automatic next gallery page rules (check out Artstation and tumblr api gallery page URL Classes in the defaults for examples of this).","title":"can we predict the next gallery page?"},{"location":"downloader_url_classes.html#api_links","text":"If you know that a URL has an API backend, you can tell the client to use that API URL when it fetches data. The API URL needs its own URL Class. To define the relationship, click the \"String Converter\" button, which gives you this: You may have seen this panel elsewhere. It lets you convert a string to another over a number of transformation steps. The steps can be as simple as adding or removing some characters or applying a full regex substitution. For API URLs, you are mostly looking to isolate some unique identifying data (\"m/thread/16086187\" in this case) and then substituting that into the new API path. It is worth testing this with several different examples! When the client links regular URLs to API URLs like this, it will still associate the human-pretty regular URL when it needs to display to the user and record 'known urls' and so on. The API is just a quick lookup when it actually fetches and parses the respective data.","title":"how do we link to APIs?"},{"location":"duplicates.html","text":"duplicates \u00b6 As files are shared on the internet, they are often resized, cropped, converted to a different format, altered by the original or a new artist, or turned into a template and reinterpreted over and over and over. Even if you have a very restrictive importing workflow, your client is almost certainly going to get some duplicates . Some will be interesting alternate versions that you want to keep, and others will be thumbnails and other low-quality garbage you accidentally imported and would rather delete. Along the way, it would be nice to merge your ratings and tags to the better files so you don't lose any work. Finding and processing duplicates within a large collection is impossible to do by hand, so I have written a system to do the heavy lifting for you. It currently works on still images, but an extension for gifs and video is planned. Hydrus finds potential duplicates using a search algorithm that compares images by their shape. Once these pairs of potentials are found, they are presented to you through a filter like the archive/delete filter to determine their exact relationship and if you want to make a further action, such as deleting the 'worse' file of a pair. All of your decisions build up in the database to form logically consistent groups of duplicates and 'alternate' relationships that can be used to infer future information. For instance, if you say that file A is a duplicate of B and B is a duplicate of C, A and C are automatically recognised as duplicates as well. This all starts on-- the duplicates processing page \u00b6 On the normal 'new page' selection window, hit special->duplicates processing . This will open this page: Let's go to the preparation page first: The 'similar shape' algorithm works on distance . Two files with 0 distance are likely exact matches, such as resizes of the same file or lower/higher quality jpegs, whereas those with distance 4 tend to be to be hairstyle or costume changes. You will be starting on distance 0 and not expect to ever go above 4 or 8 or so. Going too high increases the danger of being overwhelmed by false positives. If you are interested, the current version of this system uses a 64-bit phash to represent the image shape and a VPTree to search different files' phashes' relative hamming distance . I expect to extend it in future with multiple phash generation (flips, rotations, and 'interesting' image crops and video frames) and most-common colour comparisons. Searching for duplicates is fairly fast per file, but with a large client with hundreds of thousands of files, the total CPU time adds up. You can do a little manual searching if you like, but once you are all settled here, I recommend you hit the cog icon on the preparation page and let hydrus do this page's catch-up search work in your regular maintenance time. It'll swiftly catch up and keep you up to date without you even thinking about it. Start searching on the 'exact match' search distance of 0. It is generally easier and more valuable to get exact duplicates out of the way first. Once you have some files searched, you should see a potential pair count appear in the 'filtering' page. the filtering page \u00b6 Processing duplicates can be real trudge-work if you do not set up a workflow you enjoy. It is a little slower than the archive/delete filter, and sometimes takes a bit more cognitive work. For many users, it is a good task to do while listening to a podcast or having a video going on another screen. If you have a client with tens of thousands of files, you will likely have thousands of potential pairs. This can be intimidating, but do not worry--due to the A, B, C logical inferrences as above, you will not have to go through every single one. The more information you put into the system, the faster the number will drop. The filter has a regular file search interface attached. As you can see, it defaults to system:everything , but you can limit what files you will be working on simply by adding new search predicates. You might like to only work on files in your archive (i.e. that you know you care about to begin with), for instance. You can choose whether both files of the pair should match the search, or just one. 'creator:' tags work very well at cutting the search domain to something more manageable and consistent--try your favourite creator! If you would like an example from the current search domain, hit the 'show some random potential pairs' button, and it will show two or more files that seem related. It is often interesting and surprising to see what it finds! The action buttons below allow for quick processing of these pairs and groups when convenient (particularly for large cg sets with 100+ alternates), but I recommend you leave these alone until you know the system better. When you are ready, launch the filter. the duplicates filter \u00b6 We have not set up your duplicate 'merge' options yet, so do not get too into this. For this first time, just poke around, make some pretend choices, and then cancel out and choose to forget them. Like the archive/delete filter, this uses quick mouse-clicks, keyboard shortcuts, or button clicks to action pairs. It presents two files at a time, labelled A and B, which you can quickly switch between just as in the normal media viewer. As soon as you action them, the next pair is shown. The two files will have their current zoom-size locked so they stay the same size (and in the same position) as you switch between them. Scroll your mouse wheel a couple of times and see if any obvious differences stand out. Please note the hydrus media viewer does not currently work well with large resolutions at high zoom (it gets laggy and may have memory issues). Don't zoom in to 1600% and try to look at jpeg artifact differences on very large files, as this is simply not well supported yet. The hover window on the right also presents a number of 'comparison statements' to help you make your decision. Green statements mean this current file is probably 'better', and red the opposite. Larger, older, higher-quality, more-tagged files are generally considered better. These statements have scores associated with them (which you can edit in file->options->duplicates ), and the file of the pair with the highest score is presented first. If the files are duplicates, you can generally assume the first file you see, the 'A', is the better, particularly if there are several green statements. The filter will need to occasionally checkpoint, saving the decisions so far to the database, before it can fetch the next batch. This allows it to apply inferred information from your current batch and reduce your pending count faster before serving up the next set. It will present you with a quick interstitial 'confirm/back' dialog just to let you know. This happens more often as the potential count decreases. the decisions to make \u00b6 There are three ways a file can be related to another in the current duplicates system: duplicates, alternates, or false positive (not related). False positive (not related) is the easiest. You will not see completely unrelated pairs presented very often in the filter, particularly at low search distances, but if the shape of face and hair and clothing happen to line up (or geometric shapes, often), the search system may make a false positive match. In this case, just click 'they are not related'. Alternate relations are files that are not duplicates but obviously related in some way. Perhaps a costume change or a recolour. Hydrus does not have rich alternate support yet (but it is planned, and highly requested), so this relationship is mostly a 'holding area' for files that we will revisit for further processing in the future. Duplicate files are of the exact same thing . They may be different resolutions, file formats, encoding quality, or one might even have watermark, but they are fundamentally different views on the exact same art. As you can see with the buttons, you can select one file as the 'better' or say they are about the same. If the files are basically the same, there is no point stressing about which is 0.2% better--just click 'they are the same'. For better/worse pairs, you might have reason to keep both, but most of the time I recommend you delete the worse. You can customise the shortcuts under file->shortcuts->duplicate_filter . The defaults are: Left-click or space: this is better, delete the other . Right-click: they are related alternates . Middle-click: Go back one decision. Enter/Escape: Stop filtering. merging metadata \u00b6 If two duplicates have different metadata like tags or archive status, you probably want to merge them. Cancel out of the filter and click the 'edit default duplicate metadata merge options' button: By default, these options are fairly empty. You will have to set up what you want based on your services and preferences. Setting a simple 'copy all tags' is generally a good idea, and like/dislike ratings also often make sense. The settings for better and same quality should probably be similar, but it depends on your situation. If you choose the 'custom action' in the duplicate filter, you will be presented with a fresh 'edit duplicate merge options' panel for the action you select and can customise the merge specifically for that choice. ('favourite' options will come here in the future!) Once you are all set up here, you can dive into the duplicate filter. Please let me know how you get on with it! what now? \u00b6 The duplicate system is still incomplete. Now the db side is solid, the UI needs to catch up. Future versions will show duplicate information on thumbnails and the media viewer and allow quick-navigation to a file's duplicates and alternates. For now, if you wish to see a file's duplicates, right-click it and select file relationships . You can review all its current duplicates, open them in a new page, appoint the new 'best file' of a duplicate group, and even mass-action selections of thumbnails. You can also search for files based on the number of file relations they have (including when setting the search domain of the duplicate filter!) using system:file relationships . You can also search for best/not best files of groups, which makes it easy, for instance, to find all the spare duplicate files if you decide you no longer want to keep them. I expect future versions of the system to also auto-resolve easy duplicate pairs, such as clearing out pixel-for-pixel png versions of jpgs. game cgs \u00b6 If you import a lot of game CGs, which frequently have dozens or hundreds of alternates, I recommend you set them as alternates by selecting them all and setting the status through the thumbnail right-click menu. The duplicate filter, being limited to pairs, needs to compare all new members of an alternate group to all other members once to verify they are not duplicates. This is not a big deal for alternates with three or four members, but game CGs provide an overwhelming edge case. Setting a group of thumbnails as alternate 'fixes' their alternate status immediately, discounting the possibility of any internate duplicates, and provides an easy way out of this situation. more information and examples \u00b6 better/worse \u00b6 Which of two files is better? Here are some common reasons: higher resolution better image quality png over jpg for screenshots jpg over png for busy images jpg over png for pixel-for-pixel duplicates a better crop no watermark or site-frame or undesired blemish has been tagged by other people, so is likely to be the more 'popular' However these are not hard rules--sometimes a file has a larger resolution or filesize due to a bad upscaling or encoding decision by the person who 'reinterpreted' it. You really have to look at it and decide for yourself. Here is a good example of a better/worse pair: The first image is better because it is a png (pixel-perfect pngs are always better than jpgs for screenshots of applications--note how obvious the jpg's encoding artifacts are on the flat colour background) and it has a slightly higher (original) resolution, making it less blurry. I presume the second went through some FunnyJunk-tier trash meme site to get automatically cropped to 960px height and converted to the significantly smaller jpeg. Whatever happened, let's drop the second and keep the first. When both files are jpgs, differences in quality are very common and often significant: Again, this is mostly due to some online service resizing and lowering quality to ease on their bandwidth costs. There is usually no reason to keep the lower quality version. same quality duplicates \u00b6 When are two files the same quality? A good rule of thumb is if you scroll between them and see no obvious differences, and the comparison statements do not suggest anything significant, just set them as same quality. Here are two same quality duplicates: There is no obvious different between those two. The filesize is significantly different, so I suspect the smaller is a lossless png optimisation, but in the grand scheme of things, that doesn't matter so much. Many of the big content providers--Facebook, Google, Cloudflare--automatically 'optimise' the data that goes through their networks in order to save bandwidth. Although jpegs are often a slaughterhouse, with pngs it is usually harmless. Given the filesize, you might decide that these are actually a better/worse pair--but if the larger image had tags and was the 'canonical' version on most boorus, the decision might not be so clear. You can choose better/worse and delete one randomly, but sometimes you may just want to keep both without a firm decision on which is best, so just set 'same quality' and move on. Your time is more valuable than a few dozen KB. Sometimes, you will see pixel-for-pixel duplicate jpegs of very slightly different size, such as 787KB vs 779KB. The smaller of these is usually an exact duplicate that has had its internal metadata (e.g. EXIF tags) stripped by a program or website CDN. They are same quality unless you have a strong opinion on whether having internal metadata in a file is useful. alternates \u00b6 As I wrote above, hydrus's alternates system in not yet properly ready. It is important to have a basic 'alternates' relationship for now, but it is a holding area until we have a workflow to apply 'WIP'- or 'recolour'-type labels and present that information nicely in the media viewer. Alternates are not of exactly the same thing, but one is variant of the other or they are both descended from a common original. The precise definition is up to you, but it generally means something like: the files are recolours the files are alternate versions of the same image produced by the same or different artists (e.g. clean/messy or with/without hair ribbon) iterations on a close template different versions of a file's progress, such as the steps from the initial draft sketch to a final shaded version Here are some recolours of the same image: And some WIP: And a costume change: None of these are duplicates, but they are obviously related. The duplicate search will notice they are similar, so we should let the client know they are 'alternate'. Here's a subtler case: These two files are very similar, but try opening both in separate tabs and then flicking back and forth: the second's glove-string is further into the mouth and has improved chin shading, a more refined eye shape, and shaved pubic hair. It is simple to spot these differences in the client's duplicate filter when you scroll back and forth. I believe the second is an improvement on the first by the same artist, so it is a WIP alternate. You might also consider it a 'better' improvement. Here are three files you might or might not consider to be alternates: These are all based on the same template--which is why the dupe filter found them--but they are not so closely related as those above, and the last one is joking about a different ideology entirely and might deserve to be in its own group. Ultimately, you might prefer just to give them some shared tag and consider them not alternates per se . not related/false positive \u00b6 Here are two files that match false positively: Despite their similar shape, they are neither duplicates nor of even the same topic. The only commonality is the medium. I would not consider them close enough to be alternates--just adding something like 'screenshot' and 'imageboard' as tags to both is probably the closest connection they have. Recording the 'false positive' relationship is important to make sure the comparison does not come up again in the duplicate filter. The incidence of false positives increases as you broaden the search distance--the less precise your search, the less likely it is to be correct. At distance 14, these files all match, but uselessly: the duplicates system \u00b6 (advanced nonsense, you can skip this section. tl;dr: duplicate file groups keep track of their best quality file, sometimes called the King) Hydrus achieves duplicate transitivity by treating duplicate files as groups. Although you action pairs, if you set (A duplicate B), that creates a group (A,B). Subsequently setting (B duplicate C) extends the group to be (A,B,C), and so (A duplicate C) is transitively implied. The first version of the duplicate system attempted to record better/worse/same information for all files in a virtual duplicate group, but this proved very complicated, workflow-heavy, and not particularly useful. The new system instead appoints a single King as the best file of a group. All other files in the group are beneath the King and have no other relationship data retained. This King represents the group in the duplicate filter (and in potential pairs, which are actually recorded between duplicate media groups--even if most of them at the outset only have one member). If the other file in a pair is considered better, it becomes the new King, but if it is worse or equal, it merges into the other members . When two Kings are compared, whole groups can merge ! Alternates are stored in a similar way, except the members are duplicate groups rather than individual files and they have no significant internal relationship metadata yet. If \u03b1, \u03b2, and \u03b3 are duplicate groups that each have one or more files, then setting (\u03b1 alt \u03b2) and (\u03b2 alt \u03b3) creates an alternate group (\u03b1,\u03b2,\u03b3), with the caveat that \u03b1 and \u03b3 will still be sent to the duplicate filter once just to check they are not duplicates by chance. The specific file members of these groups, A, B, C and so on, inherit the relationships of their parent groups when you right-click on their thumbnails. False positive relationships are stored between pairs of alternate groups, so they apply transitively between all the files of either side's alternate group. If (\u03b1 alt \u03b2) and (\u03c8 alt \u03c9) and you apply (\u03b1 fp \u03c8), then (\u03b1 fp \u03c9), (\u03b2 fp \u03c8), and (\u03b2 fp \u03c9) are all transitively implied. More examples","title":"filtering duplicates"},{"location":"duplicates.html#intro","text":"As files are shared on the internet, they are often resized, cropped, converted to a different format, altered by the original or a new artist, or turned into a template and reinterpreted over and over and over. Even if you have a very restrictive importing workflow, your client is almost certainly going to get some duplicates . Some will be interesting alternate versions that you want to keep, and others will be thumbnails and other low-quality garbage you accidentally imported and would rather delete. Along the way, it would be nice to merge your ratings and tags to the better files so you don't lose any work. Finding and processing duplicates within a large collection is impossible to do by hand, so I have written a system to do the heavy lifting for you. It currently works on still images, but an extension for gifs and video is planned. Hydrus finds potential duplicates using a search algorithm that compares images by their shape. Once these pairs of potentials are found, they are presented to you through a filter like the archive/delete filter to determine their exact relationship and if you want to make a further action, such as deleting the 'worse' file of a pair. All of your decisions build up in the database to form logically consistent groups of duplicates and 'alternate' relationships that can be used to infer future information. For instance, if you say that file A is a duplicate of B and B is a duplicate of C, A and C are automatically recognised as duplicates as well. This all starts on--","title":"duplicates"},{"location":"duplicates.html#duplicates_page","text":"On the normal 'new page' selection window, hit special->duplicates processing . This will open this page: Let's go to the preparation page first: The 'similar shape' algorithm works on distance . Two files with 0 distance are likely exact matches, such as resizes of the same file or lower/higher quality jpegs, whereas those with distance 4 tend to be to be hairstyle or costume changes. You will be starting on distance 0 and not expect to ever go above 4 or 8 or so. Going too high increases the danger of being overwhelmed by false positives. If you are interested, the current version of this system uses a 64-bit phash to represent the image shape and a VPTree to search different files' phashes' relative hamming distance . I expect to extend it in future with multiple phash generation (flips, rotations, and 'interesting' image crops and video frames) and most-common colour comparisons. Searching for duplicates is fairly fast per file, but with a large client with hundreds of thousands of files, the total CPU time adds up. You can do a little manual searching if you like, but once you are all settled here, I recommend you hit the cog icon on the preparation page and let hydrus do this page's catch-up search work in your regular maintenance time. It'll swiftly catch up and keep you up to date without you even thinking about it. Start searching on the 'exact match' search distance of 0. It is generally easier and more valuable to get exact duplicates out of the way first. Once you have some files searched, you should see a potential pair count appear in the 'filtering' page.","title":"the duplicates processing page"},{"location":"duplicates.html#duplicate_filtering_page","text":"Processing duplicates can be real trudge-work if you do not set up a workflow you enjoy. It is a little slower than the archive/delete filter, and sometimes takes a bit more cognitive work. For many users, it is a good task to do while listening to a podcast or having a video going on another screen. If you have a client with tens of thousands of files, you will likely have thousands of potential pairs. This can be intimidating, but do not worry--due to the A, B, C logical inferrences as above, you will not have to go through every single one. The more information you put into the system, the faster the number will drop. The filter has a regular file search interface attached. As you can see, it defaults to system:everything , but you can limit what files you will be working on simply by adding new search predicates. You might like to only work on files in your archive (i.e. that you know you care about to begin with), for instance. You can choose whether both files of the pair should match the search, or just one. 'creator:' tags work very well at cutting the search domain to something more manageable and consistent--try your favourite creator! If you would like an example from the current search domain, hit the 'show some random potential pairs' button, and it will show two or more files that seem related. It is often interesting and surprising to see what it finds! The action buttons below allow for quick processing of these pairs and groups when convenient (particularly for large cg sets with 100+ alternates), but I recommend you leave these alone until you know the system better. When you are ready, launch the filter.","title":"the filtering page"},{"location":"duplicates.html#duplicates_filter","text":"We have not set up your duplicate 'merge' options yet, so do not get too into this. For this first time, just poke around, make some pretend choices, and then cancel out and choose to forget them. Like the archive/delete filter, this uses quick mouse-clicks, keyboard shortcuts, or button clicks to action pairs. It presents two files at a time, labelled A and B, which you can quickly switch between just as in the normal media viewer. As soon as you action them, the next pair is shown. The two files will have their current zoom-size locked so they stay the same size (and in the same position) as you switch between them. Scroll your mouse wheel a couple of times and see if any obvious differences stand out. Please note the hydrus media viewer does not currently work well with large resolutions at high zoom (it gets laggy and may have memory issues). Don't zoom in to 1600% and try to look at jpeg artifact differences on very large files, as this is simply not well supported yet. The hover window on the right also presents a number of 'comparison statements' to help you make your decision. Green statements mean this current file is probably 'better', and red the opposite. Larger, older, higher-quality, more-tagged files are generally considered better. These statements have scores associated with them (which you can edit in file->options->duplicates ), and the file of the pair with the highest score is presented first. If the files are duplicates, you can generally assume the first file you see, the 'A', is the better, particularly if there are several green statements. The filter will need to occasionally checkpoint, saving the decisions so far to the database, before it can fetch the next batch. This allows it to apply inferred information from your current batch and reduce your pending count faster before serving up the next set. It will present you with a quick interstitial 'confirm/back' dialog just to let you know. This happens more often as the potential count decreases.","title":"the duplicates filter"},{"location":"duplicates.html#duplicates_decisions","text":"There are three ways a file can be related to another in the current duplicates system: duplicates, alternates, or false positive (not related). False positive (not related) is the easiest. You will not see completely unrelated pairs presented very often in the filter, particularly at low search distances, but if the shape of face and hair and clothing happen to line up (or geometric shapes, often), the search system may make a false positive match. In this case, just click 'they are not related'. Alternate relations are files that are not duplicates but obviously related in some way. Perhaps a costume change or a recolour. Hydrus does not have rich alternate support yet (but it is planned, and highly requested), so this relationship is mostly a 'holding area' for files that we will revisit for further processing in the future. Duplicate files are of the exact same thing . They may be different resolutions, file formats, encoding quality, or one might even have watermark, but they are fundamentally different views on the exact same art. As you can see with the buttons, you can select one file as the 'better' or say they are about the same. If the files are basically the same, there is no point stressing about which is 0.2% better--just click 'they are the same'. For better/worse pairs, you might have reason to keep both, but most of the time I recommend you delete the worse. You can customise the shortcuts under file->shortcuts->duplicate_filter . The defaults are: Left-click or space: this is better, delete the other . Right-click: they are related alternates . Middle-click: Go back one decision. Enter/Escape: Stop filtering.","title":"the decisions to make"},{"location":"duplicates.html#duplicates_merging","text":"If two duplicates have different metadata like tags or archive status, you probably want to merge them. Cancel out of the filter and click the 'edit default duplicate metadata merge options' button: By default, these options are fairly empty. You will have to set up what you want based on your services and preferences. Setting a simple 'copy all tags' is generally a good idea, and like/dislike ratings also often make sense. The settings for better and same quality should probably be similar, but it depends on your situation. If you choose the 'custom action' in the duplicate filter, you will be presented with a fresh 'edit duplicate merge options' panel for the action you select and can customise the merge specifically for that choice. ('favourite' options will come here in the future!) Once you are all set up here, you can dive into the duplicate filter. Please let me know how you get on with it!","title":"merging metadata"},{"location":"duplicates.html#future","text":"The duplicate system is still incomplete. Now the db side is solid, the UI needs to catch up. Future versions will show duplicate information on thumbnails and the media viewer and allow quick-navigation to a file's duplicates and alternates. For now, if you wish to see a file's duplicates, right-click it and select file relationships . You can review all its current duplicates, open them in a new page, appoint the new 'best file' of a duplicate group, and even mass-action selections of thumbnails. You can also search for files based on the number of file relations they have (including when setting the search domain of the duplicate filter!) using system:file relationships . You can also search for best/not best files of groups, which makes it easy, for instance, to find all the spare duplicate files if you decide you no longer want to keep them. I expect future versions of the system to also auto-resolve easy duplicate pairs, such as clearing out pixel-for-pixel png versions of jpgs.","title":"what now?"},{"location":"duplicates.html#game_cgs","text":"If you import a lot of game CGs, which frequently have dozens or hundreds of alternates, I recommend you set them as alternates by selecting them all and setting the status through the thumbnail right-click menu. The duplicate filter, being limited to pairs, needs to compare all new members of an alternate group to all other members once to verify they are not duplicates. This is not a big deal for alternates with three or four members, but game CGs provide an overwhelming edge case. Setting a group of thumbnails as alternate 'fixes' their alternate status immediately, discounting the possibility of any internate duplicates, and provides an easy way out of this situation.","title":"game cgs"},{"location":"duplicates.html#duplicates_examples","text":"","title":"more information and examples"},{"location":"duplicates.html#duplicates_examples_better_worse","text":"Which of two files is better? Here are some common reasons: higher resolution better image quality png over jpg for screenshots jpg over png for busy images jpg over png for pixel-for-pixel duplicates a better crop no watermark or site-frame or undesired blemish has been tagged by other people, so is likely to be the more 'popular' However these are not hard rules--sometimes a file has a larger resolution or filesize due to a bad upscaling or encoding decision by the person who 'reinterpreted' it. You really have to look at it and decide for yourself. Here is a good example of a better/worse pair: The first image is better because it is a png (pixel-perfect pngs are always better than jpgs for screenshots of applications--note how obvious the jpg's encoding artifacts are on the flat colour background) and it has a slightly higher (original) resolution, making it less blurry. I presume the second went through some FunnyJunk-tier trash meme site to get automatically cropped to 960px height and converted to the significantly smaller jpeg. Whatever happened, let's drop the second and keep the first. When both files are jpgs, differences in quality are very common and often significant: Again, this is mostly due to some online service resizing and lowering quality to ease on their bandwidth costs. There is usually no reason to keep the lower quality version.","title":"better/worse"},{"location":"duplicates.html#duplicates_examples_same","text":"When are two files the same quality? A good rule of thumb is if you scroll between them and see no obvious differences, and the comparison statements do not suggest anything significant, just set them as same quality. Here are two same quality duplicates: There is no obvious different between those two. The filesize is significantly different, so I suspect the smaller is a lossless png optimisation, but in the grand scheme of things, that doesn't matter so much. Many of the big content providers--Facebook, Google, Cloudflare--automatically 'optimise' the data that goes through their networks in order to save bandwidth. Although jpegs are often a slaughterhouse, with pngs it is usually harmless. Given the filesize, you might decide that these are actually a better/worse pair--but if the larger image had tags and was the 'canonical' version on most boorus, the decision might not be so clear. You can choose better/worse and delete one randomly, but sometimes you may just want to keep both without a firm decision on which is best, so just set 'same quality' and move on. Your time is more valuable than a few dozen KB. Sometimes, you will see pixel-for-pixel duplicate jpegs of very slightly different size, such as 787KB vs 779KB. The smaller of these is usually an exact duplicate that has had its internal metadata (e.g. EXIF tags) stripped by a program or website CDN. They are same quality unless you have a strong opinion on whether having internal metadata in a file is useful.","title":"same quality duplicates"},{"location":"duplicates.html#duplicates_examples_alternates","text":"As I wrote above, hydrus's alternates system in not yet properly ready. It is important to have a basic 'alternates' relationship for now, but it is a holding area until we have a workflow to apply 'WIP'- or 'recolour'-type labels and present that information nicely in the media viewer. Alternates are not of exactly the same thing, but one is variant of the other or they are both descended from a common original. The precise definition is up to you, but it generally means something like: the files are recolours the files are alternate versions of the same image produced by the same or different artists (e.g. clean/messy or with/without hair ribbon) iterations on a close template different versions of a file's progress, such as the steps from the initial draft sketch to a final shaded version Here are some recolours of the same image: And some WIP: And a costume change: None of these are duplicates, but they are obviously related. The duplicate search will notice they are similar, so we should let the client know they are 'alternate'. Here's a subtler case: These two files are very similar, but try opening both in separate tabs and then flicking back and forth: the second's glove-string is further into the mouth and has improved chin shading, a more refined eye shape, and shaved pubic hair. It is simple to spot these differences in the client's duplicate filter when you scroll back and forth. I believe the second is an improvement on the first by the same artist, so it is a WIP alternate. You might also consider it a 'better' improvement. Here are three files you might or might not consider to be alternates: These are all based on the same template--which is why the dupe filter found them--but they are not so closely related as those above, and the last one is joking about a different ideology entirely and might deserve to be in its own group. Ultimately, you might prefer just to give them some shared tag and consider them not alternates per se .","title":"alternates"},{"location":"duplicates.html#duplicates_examples_false_positive","text":"Here are two files that match false positively: Despite their similar shape, they are neither duplicates nor of even the same topic. The only commonality is the medium. I would not consider them close enough to be alternates--just adding something like 'screenshot' and 'imageboard' as tags to both is probably the closest connection they have. Recording the 'false positive' relationship is important to make sure the comparison does not come up again in the duplicate filter. The incidence of false positives increases as you broaden the search distance--the less precise your search, the less likely it is to be correct. At distance 14, these files all match, but uselessly:","title":"not related/false positive"},{"location":"duplicates.html#duplicates_advanced","text":"(advanced nonsense, you can skip this section. tl;dr: duplicate file groups keep track of their best quality file, sometimes called the King) Hydrus achieves duplicate transitivity by treating duplicate files as groups. Although you action pairs, if you set (A duplicate B), that creates a group (A,B). Subsequently setting (B duplicate C) extends the group to be (A,B,C), and so (A duplicate C) is transitively implied. The first version of the duplicate system attempted to record better/worse/same information for all files in a virtual duplicate group, but this proved very complicated, workflow-heavy, and not particularly useful. The new system instead appoints a single King as the best file of a group. All other files in the group are beneath the King and have no other relationship data retained. This King represents the group in the duplicate filter (and in potential pairs, which are actually recorded between duplicate media groups--even if most of them at the outset only have one member). If the other file in a pair is considered better, it becomes the new King, but if it is worse or equal, it merges into the other members . When two Kings are compared, whole groups can merge ! Alternates are stored in a similar way, except the members are duplicate groups rather than individual files and they have no significant internal relationship metadata yet. If \u03b1, \u03b2, and \u03b3 are duplicate groups that each have one or more files, then setting (\u03b1 alt \u03b2) and (\u03b2 alt \u03b3) creates an alternate group (\u03b1,\u03b2,\u03b3), with the caveat that \u03b1 and \u03b3 will still be sent to the duplicate filter once just to check they are not duplicates by chance. The specific file members of these groups, A, B, C and so on, inherit the relationships of their parent groups when you right-click on their thumbnails. False positive relationships are stored between pairs of alternate groups, so they apply transitively between all the files of either side's alternate group. If (\u03b1 alt \u03b2) and (\u03c8 alt \u03c9) and you apply (\u03b1 fp \u03c8), then (\u03b1 fp \u03c9), (\u03b2 fp \u03c8), and (\u03b2 fp \u03c9) are all transitively implied. More examples","title":"the duplicates system"},{"location":"faq.html","text":"FAQ \u00b6 what is a repository? \u00b6 A repository is a service in the hydrus network that stores a certain kind of information--files or tag mappings, for instance--as submitted by users all over the internet. Those users periodically synchronise with the repository so they know everything that it stores. Sometimes, like with tags, this means creating a complete local copy of everything on the repository. Hydrus network clients never send queries to repositories; they perform queries over their local cache of the repository's data, keeping everything confined to the same computer. what is a tag? \u00b6 wiki A tag is a small bit of text describing a single property of something. They make searching easy. Good examples are \"flower\" or \"nicolas cage\" or \"the sopranos\" or \"2003\". By combining several tags together ( e.g. [ 'tiger woods', 'sports illustrated', '2008' ] or [ 'cosplay', 'the legend of zelda' ] ), a huge image collection is reduced to a tiny and easy-to-digest sample. A good word for the connection of a particular tag to a particular file is mapping . Hydrus is designed with the intention that tags are for searching , not describing . Workflows and UI are tuned for finding files and other similar files (e.g. by the same artist), and while it is possible to have nice metadata overlays around files, this is not considered their chief purpose. Trying to have 'perfect' descriptions for files is often a rabbit-hole that can consume hours of work with relatively little demonstrable benefit. All tags are automatically converted to lower case. 'Sunset Drive' becomes 'sunset drive'. Why? Although it is more beautiful to have 'The Lord of the Rings' rather than 'the lord of the rings', there are many, many special cases where style guides differ on which words to capitalise. As 'The Lord of the Rings' and 'the lord of the rings' are semantically identical, it is natural to search in a case insensitive way. When case does not matter, what point is there in recording it? Furthermore, leading and trailing whitespace is removed, and multiple whitespace is collapsed to a single character. ' yellow dress ' becomes 'yellow dress' what is a namespace? \u00b6 A namespace is a category that in hydrus prefixes a tag. An example is 'person' in the tag 'person:ron paul'--it lets people and software know that 'ron paul' is a name. You can create any namespace you like; just type one or more words and then a colon, and then the next string of text will have that namespace. The hydrus client gives namespaces different colours so you can pick out important tags more easily in a large list, and you can also search by a particular namespace, even creating complicated predicates like 'give all files that do not have any character tags', for instance. why not use filenames and folders? \u00b6 As a retrieval method, filenames and folders are less and less useful as the number of files increases. Why? A filename is not unique; did you mean this \"04.jpg\" or this \"04.jpg\" in another folder? Perhaps \"04 (3).jpg\"? A filename is not guaranteed to describe the file correctly, e.g. hello.jpg A filename is not guaranteed to stay the same, meaning other programs cannot rely on the filename address being valid or even returning the same data every time. A filename is often--for ridiculous reasons--limited to a certain prohibitive character set. Even when utf-8 is supported, some arbitrary ascii characters are usually not, and different localisations, operating systems and formatting conventions only make it worse. Folders can offer context, but they are clunky and time-consuming to change. If you put each chapter of a comic in a different folder, for instance, reading several volumes in one sitting can be a pain. Nesting many folders adds navigation-latency and tends to induce less informative \"04.jpg\"-type filenames. So, the client tracks files by their hash . This technical identifier easily eliminates duplicates and permits the database to robustly attach other metadata like tags and ratings and known urls and notes and everything else, even across multiple clients and even if a file is deleted and later imported. As a general rule, I suggest you not set up hydrus to parse and display all your imported files' filenames as tags. 'image.jpg' is useless as a tag. Shed the concept of filenames as you would chains. can the client manage files from their original locations? \u00b6 When the client imports a file, it makes a quickly accessible but human-ugly copy in its internal database, by default under install_dir/db/client_files . When it needs to access that file again, it always knows where it is, and it can be confident it is what it expects it to be. It never accesses the original again. This storage method is not always convenient, particularly for those who are hesitant about converting to using hydrus completely and also do not want to maintain two large copies of their collections. The question comes up--\"can hydrus track files from their original locations, without having to copy them into the db?\" The technical answer is, \"This support could be added,\" but I have decided not to, mainly because: Files stored in locations outside of hydrus's responsibility can change or go missing (particularly if a whole parent folder is moved!), which erodes the assumptions it makes about file access, meaning additional checks would have to be added before important operations, often with no simple recovery. External duplicates would not be merged, and the file system would have to be extended to handle pointless 1->n hash->path relationships. Many regular operations--like figuring out whether orphaned files should be physically deleted--are less simple. Backing up or restoring a distributed external file system is much more complicated. It would require more code to maintain and would mean a laggier db and interface. Hydrus is an attempt to get away from files and folders--if a collection is too large and complicated to manage using explorer, what's the point in supporting that old system? It is not unusual for new users who ask for this feature to find their feelings change after getting more experience with the software. If desired, path text can be preserved as tags using regexes during import, and getting into the swing of searching by metadata rather than navigating folders often shows how very effective the former is over the latter. Most users eventually import most or all of their collection into hydrus permanently, deleting their old folder structure as they go. For this reason, if you are hesitant about doing things the hydrus way, I advise you try running it on a smaller subset of your collection, say 5,000 files, leaving the original copies completely intact. After a month or two, think about how often you used hydrus to look at the files versus navigating through folders. If you barely used the folders, you probably do not need them any more, but if you used them a lot, then hydrus might not be for you, or it might only be for some sorts of files in your collection. why use sqlite? \u00b6 Hydrus uses SQLite for its database engine. Some users who have experience with other engines such as MySQL or PostgreSQL sometimes suggest them as alternatives. SQLite serves hydrus's needs well, and at the moment, there are no plans to change. Since this question has come up frequently, a user has written an excellent document talking about the reasons to stick with SQLite. If you are interested in this subject, please check it out here: https://gitgud.io/prkc/hydrus-why-sqlite/blob/master/README.md what is a hash? \u00b6 wiki Hashes are a subject you usually have to be a software engineer to find interesting. The simple answer is that they are unique names for things. Hashes make excellent identifiers inside software, as you can safely assume that f099b5823f4e36a4bd6562812582f60e49e818cf445902b504b5533c6a5dad94 refers to one particular file and no other. In the client's normal operation, you will never encounter a file's hash. If you want to see a thumbnail bigger, double-click it; the software handles the mathematics. For those who are interested: hydrus uses SHA-256, which spits out 32-byte (256-bit) hashes. The software stores the hash densely, as 32 bytes, only encoding it to 64 hex characters when the user views it or copies to clipboard. SHA-256 is not perfect, but it is a great compromise candidate; it is secure for now, it is reasonably fast, it is available for most programming languages, and newer CPUs perform it more efficiently all the time. what is an access key? \u00b6 The hydrus network's repositories do not use username/password, but instead a single strong identifier-password like this: 7ce4dbf18f7af8b420ee942bae42030aab344e91dc0e839260fcd71a4c9879e3 These hex numbers give you access to a particular account on a particular repository, and are often combined like so: 7ce4dbf18f7af8b420ee942bae42030aab344e91dc0e839260fcd71a4c9879e3@hostname.com:45871 They are long enough to be impossible to guess, and also randomly generated, so they reveal nothing personally identifying about you. Many people can use the same access key (and hence the same account) on a repository without consequence, although they will have to share any bandwidth limits, and if one person screws around and gets the account banned, everyone will lose access. The access key is the account. Do not give it to anyone you do not want to have access to the account. An administrator will never need it; instead they will want your account id . what is an account id? \u00b6 This is another long string of random hexadecimal that identifies your account without giving away access. If you need to identify yourself to a repository administrator (say, to get your account's permissions modified), you will need to tell them your account id. You can copy it to your clipboard in services->review services . why can my friend not see what I just uploaded? \u00b6 The repositories do not work like conventional search engines; it takes a short but predictable while for changes to propagate to other users. The client's searches only ever happen over its local cache of what is on the repository. Any changes you make will be delayed for others until their next update occurs. At the moment, the update period is 100,000 seconds, which is about 1 day and 4 hours.","title":"FAQ"},{"location":"faq.html#faq","text":"","title":"FAQ"},{"location":"faq.html#repositories","text":"A repository is a service in the hydrus network that stores a certain kind of information--files or tag mappings, for instance--as submitted by users all over the internet. Those users periodically synchronise with the repository so they know everything that it stores. Sometimes, like with tags, this means creating a complete local copy of everything on the repository. Hydrus network clients never send queries to repositories; they perform queries over their local cache of the repository's data, keeping everything confined to the same computer.","title":"what is a repository?"},{"location":"faq.html#tags","text":"wiki A tag is a small bit of text describing a single property of something. They make searching easy. Good examples are \"flower\" or \"nicolas cage\" or \"the sopranos\" or \"2003\". By combining several tags together ( e.g. [ 'tiger woods', 'sports illustrated', '2008' ] or [ 'cosplay', 'the legend of zelda' ] ), a huge image collection is reduced to a tiny and easy-to-digest sample. A good word for the connection of a particular tag to a particular file is mapping . Hydrus is designed with the intention that tags are for searching , not describing . Workflows and UI are tuned for finding files and other similar files (e.g. by the same artist), and while it is possible to have nice metadata overlays around files, this is not considered their chief purpose. Trying to have 'perfect' descriptions for files is often a rabbit-hole that can consume hours of work with relatively little demonstrable benefit. All tags are automatically converted to lower case. 'Sunset Drive' becomes 'sunset drive'. Why? Although it is more beautiful to have 'The Lord of the Rings' rather than 'the lord of the rings', there are many, many special cases where style guides differ on which words to capitalise. As 'The Lord of the Rings' and 'the lord of the rings' are semantically identical, it is natural to search in a case insensitive way. When case does not matter, what point is there in recording it? Furthermore, leading and trailing whitespace is removed, and multiple whitespace is collapsed to a single character. ' yellow dress ' becomes 'yellow dress'","title":"what is a tag?"},{"location":"faq.html#namespaces","text":"A namespace is a category that in hydrus prefixes a tag. An example is 'person' in the tag 'person:ron paul'--it lets people and software know that 'ron paul' is a name. You can create any namespace you like; just type one or more words and then a colon, and then the next string of text will have that namespace. The hydrus client gives namespaces different colours so you can pick out important tags more easily in a large list, and you can also search by a particular namespace, even creating complicated predicates like 'give all files that do not have any character tags', for instance.","title":"what is a namespace?"},{"location":"faq.html#filenames","text":"As a retrieval method, filenames and folders are less and less useful as the number of files increases. Why? A filename is not unique; did you mean this \"04.jpg\" or this \"04.jpg\" in another folder? Perhaps \"04 (3).jpg\"? A filename is not guaranteed to describe the file correctly, e.g. hello.jpg A filename is not guaranteed to stay the same, meaning other programs cannot rely on the filename address being valid or even returning the same data every time. A filename is often--for ridiculous reasons--limited to a certain prohibitive character set. Even when utf-8 is supported, some arbitrary ascii characters are usually not, and different localisations, operating systems and formatting conventions only make it worse. Folders can offer context, but they are clunky and time-consuming to change. If you put each chapter of a comic in a different folder, for instance, reading several volumes in one sitting can be a pain. Nesting many folders adds navigation-latency and tends to induce less informative \"04.jpg\"-type filenames. So, the client tracks files by their hash . This technical identifier easily eliminates duplicates and permits the database to robustly attach other metadata like tags and ratings and known urls and notes and everything else, even across multiple clients and even if a file is deleted and later imported. As a general rule, I suggest you not set up hydrus to parse and display all your imported files' filenames as tags. 'image.jpg' is useless as a tag. Shed the concept of filenames as you would chains.","title":"why not use filenames and folders?"},{"location":"faq.html#external_files","text":"When the client imports a file, it makes a quickly accessible but human-ugly copy in its internal database, by default under install_dir/db/client_files . When it needs to access that file again, it always knows where it is, and it can be confident it is what it expects it to be. It never accesses the original again. This storage method is not always convenient, particularly for those who are hesitant about converting to using hydrus completely and also do not want to maintain two large copies of their collections. The question comes up--\"can hydrus track files from their original locations, without having to copy them into the db?\" The technical answer is, \"This support could be added,\" but I have decided not to, mainly because: Files stored in locations outside of hydrus's responsibility can change or go missing (particularly if a whole parent folder is moved!), which erodes the assumptions it makes about file access, meaning additional checks would have to be added before important operations, often with no simple recovery. External duplicates would not be merged, and the file system would have to be extended to handle pointless 1->n hash->path relationships. Many regular operations--like figuring out whether orphaned files should be physically deleted--are less simple. Backing up or restoring a distributed external file system is much more complicated. It would require more code to maintain and would mean a laggier db and interface. Hydrus is an attempt to get away from files and folders--if a collection is too large and complicated to manage using explorer, what's the point in supporting that old system? It is not unusual for new users who ask for this feature to find their feelings change after getting more experience with the software. If desired, path text can be preserved as tags using regexes during import, and getting into the swing of searching by metadata rather than navigating folders often shows how very effective the former is over the latter. Most users eventually import most or all of their collection into hydrus permanently, deleting their old folder structure as they go. For this reason, if you are hesitant about doing things the hydrus way, I advise you try running it on a smaller subset of your collection, say 5,000 files, leaving the original copies completely intact. After a month or two, think about how often you used hydrus to look at the files versus navigating through folders. If you barely used the folders, you probably do not need them any more, but if you used them a lot, then hydrus might not be for you, or it might only be for some sorts of files in your collection.","title":"can the client manage files from their original locations?"},{"location":"faq.html#sqlite","text":"Hydrus uses SQLite for its database engine. Some users who have experience with other engines such as MySQL or PostgreSQL sometimes suggest them as alternatives. SQLite serves hydrus's needs well, and at the moment, there are no plans to change. Since this question has come up frequently, a user has written an excellent document talking about the reasons to stick with SQLite. If you are interested in this subject, please check it out here: https://gitgud.io/prkc/hydrus-why-sqlite/blob/master/README.md","title":"why use sqlite?"},{"location":"faq.html#hashes","text":"wiki Hashes are a subject you usually have to be a software engineer to find interesting. The simple answer is that they are unique names for things. Hashes make excellent identifiers inside software, as you can safely assume that f099b5823f4e36a4bd6562812582f60e49e818cf445902b504b5533c6a5dad94 refers to one particular file and no other. In the client's normal operation, you will never encounter a file's hash. If you want to see a thumbnail bigger, double-click it; the software handles the mathematics. For those who are interested: hydrus uses SHA-256, which spits out 32-byte (256-bit) hashes. The software stores the hash densely, as 32 bytes, only encoding it to 64 hex characters when the user views it or copies to clipboard. SHA-256 is not perfect, but it is a great compromise candidate; it is secure for now, it is reasonably fast, it is available for most programming languages, and newer CPUs perform it more efficiently all the time.","title":"what is a hash?"},{"location":"faq.html#access_keys","text":"The hydrus network's repositories do not use username/password, but instead a single strong identifier-password like this: 7ce4dbf18f7af8b420ee942bae42030aab344e91dc0e839260fcd71a4c9879e3 These hex numbers give you access to a particular account on a particular repository, and are often combined like so: 7ce4dbf18f7af8b420ee942bae42030aab344e91dc0e839260fcd71a4c9879e3@hostname.com:45871 They are long enough to be impossible to guess, and also randomly generated, so they reveal nothing personally identifying about you. Many people can use the same access key (and hence the same account) on a repository without consequence, although they will have to share any bandwidth limits, and if one person screws around and gets the account banned, everyone will lose access. The access key is the account. Do not give it to anyone you do not want to have access to the account. An administrator will never need it; instead they will want your account id .","title":"what is an access key?"},{"location":"faq.html#account_ids","text":"This is another long string of random hexadecimal that identifies your account without giving away access. If you need to identify yourself to a repository administrator (say, to get your account's permissions modified), you will need to tell them your account id. You can copy it to your clipboard in services->review services .","title":"what is an account id?"},{"location":"faq.html#delays","text":"The repositories do not work like conventional search engines; it takes a short but predictable while for changes to propagate to other users. The client's searches only ever happen over its local cache of what is on the repository. Any changes you make will be delayed for others until their next update occurs. At the moment, the update period is 100,000 seconds, which is about 1 day and 4 hours.","title":"why can my friend not see what I just uploaded?"},{"location":"gettingStartedOverview.html","text":"Overview for getting started \u00b6 This page serves as a checklist or overview for the getting started part of Hydrus. It is recommended to read at least all of the getting started pages, but if you want to head to some specific section directly go ahead and do so. Local files \u00b6 If you already have many local files, either downloaded by hand or by some other downloader tool, head to the getting started with files section to begin importing them. Downloading \u00b6 If you want to download with Hydrus, check out getting started with downloading and then getting started with subscriptions . If you want to add the ability to download from sites not already available in Hydrus by default, check out adding new downloaders for how and a link to a user-maintained archive of downloaders. Tags and ratings \u00b6 If you have imported and/or downloaded some files and want to get started searching and tagging see getting started with tags and getting started with ratings . It is also worth having a look at siblings for when you want to consolidate different tags that all mean the same thing, common misspellings, or preferential differences into one tag. Parents are for when you want a tag to always add another tag. Commonly used for characters since you would usually want to add the series they're from too. Duplicates \u00b6 Have a lot of very similar looking pictures because of one reason or another? Have a look at duplicates , Hydrus' duplicates finder and filtering tool. API \u00b6 Hydrus has an API that lets external tools connect to it. See API for how to turn it on and a list of some of these tools.","title":"Overview for getting started"},{"location":"gettingStartedOverview.html#overview_for_getting_started","text":"This page serves as a checklist or overview for the getting started part of Hydrus. It is recommended to read at least all of the getting started pages, but if you want to head to some specific section directly go ahead and do so.","title":"Overview for getting started"},{"location":"gettingStartedOverview.html#local_files","text":"If you already have many local files, either downloaded by hand or by some other downloader tool, head to the getting started with files section to begin importing them.","title":"Local files"},{"location":"gettingStartedOverview.html#downloading","text":"If you want to download with Hydrus, check out getting started with downloading and then getting started with subscriptions . If you want to add the ability to download from sites not already available in Hydrus by default, check out adding new downloaders for how and a link to a user-maintained archive of downloaders.","title":"Downloading"},{"location":"gettingStartedOverview.html#tags_and_ratings","text":"If you have imported and/or downloaded some files and want to get started searching and tagging see getting started with tags and getting started with ratings . It is also worth having a look at siblings for when you want to consolidate different tags that all mean the same thing, common misspellings, or preferential differences into one tag. Parents are for when you want a tag to always add another tag. Commonly used for characters since you would usually want to add the series they're from too.","title":"Tags and ratings"},{"location":"gettingStartedOverview.html#duplicates","text":"Have a lot of very similar looking pictures because of one reason or another? Have a look at duplicates , Hydrus' duplicates finder and filtering tool.","title":"Duplicates"},{"location":"gettingStartedOverview.html#api","text":"Hydrus has an API that lets external tools connect to it. See API for how to turn it on and a list of some of these tools.","title":"API"},{"location":"getting_started_downloading.html","text":"getting started with downloading \u00b6 downloading \u00b6 The hydrus client has a sophisticated and completely user-customisable download system. It can pull from any booru or regular gallery site or imageboard, and also from some special examples like twitter and tumblr. A fresh install will by default have support for the bigger sites, but it is possible, with some work, for any user to create a new shareable downloader for a new site. The downloader is highly parallelisable, and while the default bandwidth rules should stop you from running too hot and downloading so much at once that you annoy the servers you are downloading from, there are no brakes in the program on what you can get. Danger It is very important that you take this slow. Many users get overexcited with their new ability to download 500,000 files and then do so , only discovering later that 98% of what they got was junk that they now have to wade through. Figure out what workflows work for you, how fast you process files, what content you actually want, how much bandwidth and hard drive space you have, and prioritise and throttle your incoming downloads to match. If you can realistically only archive/delete filter 50 files a day, there is little benefit to downloading 500 new files a day. START SLOW. It also takes a decent whack of CPU to import a file. You'll usually never notice this with just one hard drive import going, but if you have twenty different download queues all competing for database access and individual 0.1-second hits of heavy CPU work, you will discover your client starts to judder and lag. Keep it in mind, and you'll figure out what your computer is happy with. I also recommend you try to keep your total loaded files/urls to be under 20,000 to keep things snappy. Remember that you can pause your import queues, if you need to calm things down a bit. let's do it \u00b6 Open the new page selector with F9 and then hit download->gallery : The gallery page can download from multiple sources at the same time. Each entry in the list represents a basic combination of two things: source The site you are getting from. Safebooru or Danbooru or Deviant Art or twitter or anywhere else. query text Something like 'contrapposto' or 'blonde_hair blue_eyes' or an artist name like 'incase'. Whatever is searched on the site to return a list of ordered media. So, when you want to start a new download, you first select the source with the button and then type in a query in the text box and hit enter. The download will soon start and fill in information, and thumbnails should stream in, just like the hard drive importer. The downloader typically works by walking through the search's gallery pages one by one, queueing up the found files for later download. There are several intentional delays built into the system, so do not worry if work seems to halt for a little while--you will get a feel for hydrus's 'slow persistent growth' style with experience. Do a test download now, for fun! Pause its gallery search after a page or two, and then pause the file import queue after a dozen or so files come in. The thumbnail panel can only show results from one queue at a time, so double-click on an entry to 'highlight' it, which will show its thumbs and also give more detailed info and controls in the 'highlighted query' panel. I encourage you to explore the highlight panel over time, as it can show and do quite a lot. Double-click again to 'clear' it. It is a good idea to 'test' larger downloads, either by visiting the site itself for that query, or just waiting a bit and reviewing the first files that come in. Just make sure that you are getting what you thought you would, whether that be verifying that the query text is correct or that the site isn't only giving you bloated gifs or other bad quality files. The 'file limit', which stops the gallery search after the set number of files, is also great for limiting fishing expeditions (such as overbroad searches like 'wide_hips', which on the bigger boorus have 100k+ results and return variable quality). If the gallery search runs out of new files before the file limit is hit, the search will naturally stop (and the entry in the list should gain a \u23f9 'stop' symbol). Note that some sites only serve 25 or 50 pages of results, despite their indices suggesting hundreds. If you notice that one site always bombs out at, say, 500 results, it may be due to a decision on their end. You can usually test this by visiting the pages hydrus tried in your web browser. In general, particularly when starting out, artist searches are best. They are usually fewer than a thousand files and have fairly uniform quality throughout. parsing tags \u00b6 But we don't just want files--most sites offer tags as well. By default, hydrus now starts with a local tag service called 'downloader tags' and it will parse (get) all the tags from normal gallery sites and put them in this service. You don't have to do anything, you will get some decent tags. As you use the client, you will figure out which tags you like and where you want them. On the downloader page, click tag import options : This is an important dialog, although you will not need to use it much. It governs which tags are parsed and where they go. To keep things easy to manage, a new downloader will refer to the 'default' tag import options for a website, but for now let's set some values just for this downloader: You can see that each tag service on your client has a separate section. If you add the PTR, that will get a new box too. A new client is set to get all tags for 'downloader tags' service. Things can get much more complicated. Have a play around with the options here as you figure things out. Most of the controls have tooltips or longer explainers in sub-dialogs, so don't be afraid to try things. It is easy to get tens of thousands of tags by downloading this way. Different sites offer different kinds and qualities of tags, and the client's downloaders (which were designed by me, the dev, or a user) may parse all or only some of them. Many users like to just get everything on offer, but others only ever want, say, 'creator', 'series', and 'character' tags. If you feel brave, click that 'all tags' button, which will take you into hydrus's advanced 'tag filter', which allows you to select which of the incoming list of tags will be added. The blacklist button will let you skip downloading files that have certain tags (perhaps you would like to auto-skip all images with 'gore', 'scat', or 'diaper'?), again using the tag filter, while the whitelist enables you to only allow files that have at least one of a set of tags. The 'additional tags' adds some fixed personal tags to all files coming in--for instance, you might like to add 'process into favourites' to your 'my tags' for some query you really like so you can find those files again later and process them separately. That little 'cog' icon button can also do some advanced things. To edit the defaults, hit up network->downloaders->manage default tag import options . You should do this as you get a better idea of your preferences. You can set them for all file posts generally, all watchers, and for specific sites as well. Warning The file limit and file/tag import options on the upper panel, if changed, will only apply to new queries. If you want to change the options for an existing queue, either do so on its highlight panel below or use the 'set options to queries' button. watching threads \u00b6 If you are an imageboard user, try going to a thread you like and drag-and-drop its URL (straight from your web browser's address bar) onto the hydrus client. It should open up a new 'watcher' page and import the thread's files! With only one URL to check, watchers are a little simpler than gallery searches, but as that page is likely receiving frequent updates, it checks it over and over until it dies. By default, the watcher's 'checker options' will regulate how quickly it checks based on the speed at which new files are coming in--if a thread is fast, it will check frequently; if it is running slow, it may only check once per day. When a thread falls below a critical posting velocity or 404s, checking stops. In general, you can leave the checker options alone, but you might like to revisit them if you are always visiting faster or slower boards and find you are missing files or getting DEAD too early. bandwidth \u00b6 It will not be too long until you see a \"bandwidth free in xxxxx...\" message. As a long-term storage solution, hydrus is designed to be polite in its downloading--both to the source server and your computer. The client's default bandwidth rules have some caps to stop big mistakes, spread out larger jobs, and at a bare minimum, no domain will be hit more than once a second. All the bandwidth rules are completely customisable. They can get quite complicated. I strongly recommend you not look for them until you have more experience. I especially strongly recommend you not ever turn them all off, thinking that will improve something, as you'll probably render the client too laggy to function and get yourself an IP ban from the next server you pull from. If you want to download 10,000 files, set up the queue and let it work. The client will take breaks, likely even to the next day, but it will get there in time. Many users like to leave their clients on all the time, just running in the background, which makes these sorts of downloads a breeze--you check back in the evening and discover your download queues, watchers, and subscriptions have given you another thousand things to deal with. Again: the real problem with downloading is not finding new things, it is keeping up with what you get. Start slow and figure out what is important to your bandwidth budget, hard drive budget, and free time budget. Almost everyone fails at this. subscriptions \u00b6 Subscriptions are a way to automatically recheck a good query in future, to keep up with new files. Many users come to use them. When you are comfortable with downloaders and have an idea of what you like, come back and read the subscription help, which is here . other downloading \u00b6 There are two other ways of downloading, mostly for advanced or one-off use. The url downloader works like the gallery downloader but does not do searches. You can paste downloadable URLs to it, and it will work through them as one list. Dragging and dropping recognisable URLs onto the client (e.g. from your web browser) will also spawn and use this downloader. The simple downloader will do very simple parsing for unusual jobs. If you want to download all the images in a page, or all the image link destinations, this is the one to use. There are several default parsing rules to choose from, and if you learn the downloader system yourself, it will be easy to make more. logins \u00b6 The client now supports a flexible (but slightly prototype and ugly) login system. It can handle simple sites and is as completely user-customisable as the downloader system. The client starts with multiple login scripts by default, which you can review under network->downloaders->manage logins : Many sites grant all their content without you having to log in at all, but others require it for NSFW or special content, or you may wish to take advantage of site-side user preferences like personal blacklists. If you wish, you can give hydrus some login details here, and it will try to login--just as a browser would--before it downloads anything from that domain. Warning For multiple reasons, I do not recommend you use important accounts with hydrus. Use a throwaway account you don't care much about. To start using a login script, select the domain and click 'edit credentials'. You'll put in your username/password, and then 'activate' the login for the domain, and that should be it! The next time you try to get something from that site, the first request will wait (usually about ten seconds) while a login popup performs the login. Most logins last for about thirty days (and many refresh that 30-day timer every time you make a new request), so once you are set up, you usually never notice it again, especially if you have a subscription on the domain. Most sites only have one way of logging in, but hydrus does support more. Hentai Foundry is a good example--by default, the client performs the 'click-through' login as a guest, which requires no credentials and means any hydrus client can get any content from the start. But this way of logging in only lasts about 60 minutes or so before having to be refreshed, and it does not hide any spicy stuff, so if you use HF a lot, I recommend you create a throwaway account, set the filters you like in your HF profile (e.g. no guro content), and then click the 'change login script' in the client to the proper username/pass login. The login system is new and still a bit experimental. Don't try to pull off anything too weird with it! If anything goes wrong, it will likely delay the script (and hence the whole domain) from working for a while, or invalidate it entirely. If the error is something simple, like a password typo or current server maintenance, go back to this dialog to fix and scrub the error and try again. If the site just changed its layout, you may need to update the login script. If it is more complicated, please contact me, hydrus_dev, with the details! If you would like to login to a site that is not yet supported by hydrus (usually ones with a Captcha in the login page), see about getting a web browser add-on that lets you export a cookies.txt (either for the whole browser or just for that domain) and then drag and drop that file onto the hydrus network->data->review session cookies dialog. This sometimes does not work if your add-on's export formatting is unusual. If it does work, hydrus will import and use those cookies, which skips the login by making your hydrus pretend to be your browser directly. This is obviously advanced and hacky, so if you need to do it, let me know how you get on and what tools you find work best!","title":"downloading"},{"location":"getting_started_downloading.html#getting_started_with_downloading","text":"","title":"getting started with downloading"},{"location":"getting_started_downloading.html#downloading","text":"The hydrus client has a sophisticated and completely user-customisable download system. It can pull from any booru or regular gallery site or imageboard, and also from some special examples like twitter and tumblr. A fresh install will by default have support for the bigger sites, but it is possible, with some work, for any user to create a new shareable downloader for a new site. The downloader is highly parallelisable, and while the default bandwidth rules should stop you from running too hot and downloading so much at once that you annoy the servers you are downloading from, there are no brakes in the program on what you can get. Danger It is very important that you take this slow. Many users get overexcited with their new ability to download 500,000 files and then do so , only discovering later that 98% of what they got was junk that they now have to wade through. Figure out what workflows work for you, how fast you process files, what content you actually want, how much bandwidth and hard drive space you have, and prioritise and throttle your incoming downloads to match. If you can realistically only archive/delete filter 50 files a day, there is little benefit to downloading 500 new files a day. START SLOW. It also takes a decent whack of CPU to import a file. You'll usually never notice this with just one hard drive import going, but if you have twenty different download queues all competing for database access and individual 0.1-second hits of heavy CPU work, you will discover your client starts to judder and lag. Keep it in mind, and you'll figure out what your computer is happy with. I also recommend you try to keep your total loaded files/urls to be under 20,000 to keep things snappy. Remember that you can pause your import queues, if you need to calm things down a bit.","title":"downloading"},{"location":"getting_started_downloading.html#start","text":"Open the new page selector with F9 and then hit download->gallery : The gallery page can download from multiple sources at the same time. Each entry in the list represents a basic combination of two things: source The site you are getting from. Safebooru or Danbooru or Deviant Art or twitter or anywhere else. query text Something like 'contrapposto' or 'blonde_hair blue_eyes' or an artist name like 'incase'. Whatever is searched on the site to return a list of ordered media. So, when you want to start a new download, you first select the source with the button and then type in a query in the text box and hit enter. The download will soon start and fill in information, and thumbnails should stream in, just like the hard drive importer. The downloader typically works by walking through the search's gallery pages one by one, queueing up the found files for later download. There are several intentional delays built into the system, so do not worry if work seems to halt for a little while--you will get a feel for hydrus's 'slow persistent growth' style with experience. Do a test download now, for fun! Pause its gallery search after a page or two, and then pause the file import queue after a dozen or so files come in. The thumbnail panel can only show results from one queue at a time, so double-click on an entry to 'highlight' it, which will show its thumbs and also give more detailed info and controls in the 'highlighted query' panel. I encourage you to explore the highlight panel over time, as it can show and do quite a lot. Double-click again to 'clear' it. It is a good idea to 'test' larger downloads, either by visiting the site itself for that query, or just waiting a bit and reviewing the first files that come in. Just make sure that you are getting what you thought you would, whether that be verifying that the query text is correct or that the site isn't only giving you bloated gifs or other bad quality files. The 'file limit', which stops the gallery search after the set number of files, is also great for limiting fishing expeditions (such as overbroad searches like 'wide_hips', which on the bigger boorus have 100k+ results and return variable quality). If the gallery search runs out of new files before the file limit is hit, the search will naturally stop (and the entry in the list should gain a \u23f9 'stop' symbol). Note that some sites only serve 25 or 50 pages of results, despite their indices suggesting hundreds. If you notice that one site always bombs out at, say, 500 results, it may be due to a decision on their end. You can usually test this by visiting the pages hydrus tried in your web browser. In general, particularly when starting out, artist searches are best. They are usually fewer than a thousand files and have fairly uniform quality throughout.","title":"let's do it"},{"location":"getting_started_downloading.html#parsing_tags","text":"But we don't just want files--most sites offer tags as well. By default, hydrus now starts with a local tag service called 'downloader tags' and it will parse (get) all the tags from normal gallery sites and put them in this service. You don't have to do anything, you will get some decent tags. As you use the client, you will figure out which tags you like and where you want them. On the downloader page, click tag import options : This is an important dialog, although you will not need to use it much. It governs which tags are parsed and where they go. To keep things easy to manage, a new downloader will refer to the 'default' tag import options for a website, but for now let's set some values just for this downloader: You can see that each tag service on your client has a separate section. If you add the PTR, that will get a new box too. A new client is set to get all tags for 'downloader tags' service. Things can get much more complicated. Have a play around with the options here as you figure things out. Most of the controls have tooltips or longer explainers in sub-dialogs, so don't be afraid to try things. It is easy to get tens of thousands of tags by downloading this way. Different sites offer different kinds and qualities of tags, and the client's downloaders (which were designed by me, the dev, or a user) may parse all or only some of them. Many users like to just get everything on offer, but others only ever want, say, 'creator', 'series', and 'character' tags. If you feel brave, click that 'all tags' button, which will take you into hydrus's advanced 'tag filter', which allows you to select which of the incoming list of tags will be added. The blacklist button will let you skip downloading files that have certain tags (perhaps you would like to auto-skip all images with 'gore', 'scat', or 'diaper'?), again using the tag filter, while the whitelist enables you to only allow files that have at least one of a set of tags. The 'additional tags' adds some fixed personal tags to all files coming in--for instance, you might like to add 'process into favourites' to your 'my tags' for some query you really like so you can find those files again later and process them separately. That little 'cog' icon button can also do some advanced things. To edit the defaults, hit up network->downloaders->manage default tag import options . You should do this as you get a better idea of your preferences. You can set them for all file posts generally, all watchers, and for specific sites as well. Warning The file limit and file/tag import options on the upper panel, if changed, will only apply to new queries. If you want to change the options for an existing queue, either do so on its highlight panel below or use the 'set options to queries' button.","title":"parsing tags"},{"location":"getting_started_downloading.html#threads","text":"If you are an imageboard user, try going to a thread you like and drag-and-drop its URL (straight from your web browser's address bar) onto the hydrus client. It should open up a new 'watcher' page and import the thread's files! With only one URL to check, watchers are a little simpler than gallery searches, but as that page is likely receiving frequent updates, it checks it over and over until it dies. By default, the watcher's 'checker options' will regulate how quickly it checks based on the speed at which new files are coming in--if a thread is fast, it will check frequently; if it is running slow, it may only check once per day. When a thread falls below a critical posting velocity or 404s, checking stops. In general, you can leave the checker options alone, but you might like to revisit them if you are always visiting faster or slower boards and find you are missing files or getting DEAD too early.","title":"watching threads"},{"location":"getting_started_downloading.html#bandwidth","text":"It will not be too long until you see a \"bandwidth free in xxxxx...\" message. As a long-term storage solution, hydrus is designed to be polite in its downloading--both to the source server and your computer. The client's default bandwidth rules have some caps to stop big mistakes, spread out larger jobs, and at a bare minimum, no domain will be hit more than once a second. All the bandwidth rules are completely customisable. They can get quite complicated. I strongly recommend you not look for them until you have more experience. I especially strongly recommend you not ever turn them all off, thinking that will improve something, as you'll probably render the client too laggy to function and get yourself an IP ban from the next server you pull from. If you want to download 10,000 files, set up the queue and let it work. The client will take breaks, likely even to the next day, but it will get there in time. Many users like to leave their clients on all the time, just running in the background, which makes these sorts of downloads a breeze--you check back in the evening and discover your download queues, watchers, and subscriptions have given you another thousand things to deal with. Again: the real problem with downloading is not finding new things, it is keeping up with what you get. Start slow and figure out what is important to your bandwidth budget, hard drive budget, and free time budget. Almost everyone fails at this.","title":"bandwidth"},{"location":"getting_started_downloading.html#subscriptions","text":"Subscriptions are a way to automatically recheck a good query in future, to keep up with new files. Many users come to use them. When you are comfortable with downloaders and have an idea of what you like, come back and read the subscription help, which is here .","title":"subscriptions"},{"location":"getting_started_downloading.html#other_downloaders","text":"There are two other ways of downloading, mostly for advanced or one-off use. The url downloader works like the gallery downloader but does not do searches. You can paste downloadable URLs to it, and it will work through them as one list. Dragging and dropping recognisable URLs onto the client (e.g. from your web browser) will also spawn and use this downloader. The simple downloader will do very simple parsing for unusual jobs. If you want to download all the images in a page, or all the image link destinations, this is the one to use. There are several default parsing rules to choose from, and if you learn the downloader system yourself, it will be easy to make more.","title":"other downloading"},{"location":"getting_started_downloading.html#logins","text":"The client now supports a flexible (but slightly prototype and ugly) login system. It can handle simple sites and is as completely user-customisable as the downloader system. The client starts with multiple login scripts by default, which you can review under network->downloaders->manage logins : Many sites grant all their content without you having to log in at all, but others require it for NSFW or special content, or you may wish to take advantage of site-side user preferences like personal blacklists. If you wish, you can give hydrus some login details here, and it will try to login--just as a browser would--before it downloads anything from that domain. Warning For multiple reasons, I do not recommend you use important accounts with hydrus. Use a throwaway account you don't care much about. To start using a login script, select the domain and click 'edit credentials'. You'll put in your username/password, and then 'activate' the login for the domain, and that should be it! The next time you try to get something from that site, the first request will wait (usually about ten seconds) while a login popup performs the login. Most logins last for about thirty days (and many refresh that 30-day timer every time you make a new request), so once you are set up, you usually never notice it again, especially if you have a subscription on the domain. Most sites only have one way of logging in, but hydrus does support more. Hentai Foundry is a good example--by default, the client performs the 'click-through' login as a guest, which requires no credentials and means any hydrus client can get any content from the start. But this way of logging in only lasts about 60 minutes or so before having to be refreshed, and it does not hide any spicy stuff, so if you use HF a lot, I recommend you create a throwaway account, set the filters you like in your HF profile (e.g. no guro content), and then click the 'change login script' in the client to the proper username/pass login. The login system is new and still a bit experimental. Don't try to pull off anything too weird with it! If anything goes wrong, it will likely delay the script (and hence the whole domain) from working for a while, or invalidate it entirely. If the error is something simple, like a password typo or current server maintenance, go back to this dialog to fix and scrub the error and try again. If the site just changed its layout, you may need to update the login script. If it is more complicated, please contact me, hydrus_dev, with the details! If you would like to login to a site that is not yet supported by hydrus (usually ones with a Captcha in the login page), see about getting a web browser add-on that lets you export a cookies.txt (either for the whole browser or just for that domain) and then drag and drop that file onto the hydrus network->data->review session cookies dialog. This sometimes does not work if your add-on's export formatting is unusual. If it does work, hydrus will import and use those cookies, which skips the login by making your hydrus pretend to be your browser directly. This is obviously advanced and hacky, so if you need to do it, let me know how you get on and what tools you find work best!","title":"logins"},{"location":"getting_started_files.html","text":"getting started with files \u00b6 If any of this is confusing, a simpler guide is here , and some video guides are here ! Warning Hydrus can be powerful, and you control everything. By default, you are not connected to any servers and absolutely nothing is shared with other users--and you can't accidentally one-click your way to exposing your whole collection--but if you tag private files with real names and click to upload that data to a tag repository that other people have access to, the program won't try to stop you. If you want to do private sexy slideshows of your shy wife, that's great, but think twice before you upload files or tags anywhere, particularly as you learn. It is impossible to contain leaks of private information. There are no limits and few brakes on your behaviour. It is possible to import millions of files. For many new users, their first mistake is downloading too much too fast in overexcitement and becoming overwhelmed. Take things slow and figure out good processing workflows that work for your schedule before you start adding 500 subscriptions. the problem \u00b6 If you have ever seen something like this-- --then you already know the problem: using a filesystem to manage a lot of images sucks. Finding the right picture quickly can be difficult. Finding everything by a particular artist at a particular resolution is unthinkable. Integrating new files into the whole nested-folder mess is a further pain, and most operating systems bug out when displaying 10,000+ thumbnails. so, what does the hydrus client do? \u00b6 Let's first focus on importing files. When you first boot the client, you will see a blank page. There are no files in the database and so there is nothing to search. To get started, I suggest you simply drag-and-drop a folder with a hundred or so images onto the main window. A dialog will appear affirming what you want to import. Ok that, and a new page will open. Thumbnails will stream in as the software processes each file. The files are being imported into the client's database. The client discards their filenames. Notice your original folder and its files are untouched. You can move the originals somewhere else, delete them, and the client will still return searches fine. In the same way, you can delete from the client, and the original files will remain unchanged--import is a copy , not a move, operation. The client performs all its operations on its internal database, which holds copies of the files it imports. If you find yourself enjoying using the client and decide to completely switch over, you can delete the original files you import without worry. You can always export them back again later. FAQ: can the client manage files from their original locations? Now: Click on a thumbnail; it'll show in the preview screen, bottom left. Double- or middle-click the thumbnail to open the media viewer. You can hit F to switch between giving the fullscreen a frame or not. You can use your scrollwheel or page up/down to browse the media and ctrl+scrollwheel to zoom in and out. Move your mouse to the top-left, top-middle and top-right of the media viewer. You should see some 'hover' panels pop into place. The one on the left is for tags, the middle is for browsing and zoom commands, and the right is for status and ratings icons. You will learn more about these things as you get more experience with the program. Press Enter or double/middle-click again to close the media viewer. You can quickly select multiple files by shift- or ctrl- clicking. Notice how the status bar at the bottom of the screen updates with the number selected and their total size. Right-clicking your selection will present another summary and many actions. Hit F9 to bring up a new page chooser. You can navigate it with the arrow keys, your numpad, or your mouse. On the left of a normal search page is a text box. When it is focused, a dropdown window appears. It looks like this: This is where you enter the predicates that define the current search. If the text box is empty, the dropdown will show 'system' tags that let you search by file metadata such as file size or animation duration. To select one, press the up or down arrow keys and then enter, or double click with the mouse. When you have some tags in your database, typing in the text box will search them: The (number) shows how many files have that tag, and hence how large the search result will be if you select that tag. Clicking 'searching immediately' will pause the searcher, letting you add several tags in a row without sending it off to get results immediately. Ignore the other buttons for now--you will figure them out as you gain experience with the program. You can remove from the list of 'active tags' in the box above with a double-click, or by entering the exact same tag again through the dropdown. Play with the system tags more if you like, and the sort-by dropdown. The collect-by dropdown is advanced, so wait until you understand namespaces before expecting it to do anything. To close a page, middle-click its tab. The client can currently import the following mimetypes: image/bmp (.bmp - converted to image/png on import) image/gif (.gif) image/png (.png) image/apng (.apng) image/jpeg (.jpg) image/tiff (.tiff) image/webp (.webp) video/x-msvideo (.avi) video/x-flv (.flv) video/x-matroska (.mkv) video/quicktime (.mov) video/mp4 (.mp4) video/mpeg (.mpeg) video/webm (.webm) video/x-ms-wmv (.wmv) audio/mp3 (.mp3) audio/ogg (.ogg) audio/flac (.flac) audio/x-ms-wma (.wma) application/x-shockwave-flash (.swf) application/pdf (.pdf) application/x-photoshop (.psd) application/clip (.clip) application/vnd.rar (.rar) application/zip (.zip) application/x-7z-compressed (.7z) Although some support is imperfect for the complicated filetypes. For the Windows and Linux built releases, hydrus now embeds an MPV player for video, audio and gifs, which provides smooth playback and audio, but some other environments may not support MPV and so will default when possible to the native hydrus software renderer, which does not support audio. When something does not render how you want, right-clicking on its thumbnail presents the option 'open externally', which will open the file in the appropriate default program (e.g. ACDSee, VLC). The client can also download files from several websites, including 4chan and other imageboards, many boorus, and gallery sites like deviant art and hentai foundry. You will learn more about this later. inbox and archiving \u00b6 The client sends newly imported files to an inbox , just like your email. Inbox acts like a tag, matched by 'system:inbox'. A small envelope icon is drawn in the top corner of all inbox files: If you are sure you want to keep a file long-term, you should archive it, which will remove it from the inbox. You can archive from your selected thumbnails' right-click menu, or by pressing F7 . If you make a mistake, you can spam Ctrl + Z for undo or hit Shift + F7 on any set of files to explicitly return them to the inbox. Anything you do not want to keep should be deleted by selecting from the right-click menu or by hitting the delete key. Deleted files are sent to the trash. They will get a little trash icon: A trashed file will not appear in subsequent normal searches, although you can search the trash specifically by clicking the 'my files' button on the autocomplete dropdown and changing the file domain to 'trash'. Undeleting a file ( Shift + Del ) will return it to 'my files' as if nothing had happened. Files that remain in the trash will be permanently deleted, usually after a few days. You can change the permanent deletion behaviour in the client's options. A quick way of processing new files is\u2013 filtering \u00b6 Lets say you just downloaded a good thread, or perhaps you just imported an old folder of miscellany. You now have a whole bunch of files in your inbox--some good, some awful. You probably want to quickly go through them, saying yes, yes, yes, no, yes, no, no, yes , where yes means 'keep and archive' and no means 'delete this trash'. Filtering is the solution. Select some thumbnails, and either choose filter->archive/delete from the right-click menu or hit F12. You will see them in a special version of the media viewer, with the following controls: Left Button , Space , or F7 : keep and archive the file, move on Right Button or Del : delete the file, move on Up : Skip this file, move on Middle Button or Backspace : I didn't mean that, go back one Esc , Enter , or F12 : stop filtering now Your choices will not be committed until you finish filtering. This saves time. lastly \u00b6 The hydrus client's workflows are not designed for half-finished files that you are still working on. Think of it as a giant archive for everything excellent you have decided to store away. It lets you find and remember these things quickly. In general, hydrus is good for individual files like you commonly find on imageboards or boorus. Although advanced users can cobble together some page-tag-based solutions, it is not yet great for multi-file media like comics and definitely not as a typical playlist-based music player. If you are looking for a comic manager to supplement hydrus, check out this user-made guide to other archiving software here ! And although the client can hold millions of files, it starts to creak and chug when displaying or otherwise tracking more than about 40,000 or so in a single gui window. As you learn to use it, please try not to let your download queues or general search pages regularly sit at more than 40 or 50k total items , or you'll start to slow other things down. Another common mistake is to leave one large 'system:everything' or 'system:inbox' page open with 70k+ files. For these sorts of 'ongoing processing' pages, try adding a 'system:limit=256' to keep them snappy. One user mentioned he had regular gui hangs of thirty seconds or so, and when we looked into it, it turned out his handful of download pages had three million files queued up! Just try and take things slow until you figure out what your computer's limits are.","title":"files"},{"location":"getting_started_files.html#getting_started_with_files","text":"If any of this is confusing, a simpler guide is here , and some video guides are here ! Warning Hydrus can be powerful, and you control everything. By default, you are not connected to any servers and absolutely nothing is shared with other users--and you can't accidentally one-click your way to exposing your whole collection--but if you tag private files with real names and click to upload that data to a tag repository that other people have access to, the program won't try to stop you. If you want to do private sexy slideshows of your shy wife, that's great, but think twice before you upload files or tags anywhere, particularly as you learn. It is impossible to contain leaks of private information. There are no limits and few brakes on your behaviour. It is possible to import millions of files. For many new users, their first mistake is downloading too much too fast in overexcitement and becoming overwhelmed. Take things slow and figure out good processing workflows that work for your schedule before you start adding 500 subscriptions.","title":"getting started with files"},{"location":"getting_started_files.html#hellmode_dot_exe","text":"If you have ever seen something like this-- --then you already know the problem: using a filesystem to manage a lot of images sucks. Finding the right picture quickly can be difficult. Finding everything by a particular artist at a particular resolution is unthinkable. Integrating new files into the whole nested-folder mess is a further pain, and most operating systems bug out when displaying 10,000+ thumbnails.","title":"the problem"},{"location":"getting_started_files.html#the_client","text":"Let's first focus on importing files. When you first boot the client, you will see a blank page. There are no files in the database and so there is nothing to search. To get started, I suggest you simply drag-and-drop a folder with a hundred or so images onto the main window. A dialog will appear affirming what you want to import. Ok that, and a new page will open. Thumbnails will stream in as the software processes each file. The files are being imported into the client's database. The client discards their filenames. Notice your original folder and its files are untouched. You can move the originals somewhere else, delete them, and the client will still return searches fine. In the same way, you can delete from the client, and the original files will remain unchanged--import is a copy , not a move, operation. The client performs all its operations on its internal database, which holds copies of the files it imports. If you find yourself enjoying using the client and decide to completely switch over, you can delete the original files you import without worry. You can always export them back again later. FAQ: can the client manage files from their original locations? Now: Click on a thumbnail; it'll show in the preview screen, bottom left. Double- or middle-click the thumbnail to open the media viewer. You can hit F to switch between giving the fullscreen a frame or not. You can use your scrollwheel or page up/down to browse the media and ctrl+scrollwheel to zoom in and out. Move your mouse to the top-left, top-middle and top-right of the media viewer. You should see some 'hover' panels pop into place. The one on the left is for tags, the middle is for browsing and zoom commands, and the right is for status and ratings icons. You will learn more about these things as you get more experience with the program. Press Enter or double/middle-click again to close the media viewer. You can quickly select multiple files by shift- or ctrl- clicking. Notice how the status bar at the bottom of the screen updates with the number selected and their total size. Right-clicking your selection will present another summary and many actions. Hit F9 to bring up a new page chooser. You can navigate it with the arrow keys, your numpad, or your mouse. On the left of a normal search page is a text box. When it is focused, a dropdown window appears. It looks like this: This is where you enter the predicates that define the current search. If the text box is empty, the dropdown will show 'system' tags that let you search by file metadata such as file size or animation duration. To select one, press the up or down arrow keys and then enter, or double click with the mouse. When you have some tags in your database, typing in the text box will search them: The (number) shows how many files have that tag, and hence how large the search result will be if you select that tag. Clicking 'searching immediately' will pause the searcher, letting you add several tags in a row without sending it off to get results immediately. Ignore the other buttons for now--you will figure them out as you gain experience with the program. You can remove from the list of 'active tags' in the box above with a double-click, or by entering the exact same tag again through the dropdown. Play with the system tags more if you like, and the sort-by dropdown. The collect-by dropdown is advanced, so wait until you understand namespaces before expecting it to do anything. To close a page, middle-click its tab. The client can currently import the following mimetypes: image/bmp (.bmp - converted to image/png on import) image/gif (.gif) image/png (.png) image/apng (.apng) image/jpeg (.jpg) image/tiff (.tiff) image/webp (.webp) video/x-msvideo (.avi) video/x-flv (.flv) video/x-matroska (.mkv) video/quicktime (.mov) video/mp4 (.mp4) video/mpeg (.mpeg) video/webm (.webm) video/x-ms-wmv (.wmv) audio/mp3 (.mp3) audio/ogg (.ogg) audio/flac (.flac) audio/x-ms-wma (.wma) application/x-shockwave-flash (.swf) application/pdf (.pdf) application/x-photoshop (.psd) application/clip (.clip) application/vnd.rar (.rar) application/zip (.zip) application/x-7z-compressed (.7z) Although some support is imperfect for the complicated filetypes. For the Windows and Linux built releases, hydrus now embeds an MPV player for video, audio and gifs, which provides smooth playback and audio, but some other environments may not support MPV and so will default when possible to the native hydrus software renderer, which does not support audio. When something does not render how you want, right-clicking on its thumbnail presents the option 'open externally', which will open the file in the appropriate default program (e.g. ACDSee, VLC). The client can also download files from several websites, including 4chan and other imageboards, many boorus, and gallery sites like deviant art and hentai foundry. You will learn more about this later.","title":"so, what does the hydrus client do?"},{"location":"getting_started_files.html#inbox","text":"The client sends newly imported files to an inbox , just like your email. Inbox acts like a tag, matched by 'system:inbox'. A small envelope icon is drawn in the top corner of all inbox files: If you are sure you want to keep a file long-term, you should archive it, which will remove it from the inbox. You can archive from your selected thumbnails' right-click menu, or by pressing F7 . If you make a mistake, you can spam Ctrl + Z for undo or hit Shift + F7 on any set of files to explicitly return them to the inbox. Anything you do not want to keep should be deleted by selecting from the right-click menu or by hitting the delete key. Deleted files are sent to the trash. They will get a little trash icon: A trashed file will not appear in subsequent normal searches, although you can search the trash specifically by clicking the 'my files' button on the autocomplete dropdown and changing the file domain to 'trash'. Undeleting a file ( Shift + Del ) will return it to 'my files' as if nothing had happened. Files that remain in the trash will be permanently deleted, usually after a few days. You can change the permanent deletion behaviour in the client's options. A quick way of processing new files is\u2013","title":"inbox and archiving"},{"location":"getting_started_files.html#filtering_inbox","text":"Lets say you just downloaded a good thread, or perhaps you just imported an old folder of miscellany. You now have a whole bunch of files in your inbox--some good, some awful. You probably want to quickly go through them, saying yes, yes, yes, no, yes, no, no, yes , where yes means 'keep and archive' and no means 'delete this trash'. Filtering is the solution. Select some thumbnails, and either choose filter->archive/delete from the right-click menu or hit F12. You will see them in a special version of the media viewer, with the following controls: Left Button , Space , or F7 : keep and archive the file, move on Right Button or Del : delete the file, move on Up : Skip this file, move on Middle Button or Backspace : I didn't mean that, go back one Esc , Enter , or F12 : stop filtering now Your choices will not be committed until you finish filtering. This saves time.","title":"filtering"},{"location":"getting_started_files.html#what_hydrus_is_for","text":"The hydrus client's workflows are not designed for half-finished files that you are still working on. Think of it as a giant archive for everything excellent you have decided to store away. It lets you find and remember these things quickly. In general, hydrus is good for individual files like you commonly find on imageboards or boorus. Although advanced users can cobble together some page-tag-based solutions, it is not yet great for multi-file media like comics and definitely not as a typical playlist-based music player. If you are looking for a comic manager to supplement hydrus, check out this user-made guide to other archiving software here ! And although the client can hold millions of files, it starts to creak and chug when displaying or otherwise tracking more than about 40,000 or so in a single gui window. As you learn to use it, please try not to let your download queues or general search pages regularly sit at more than 40 or 50k total items , or you'll start to slow other things down. Another common mistake is to leave one large 'system:everything' or 'system:inbox' page open with 70k+ files. For these sorts of 'ongoing processing' pages, try adding a 'system:limit=256' to keep them snappy. One user mentioned he had regular gui hangs of thirty seconds or so, and when we looked into it, it turned out his handful of download pages had three million files queued up! Just try and take things slow until you figure out what your computer's limits are.","title":"lastly"},{"location":"getting_started_installing.html","text":"If any of this is confusing, a simpler guide is here , and some video guides are here ! downloading \u00b6 You can get the latest release at my github releases page . I try to release a new version every Wednesday by 8pm EST and write an accompanying post on my tumblr and a Hydrus Network General thread on 8chan.moe /t/ . installing \u00b6 The hydrus releases are 64-bit only. If you are a python expert, there is the slimmest chance you'll be able to get it running from source on a 32-bit machine, but it would be easier just to find a newer computer to run it on. Windows macOS Linux From Source If you want the easy solution, download the .exe installer. Run it, hit ok several times. If you know what you are doing and want a little more control, get the .zip. Don't extract it to Program Files unless you are willing to run it as administrator every time (it stores all its user data inside its own folder). You probably want something like D:\\hydrus. Note if you run <Win10, you may need Visual C++ Redistributable for Visual Studio 2015 , if you don't already have it for vidya. If you run Win7, you will need some/all core OS updates released before 2017. If you use Windows 10 N (a version of Windows without some media playback features), you will likely need the 'Media Feature Pack'. There have been several versions of this, so it may best found by searching for the latest version or hitting Windows Update, but otherwise check here . Get the .dmg App. Open it, drag it to Applications, and check the readme inside. Get the .tag.gz. Extract it somewhere useful and create shortcuts to 'client' and 'server' as you like. The build is made on Ubuntu, so if you run something else, compatibility is hit and miss. If you use Arch Linux, you can check out the AUR package a user maintains here . If you have problems running the Ubuntu build, users with some python experience generally find running from source works well. You might need to get 'libmpv1' to get mpv working and playing video/audio. This is the mpv library, not the player. Check help->about to see if it is available--if not, see if you can get it with apt . You can also try running the Windows version in wine . If you have some python experience, you can run from source . By default, hydrus stores all its data\u2014options, files, subscriptions, everything \u2014entirely inside its own directory. You can extract it to a usb stick, move it from one place to another, have multiple installs for multiple purposes, wrap it all up inside a truecrypt volume, whatever you like. The .exe installer writes some unavoidable uninstall registry stuff to Windows, but the 'installed' client itself will run fine if you manually move it. For macOS users The Hydrus App is non-portable and puts your database in ~/Library/Hydrus (i.e. /Users/[You]/Library/Hydrus ). You can update simply by replacing the old App with the new, but if you wish to backup, you should be looking at ~/Library/Hydrus , not the App itself. anti-virus \u00b6 Hydrus is made by an Anon out of duct tape and string. It combines file parsing tech with lots of network and database code in unusual and powerful ways, and all through a hacked-together executable that isn't signed by any big official company. Unfortunately, we have been hit by anti-virus false positives throughout development. Every few months, one or more of the larger anti-virus programs sees some code that looks like something bad, or they run the program in a testbed and don't like something it does, and then they quarantine it. Every single instance of this so far has been a false positive. They usually go away the next week or two when the next set of definitions roll out. Some hydrus users are kind enough to report the program as a false positive to the anti-virus companies themselves, which also helps here. Some users have never had the problem, some get hit regularly. The situation is obviously worse on Windows. If you try to extract the zip and client.exe or the whole folder suddenly disappears, please check your anti-virus software. I am interested in reports about these false-positives, just so I know what is going on. Sometimes I have been able to reduce problems by changing something in the build (one of these was, no shit, an anti-virus testbed running the installer and then opening the help html at the end, which launched Edge browser, which then triggered Windows Update, which hit UAC and was considered suspicious. I took out the 'open help' checkbox from the installer as a result). You should be careful about random software online. For my part, the program is completely open source, and I have a long track record of designing it with privacy foremost. There is no intentional spyware of any sort--the program never connects to another computer unless you tell it to. Furthermore, the exe you download is now built on github's cloud, so there are very few worries about a trojan-infected build environment putting something I did not intend into the program (as there once were when I built the release on my home machine). That doesn't stop Windows Defender from sometimes calling it an ugly name like \"Tedy.4675\" and definitively declaring \"This program is dangerous and executes commands from an attacker\" but that's the modern anti-virus ecosystem. There aren't excellent solutions to this problem. I don't like to say 'just exclude the program directory from your anti-virus settings', but some users are comfortable with this and say it works fine. One thing I do know that helps (with other things too), if you are using the default Windows Defender, is going into the Windows Security shield icon on your taskbar, and 'virus and threat protection' and then 'virus and threat protection settings', and turning off 'Cloud-delivered protection' and 'Automatic sample submission'. It seems with these on, Windows will talk with a central server about executables you run and download early updates, and this gives a lot of false positives. If you are still concerned, please feel free to run from source, as above. You are controlling everything, then, and can change anything about the program you like. Or you can only run releases from four weeks ago, since you know the community would notice by then if there ever were a true positive. Or just run it in a sandbox and watch its network traffic. In 2022 I am going to explore a different build process to see if that reduces the false positives. We currently make the executable with PyInstaller, which has some odd environment set-up the anti-virus testbeds don't seem to like, and perhaps PyOxidizer will be better. We'll see. running \u00b6 To run the client: Windows macOS Linux For the installer, run the Start menu shortcut it added. For the extract, run 'client.exe' in the base directory, or make a shortcut to it. Run the App you installed. Run the 'client' executable in the base directory. You may be able to double-click it, otherwise you are talking ./client from the terminal. If you experience virtual memory crashes, please review this thorough guide by a user. updating \u00b6 Warning Hydrus is imageboard-tier software, wild and fun but unprofessional. It is written by one Anon spinning a lot of plates. Mistakes happen from time to time, usually in the update process. There are also no training wheels to stop you from accidentally overwriting your whole db if you screw around. Be careful when updating. Make backups beforehand! Hydrus does not auto-update. It will stay the same version unless you download and install a new one. Although I put out an new version every week, you can update far less often if you want. The client keeps to itself, so if it does exactly what you want and a new version does nothing you care about, you can just leave it. Other users enjoy updating every week, simply because it makes for a nice schedule. Others like to stay a week or two behind what is current, just in case I mess up and cause a temporary bug in something they like. A user has written a longer and more formal guide to updating, and information on the 334->335 step here . The update process: If the client is running, close it! If you maintain a backup, run it now! If you use the installer, just download the new installer and run it. It should detect where the last install was and overwrite everything automatically. If you extract, then just extract the new version right on top of your current install and overwrite manually. Start your client or server. It may take a few minutes to update its database. I will say in the release post if it is likely to take longer. Unless the update specifically disables or reconfigures something, all your files and tags and settings will be remembered after the update. Releases typically need to update your database to their version. New releases can retroactively perform older database updates, so if the new version is v255 but your database is on v250, you generally only need to get the v255 release, and it'll do all the intervening v250->v251, v251->v252, etc... update steps in order as soon as you boot it. If you need to update from a release more than, say, ten versions older than current, see below. You might also like to skim the release posts or changelog to see what is new. Clients and servers of different versions can usually connect to one another, but from time to time, I make a change to the network protocol, and you will get polite error messages if you try to connect to a newer server with an older client or vice versa . There is still no need to update the client--it'll still do local stuff like searching for files completely fine. Read my release posts and judge for yourself what you want to do. clean installs \u00b6 This is only relevant if you update and cannot boot at all. Very rarely, hydrus needs a clean install. This can be due to a special update like when we moved from 32-bit to 64-bit or needing to otherwise 'reset' a custom install situation. The problem is usually that a library file has been renamed in a new version and hydrus has trouble figuring out whether to use the older one (from a previous version) or the newer. In any case, if you cannot boot hydrus and it either fails silently or you get a crash log or system-level error popup complaining in a technical way about not being able to load a dll/pyd/so file, you may need a clean install, which essentially means clearing any old files out and reinstalling. However, you need to be careful not to delete your database! It sounds silly, but at least one user has made a mistake here. The process is simple, do not deviate: Make a backup if you can! Go to your install directory. Delete all the files and folders except the 'db' dir (and all of its contents, obviously). Reinstall/extract hydrus as you normally do. After that, you'll have a 'clean' version of hydrus that only has the latest version's dlls. If hydrus still will not boot, I recommend you roll back to your last working backup and let me, hydrus dev, know what your error is. big updates \u00b6 If you have not updated in some time--say twenty versions or more--doing it all in one jump, like v250->v290, is likely not going to work. I am doing a lot of unusual stuff with hydrus, change my code at a fast pace, and do not have a ton of testing in place. Hydrus update code often falls to bitrot , and so some underlying truth I assumed for the v255->v256 code may not still apply six months later. If you try to update more than 50 versions at once (i.e. trying to perform more than a year of updates in one go), the client will give you a polite error rather than even try. As a result, if you get a failure on trying to do a big update, try cutting the distance in half--try v270 first, and then if that works, try v270->v290. If it doesn't, try v260, and so on. If you narrow the gap down to just one version and still get an error, please let me know. I am very interested in these sorts of problems and will be happy to help figure out a fix with you (and everyone else who might be affected). All that said, and while updating is complex and every client is different, one user recently did a giant multi-year update and found this route worked and was efficient: 204 > 238 > 246 > 291 > 328 > 335 > 376 > 421 > 466 > 474 backing up \u00b6 I am not joking around: if you end up liking hydrus, you should back up your database Maintaining a regular backup is important for hydrus. The program stores a lot of complicated data that you will put hours and hours of work into, and if you only have one copy and your hard drive breaks, you could lose everything. This has happened before--to people who thought it would never happen to them--and it sucks big time to go through. Don't let it be you. Hydrus's database engine, SQLite, is excellent at keeping data safe, but it cannot work in a faulty environment. Ways in which users of hydrus have damaged/lost their database: Hard drive hardware failure (age, bad ventilation, bad cables, etc...) Lightning strike on non-protected socket or rough power cut on non-UPS'd power supply RAM failure Motherboard/PSU power problems Accidental deletion Accidental overwrite (usually during a borked update) Encrypted partition auto-dismount/other borked settings Cloud backup interfering with ongoing writes Network drive location not guaranteeing accurate file locks Some of those you can mitigate (don't run the database over a network!) and some will always be a problem, but if you have a backup, none of them can kill you. If you do not already have a backup routine for your files, this is a great time to start. I now run a backup every week of all my data so that if my computer blows up or anything else awful happens, I'll at worst have lost a few days' work. Before I did this, I once lost an entire drive with tens of thousands of files, and it felt awful. If you are new to saving a lot of media, I hope you can avoid what I felt. ;_; I use ToDoList to remind me of my jobs for the day, including backup tasks, and FreeFileSync to actually mirror over to an external usb drive. I recommend both highly (and for ToDoList, I recommend hiding the complicated columns, stripping it down to a simple interface). It isn't a huge expense to get a couple-TB usb drive either--it is absolutely worth it for the peace of mind. By default, hydrus stores all your user data in one location, so backing up is simple: the simple way - inside the client \u00b6 Go database->set up a database backup location in the client. This will tell the client where you want your backup to be stored. A fresh, empty directory on a different drive is ideal. Once you have your location set up, you can thereafter hit database->update database backup . It will lock everything and mirror your files, showing its progress in a popup message. The first time you make this backup, it may take a little while (as it will have to fully copy your database and all its files), but after that, it will only have to copy new or altered files and should only ever take a couple of minutes. Advanced users who have migrated their database across multiple locations will not have this option--use an external program in this case. the powerful (and best) way - using an external program \u00b6 If you would like to integrate hydrus into a broader backup scheme you already run, or you are an advanced user with a complicated hydrus install that you have migrated across multiple drives, then you need to backup two things: the client*.db files and your client_files directory(ies). By default, they are all stored in install_dir/db. The .db files contain your settings and file metadata like inbox/archive and tags, while the client_files subdirs store your actual media and its thumbnails. If everything is still under install_dir/db, then it is usually easiest to just backup the whole install dir, keeping a functional 'portable' copy of your install that you can restore no prob. Make sure you keep the .db files together--they are not interchangeable and mostly useless on their own! Shut the client down while you run the backup, obviously. Danger Do not put your live database in a folder that continuously syncs to a cloud backup. Many of these services will interfere with a running client and can cause database corruption. If you still want to use a system like this, either turn the sync off while the client is running, or use the above backup workflows to safely backup your client to a separate folder that syncs to the cloud. I recommend you always backup before you update, just in case there is a problem with my code that breaks your database. If that happens, please contact me , describing the problem, and revert to the functioning older version. I'll get on any problems like that immediately. backing up with not much space \u00b6 If you decide not to maintain a backup because you cannot afford drive space for all your files, please please at least back up your actual database files. Use FreeFileSync or a similar program to back up the four 'client*.db' files in install_dir/db when the client is not running. Just make sure you have a copy of those files, and then if your main install becomes damaged, we will have a reference to either roll back to or manually restore data from. Even if you lose a bunch of media files in this case, with an intact database we'll be able to schedule recovery of anything with a URL. If you are really short on space, note also that the database files are very compressible. A very large database where the four files add up to 70GB can compress down to 17GB zip with 7zip on default settings. This obviously takes some additional time to do, but if you are really short on space it may be the only way it fits, and if your only backup drive is a slow USB stick, then you might actually save time from not having to transfer the other 53GB! Media files (jpegs, webms, etc...) are generally not very compressible, usually 5% at best, so it is usually not worth trying. It is best to have all four database files. It is generally easy and quick to fix problems if you have a backup of all four. If client.caches.db is missing, you can recover but it might take ten or more hours of CPU work to regenerate. If client.mappings.db is missing, you might be able to recover tags for your local files from a mirror in an intact client.caches.db. However, client.master.db and client.db are the most important. If you lose either of those, or they become too damaged to read and you have no backup, then your database is essentially dead and likely every single archive and view and tag and note and url record you made is lost. This has happened before, do not let it be you.","title":"installing and updating"},{"location":"getting_started_installing.html#downloading","text":"You can get the latest release at my github releases page . I try to release a new version every Wednesday by 8pm EST and write an accompanying post on my tumblr and a Hydrus Network General thread on 8chan.moe /t/ .","title":"downloading"},{"location":"getting_started_installing.html#installing","text":"The hydrus releases are 64-bit only. If you are a python expert, there is the slimmest chance you'll be able to get it running from source on a 32-bit machine, but it would be easier just to find a newer computer to run it on. Windows macOS Linux From Source If you want the easy solution, download the .exe installer. Run it, hit ok several times. If you know what you are doing and want a little more control, get the .zip. Don't extract it to Program Files unless you are willing to run it as administrator every time (it stores all its user data inside its own folder). You probably want something like D:\\hydrus. Note if you run <Win10, you may need Visual C++ Redistributable for Visual Studio 2015 , if you don't already have it for vidya. If you run Win7, you will need some/all core OS updates released before 2017. If you use Windows 10 N (a version of Windows without some media playback features), you will likely need the 'Media Feature Pack'. There have been several versions of this, so it may best found by searching for the latest version or hitting Windows Update, but otherwise check here . Get the .dmg App. Open it, drag it to Applications, and check the readme inside. Get the .tag.gz. Extract it somewhere useful and create shortcuts to 'client' and 'server' as you like. The build is made on Ubuntu, so if you run something else, compatibility is hit and miss. If you use Arch Linux, you can check out the AUR package a user maintains here . If you have problems running the Ubuntu build, users with some python experience generally find running from source works well. You might need to get 'libmpv1' to get mpv working and playing video/audio. This is the mpv library, not the player. Check help->about to see if it is available--if not, see if you can get it with apt . You can also try running the Windows version in wine . If you have some python experience, you can run from source . By default, hydrus stores all its data\u2014options, files, subscriptions, everything \u2014entirely inside its own directory. You can extract it to a usb stick, move it from one place to another, have multiple installs for multiple purposes, wrap it all up inside a truecrypt volume, whatever you like. The .exe installer writes some unavoidable uninstall registry stuff to Windows, but the 'installed' client itself will run fine if you manually move it. For macOS users The Hydrus App is non-portable and puts your database in ~/Library/Hydrus (i.e. /Users/[You]/Library/Hydrus ). You can update simply by replacing the old App with the new, but if you wish to backup, you should be looking at ~/Library/Hydrus , not the App itself.","title":"installing"},{"location":"getting_started_installing.html#anti_virus","text":"Hydrus is made by an Anon out of duct tape and string. It combines file parsing tech with lots of network and database code in unusual and powerful ways, and all through a hacked-together executable that isn't signed by any big official company. Unfortunately, we have been hit by anti-virus false positives throughout development. Every few months, one or more of the larger anti-virus programs sees some code that looks like something bad, or they run the program in a testbed and don't like something it does, and then they quarantine it. Every single instance of this so far has been a false positive. They usually go away the next week or two when the next set of definitions roll out. Some hydrus users are kind enough to report the program as a false positive to the anti-virus companies themselves, which also helps here. Some users have never had the problem, some get hit regularly. The situation is obviously worse on Windows. If you try to extract the zip and client.exe or the whole folder suddenly disappears, please check your anti-virus software. I am interested in reports about these false-positives, just so I know what is going on. Sometimes I have been able to reduce problems by changing something in the build (one of these was, no shit, an anti-virus testbed running the installer and then opening the help html at the end, which launched Edge browser, which then triggered Windows Update, which hit UAC and was considered suspicious. I took out the 'open help' checkbox from the installer as a result). You should be careful about random software online. For my part, the program is completely open source, and I have a long track record of designing it with privacy foremost. There is no intentional spyware of any sort--the program never connects to another computer unless you tell it to. Furthermore, the exe you download is now built on github's cloud, so there are very few worries about a trojan-infected build environment putting something I did not intend into the program (as there once were when I built the release on my home machine). That doesn't stop Windows Defender from sometimes calling it an ugly name like \"Tedy.4675\" and definitively declaring \"This program is dangerous and executes commands from an attacker\" but that's the modern anti-virus ecosystem. There aren't excellent solutions to this problem. I don't like to say 'just exclude the program directory from your anti-virus settings', but some users are comfortable with this and say it works fine. One thing I do know that helps (with other things too), if you are using the default Windows Defender, is going into the Windows Security shield icon on your taskbar, and 'virus and threat protection' and then 'virus and threat protection settings', and turning off 'Cloud-delivered protection' and 'Automatic sample submission'. It seems with these on, Windows will talk with a central server about executables you run and download early updates, and this gives a lot of false positives. If you are still concerned, please feel free to run from source, as above. You are controlling everything, then, and can change anything about the program you like. Or you can only run releases from four weeks ago, since you know the community would notice by then if there ever were a true positive. Or just run it in a sandbox and watch its network traffic. In 2022 I am going to explore a different build process to see if that reduces the false positives. We currently make the executable with PyInstaller, which has some odd environment set-up the anti-virus testbeds don't seem to like, and perhaps PyOxidizer will be better. We'll see.","title":"anti-virus"},{"location":"getting_started_installing.html#running","text":"To run the client: Windows macOS Linux For the installer, run the Start menu shortcut it added. For the extract, run 'client.exe' in the base directory, or make a shortcut to it. Run the App you installed. Run the 'client' executable in the base directory. You may be able to double-click it, otherwise you are talking ./client from the terminal. If you experience virtual memory crashes, please review this thorough guide by a user.","title":"running"},{"location":"getting_started_installing.html#updating","text":"Warning Hydrus is imageboard-tier software, wild and fun but unprofessional. It is written by one Anon spinning a lot of plates. Mistakes happen from time to time, usually in the update process. There are also no training wheels to stop you from accidentally overwriting your whole db if you screw around. Be careful when updating. Make backups beforehand! Hydrus does not auto-update. It will stay the same version unless you download and install a new one. Although I put out an new version every week, you can update far less often if you want. The client keeps to itself, so if it does exactly what you want and a new version does nothing you care about, you can just leave it. Other users enjoy updating every week, simply because it makes for a nice schedule. Others like to stay a week or two behind what is current, just in case I mess up and cause a temporary bug in something they like. A user has written a longer and more formal guide to updating, and information on the 334->335 step here . The update process: If the client is running, close it! If you maintain a backup, run it now! If you use the installer, just download the new installer and run it. It should detect where the last install was and overwrite everything automatically. If you extract, then just extract the new version right on top of your current install and overwrite manually. Start your client or server. It may take a few minutes to update its database. I will say in the release post if it is likely to take longer. Unless the update specifically disables or reconfigures something, all your files and tags and settings will be remembered after the update. Releases typically need to update your database to their version. New releases can retroactively perform older database updates, so if the new version is v255 but your database is on v250, you generally only need to get the v255 release, and it'll do all the intervening v250->v251, v251->v252, etc... update steps in order as soon as you boot it. If you need to update from a release more than, say, ten versions older than current, see below. You might also like to skim the release posts or changelog to see what is new. Clients and servers of different versions can usually connect to one another, but from time to time, I make a change to the network protocol, and you will get polite error messages if you try to connect to a newer server with an older client or vice versa . There is still no need to update the client--it'll still do local stuff like searching for files completely fine. Read my release posts and judge for yourself what you want to do.","title":"updating"},{"location":"getting_started_installing.html#clean_installs","text":"This is only relevant if you update and cannot boot at all. Very rarely, hydrus needs a clean install. This can be due to a special update like when we moved from 32-bit to 64-bit or needing to otherwise 'reset' a custom install situation. The problem is usually that a library file has been renamed in a new version and hydrus has trouble figuring out whether to use the older one (from a previous version) or the newer. In any case, if you cannot boot hydrus and it either fails silently or you get a crash log or system-level error popup complaining in a technical way about not being able to load a dll/pyd/so file, you may need a clean install, which essentially means clearing any old files out and reinstalling. However, you need to be careful not to delete your database! It sounds silly, but at least one user has made a mistake here. The process is simple, do not deviate: Make a backup if you can! Go to your install directory. Delete all the files and folders except the 'db' dir (and all of its contents, obviously). Reinstall/extract hydrus as you normally do. After that, you'll have a 'clean' version of hydrus that only has the latest version's dlls. If hydrus still will not boot, I recommend you roll back to your last working backup and let me, hydrus dev, know what your error is.","title":"clean installs"},{"location":"getting_started_installing.html#big_updates","text":"If you have not updated in some time--say twenty versions or more--doing it all in one jump, like v250->v290, is likely not going to work. I am doing a lot of unusual stuff with hydrus, change my code at a fast pace, and do not have a ton of testing in place. Hydrus update code often falls to bitrot , and so some underlying truth I assumed for the v255->v256 code may not still apply six months later. If you try to update more than 50 versions at once (i.e. trying to perform more than a year of updates in one go), the client will give you a polite error rather than even try. As a result, if you get a failure on trying to do a big update, try cutting the distance in half--try v270 first, and then if that works, try v270->v290. If it doesn't, try v260, and so on. If you narrow the gap down to just one version and still get an error, please let me know. I am very interested in these sorts of problems and will be happy to help figure out a fix with you (and everyone else who might be affected). All that said, and while updating is complex and every client is different, one user recently did a giant multi-year update and found this route worked and was efficient: 204 > 238 > 246 > 291 > 328 > 335 > 376 > 421 > 466 > 474","title":"big updates"},{"location":"getting_started_installing.html#backing_up","text":"I am not joking around: if you end up liking hydrus, you should back up your database Maintaining a regular backup is important for hydrus. The program stores a lot of complicated data that you will put hours and hours of work into, and if you only have one copy and your hard drive breaks, you could lose everything. This has happened before--to people who thought it would never happen to them--and it sucks big time to go through. Don't let it be you. Hydrus's database engine, SQLite, is excellent at keeping data safe, but it cannot work in a faulty environment. Ways in which users of hydrus have damaged/lost their database: Hard drive hardware failure (age, bad ventilation, bad cables, etc...) Lightning strike on non-protected socket or rough power cut on non-UPS'd power supply RAM failure Motherboard/PSU power problems Accidental deletion Accidental overwrite (usually during a borked update) Encrypted partition auto-dismount/other borked settings Cloud backup interfering with ongoing writes Network drive location not guaranteeing accurate file locks Some of those you can mitigate (don't run the database over a network!) and some will always be a problem, but if you have a backup, none of them can kill you. If you do not already have a backup routine for your files, this is a great time to start. I now run a backup every week of all my data so that if my computer blows up or anything else awful happens, I'll at worst have lost a few days' work. Before I did this, I once lost an entire drive with tens of thousands of files, and it felt awful. If you are new to saving a lot of media, I hope you can avoid what I felt. ;_; I use ToDoList to remind me of my jobs for the day, including backup tasks, and FreeFileSync to actually mirror over to an external usb drive. I recommend both highly (and for ToDoList, I recommend hiding the complicated columns, stripping it down to a simple interface). It isn't a huge expense to get a couple-TB usb drive either--it is absolutely worth it for the peace of mind. By default, hydrus stores all your user data in one location, so backing up is simple:","title":"backing up"},{"location":"getting_started_installing.html#the_simple_way_-_inside_the_client","text":"Go database->set up a database backup location in the client. This will tell the client where you want your backup to be stored. A fresh, empty directory on a different drive is ideal. Once you have your location set up, you can thereafter hit database->update database backup . It will lock everything and mirror your files, showing its progress in a popup message. The first time you make this backup, it may take a little while (as it will have to fully copy your database and all its files), but after that, it will only have to copy new or altered files and should only ever take a couple of minutes. Advanced users who have migrated their database across multiple locations will not have this option--use an external program in this case.","title":"the simple way - inside the client"},{"location":"getting_started_installing.html#the_powerful_and_best_way_-_using_an_external_program","text":"If you would like to integrate hydrus into a broader backup scheme you already run, or you are an advanced user with a complicated hydrus install that you have migrated across multiple drives, then you need to backup two things: the client*.db files and your client_files directory(ies). By default, they are all stored in install_dir/db. The .db files contain your settings and file metadata like inbox/archive and tags, while the client_files subdirs store your actual media and its thumbnails. If everything is still under install_dir/db, then it is usually easiest to just backup the whole install dir, keeping a functional 'portable' copy of your install that you can restore no prob. Make sure you keep the .db files together--they are not interchangeable and mostly useless on their own! Shut the client down while you run the backup, obviously. Danger Do not put your live database in a folder that continuously syncs to a cloud backup. Many of these services will interfere with a running client and can cause database corruption. If you still want to use a system like this, either turn the sync off while the client is running, or use the above backup workflows to safely backup your client to a separate folder that syncs to the cloud. I recommend you always backup before you update, just in case there is a problem with my code that breaks your database. If that happens, please contact me , describing the problem, and revert to the functioning older version. I'll get on any problems like that immediately.","title":"the powerful (and best) way - using an external program"},{"location":"getting_started_installing.html#backing_up_small","text":"If you decide not to maintain a backup because you cannot afford drive space for all your files, please please at least back up your actual database files. Use FreeFileSync or a similar program to back up the four 'client*.db' files in install_dir/db when the client is not running. Just make sure you have a copy of those files, and then if your main install becomes damaged, we will have a reference to either roll back to or manually restore data from. Even if you lose a bunch of media files in this case, with an intact database we'll be able to schedule recovery of anything with a URL. If you are really short on space, note also that the database files are very compressible. A very large database where the four files add up to 70GB can compress down to 17GB zip with 7zip on default settings. This obviously takes some additional time to do, but if you are really short on space it may be the only way it fits, and if your only backup drive is a slow USB stick, then you might actually save time from not having to transfer the other 53GB! Media files (jpegs, webms, etc...) are generally not very compressible, usually 5% at best, so it is usually not worth trying. It is best to have all four database files. It is generally easy and quick to fix problems if you have a backup of all four. If client.caches.db is missing, you can recover but it might take ten or more hours of CPU work to regenerate. If client.mappings.db is missing, you might be able to recover tags for your local files from a mirror in an intact client.caches.db. However, client.master.db and client.db are the most important. If you lose either of those, or they become too damaged to read and you have no backup, then your database is essentially dead and likely every single archive and view and tag and note and url record you made is lost. This has happened before, do not let it be you.","title":"backing up with not much space"},{"location":"getting_started_more_files.html","text":"more getting started with files \u00b6 searching with wildcards \u00b6 The autocomplete tag dropdown supports wildcard searching with * . The * will match any number of characters. Every normal autocomplete search has a secret * on the end that you don't see, which is how full words get matched from you only typing in a few letters. This is useful when you can only remember part of a word, or can't spell part of it. You can put * characters anywhere, but you should experiment to get used to the exact way these searches work. Some results can be surprising! You can select the special predicate inserted at the top of your autocomplete results (the highlighted *gelion and *va*ge* above). It will return all files that match that wildcard, i.e. every file for every other tag in the dropdown list. This is particularly useful if you have a number of files with commonly structured over-informationed tags, like this: In this case, selecting the title:cool pic* predicate will return all three images in the same search, where you can conveniently give them some more-easily searched tags like series:cool pic and page:1 , page:2 , page:3 . more searching \u00b6 Let's look at the tag autocomplete dropdown again: favourite searches star Once you get experience with the client, have a play with this. Rather than leaving common search pages open, save them in here and load them up as needed. You will keep your client lightweight and save time. include current/pending tags Turn these on and off to control whether tag search predicates apply to tags the exist, or limit just to those pending to be uploaded to a tag repository. Just searching 'pending' tags is useful if you want to scan what you have pending to go up to the PTR--just turn off 'current' tags and search system:num tags > 0 . searching immediately This controls whether a change to the search tags will instantly run the new search and get new results. Turning this off is helpful if you want to add, remove, or replace several heavy search terms in a row without getting UI lag. OR You only see this if you have 'advanced mode' on. It is an experimental module. Have a play with it--it lets you enter some pretty complicated tags! file/tag domains By default, you will search in 'my files' and 'all known tags' domain. This is the intersection of your local media files (on your hard disk) and the union of all known tag searches. If you search for character:samus aran , then you will get file results from your 'my files' domain that have character:samus aran in any tag service. For most purposes, this search domain is fine, but as you use the client more, you may want to access different search domains. For instance, if you change the file domain to 'trash', then you will instead get files that are in your trash. Setting the tag domain to 'my tags' will ignore other tag services (e.g. the PTR) for all tag search predicates, so a system:num_tags or a character:samus aran will only look 'my tags'. Turning on 'advanced mode' gives access to more search domains. Some of them are subtly complicated and only useful for clever jobs--most of the time, you still want 'my files' and 'all known tags'. sorting with system limit \u00b6 If you add system:limit to a search, the client will consider what that page's file sort currently is. If it is simple enough--something like file size or import time--then it will sort your results before they come back and clip the limit according to that sort, getting the n 'largest file size' or 'newest imports' and so on. This can be a great way to set up a lightweight filtering page for 'the 256 biggest videos in my inbox'. If you change the sort, hydrus will not refresh the search, it'll just re-sort the n files you have. Hit F5 to refresh the search with a new sort. Not all sorts are supported. Anything complicated like tag sort will result in a random sample instead. exporting and uploading \u00b6 There are many ways to export files from the client: drag and drop Just dragging from the thumbnail view will export (copy) all the selected files to wherever you drop them. The files will be named by their ugly hexadecimal hash , which is how they are stored inside the database. If you use this to open a file inside an image editing program, remember to go 'save as' and give it a new filename! The client does not expect files inside its db directory to change. export dialog Right clicking some files and selecting share->export->files will open this dialog: Which lets you export the selected files with custom filenames. It will initialise trying to export the files named by their hashes, but once you are comfortable with tags, you'll be able to generate much cleverer and prettier filenames. share->copy->files This will copy the files themselves to your clipboard. You can then paste them wherever you like, just as with normal files. They will have their hashes for filenames. This is a very quick operation. It can also be triggered by hitting Ctrl+C. share->copy->hashes This will copy the files' unique identifiers to your clipboard, in hexadecimal. You will not have to do this often. It is best when you want to identify a number of files to someone else without having to send them the actual files.","title":"more files"},{"location":"getting_started_more_files.html#more_getting_started_with_files","text":"","title":"more getting started with files"},{"location":"getting_started_more_files.html#wildcards","text":"The autocomplete tag dropdown supports wildcard searching with * . The * will match any number of characters. Every normal autocomplete search has a secret * on the end that you don't see, which is how full words get matched from you only typing in a few letters. This is useful when you can only remember part of a word, or can't spell part of it. You can put * characters anywhere, but you should experiment to get used to the exact way these searches work. Some results can be surprising! You can select the special predicate inserted at the top of your autocomplete results (the highlighted *gelion and *va*ge* above). It will return all files that match that wildcard, i.e. every file for every other tag in the dropdown list. This is particularly useful if you have a number of files with commonly structured over-informationed tags, like this: In this case, selecting the title:cool pic* predicate will return all three images in the same search, where you can conveniently give them some more-easily searched tags like series:cool pic and page:1 , page:2 , page:3 .","title":"searching with wildcards"},{"location":"getting_started_more_files.html#more_searching","text":"Let's look at the tag autocomplete dropdown again: favourite searches star Once you get experience with the client, have a play with this. Rather than leaving common search pages open, save them in here and load them up as needed. You will keep your client lightweight and save time. include current/pending tags Turn these on and off to control whether tag search predicates apply to tags the exist, or limit just to those pending to be uploaded to a tag repository. Just searching 'pending' tags is useful if you want to scan what you have pending to go up to the PTR--just turn off 'current' tags and search system:num tags > 0 . searching immediately This controls whether a change to the search tags will instantly run the new search and get new results. Turning this off is helpful if you want to add, remove, or replace several heavy search terms in a row without getting UI lag. OR You only see this if you have 'advanced mode' on. It is an experimental module. Have a play with it--it lets you enter some pretty complicated tags! file/tag domains By default, you will search in 'my files' and 'all known tags' domain. This is the intersection of your local media files (on your hard disk) and the union of all known tag searches. If you search for character:samus aran , then you will get file results from your 'my files' domain that have character:samus aran in any tag service. For most purposes, this search domain is fine, but as you use the client more, you may want to access different search domains. For instance, if you change the file domain to 'trash', then you will instead get files that are in your trash. Setting the tag domain to 'my tags' will ignore other tag services (e.g. the PTR) for all tag search predicates, so a system:num_tags or a character:samus aran will only look 'my tags'. Turning on 'advanced mode' gives access to more search domains. Some of them are subtly complicated and only useful for clever jobs--most of the time, you still want 'my files' and 'all known tags'.","title":"more searching"},{"location":"getting_started_more_files.html#sorting_with_system_limit","text":"If you add system:limit to a search, the client will consider what that page's file sort currently is. If it is simple enough--something like file size or import time--then it will sort your results before they come back and clip the limit according to that sort, getting the n 'largest file size' or 'newest imports' and so on. This can be a great way to set up a lightweight filtering page for 'the 256 biggest videos in my inbox'. If you change the sort, hydrus will not refresh the search, it'll just re-sort the n files you have. Hit F5 to refresh the search with a new sort. Not all sorts are supported. Anything complicated like tag sort will result in a random sample instead.","title":"sorting with system limit"},{"location":"getting_started_more_files.html#intro","text":"There are many ways to export files from the client: drag and drop Just dragging from the thumbnail view will export (copy) all the selected files to wherever you drop them. The files will be named by their ugly hexadecimal hash , which is how they are stored inside the database. If you use this to open a file inside an image editing program, remember to go 'save as' and give it a new filename! The client does not expect files inside its db directory to change. export dialog Right clicking some files and selecting share->export->files will open this dialog: Which lets you export the selected files with custom filenames. It will initialise trying to export the files named by their hashes, but once you are comfortable with tags, you'll be able to generate much cleverer and prettier filenames. share->copy->files This will copy the files themselves to your clipboard. You can then paste them wherever you like, just as with normal files. They will have their hashes for filenames. This is a very quick operation. It can also be triggered by hitting Ctrl+C. share->copy->hashes This will copy the files' unique identifiers to your clipboard, in hexadecimal. You will not have to do this often. It is best when you want to identify a number of files to someone else without having to send them the actual files.","title":"exporting and uploading"},{"location":"getting_started_ratings.html","text":"getting started with ratings \u00b6 The hydrus client supports two kinds of ratings: like/dislike and numerical . Let's start with the simpler one: like/dislike \u00b6 A new client starts with one of these, called 'favourites'. It can set one of two values to a file. It does not have to represent like or dislike--it can be anything you want, like 'send to export folder' or 'explicit/safe' or 'cool babes'. Go to services->manage services->local->like/dislike ratings : You can set a variety of colours and shapes. numerical \u00b6 This is '3 out of 5 stars' or '8/10'. You can set the range to whatever whole numbers you like: As well as the shape and colour options, you can set how many 'stars' to display and whether 0/10 is permitted. If you change the star range at a later date, any existing ratings will be 'stretched' across the new range. As values are collapsed to the nearest integer, this is best done for scales that are multiples. \u2156 will neatly become 4/10 on a zero-allowed service, for instance, and 0/4 can nicely become \u2155 if you disallow zero ratings in the same step. If you didn't intuitively understand that, just don't touch the number of stars or zero rating checkbox after you have created the numerical rating service! now what? \u00b6 Ratings are displayed in the top-right of the media viewer: Hovering over each control will pop up its name, in case you forget which is which. You can set then them with a left- or right-click. Like/dislike and numerical have slightly different click behaviour, so have a play with them to get their feel. Pressing F4 on a selection of thumbnails will open a dialog with a very similar layout, which will let you set the same rating to many files simultaneously. Once you have some ratings set, you can search for them using system:rating, which produces this dialog: On my own client, I find it useful to have several like/dislike ratings set up as one-click pseudo-tags, like the 'OP images' above.","title":"ratings"},{"location":"getting_started_ratings.html#getting_started_with_ratings","text":"The hydrus client supports two kinds of ratings: like/dislike and numerical . Let's start with the simpler one:","title":"getting started with ratings"},{"location":"getting_started_ratings.html#like_dislike","text":"A new client starts with one of these, called 'favourites'. It can set one of two values to a file. It does not have to represent like or dislike--it can be anything you want, like 'send to export folder' or 'explicit/safe' or 'cool babes'. Go to services->manage services->local->like/dislike ratings : You can set a variety of colours and shapes.","title":"like/dislike"},{"location":"getting_started_ratings.html#numerical","text":"This is '3 out of 5 stars' or '8/10'. You can set the range to whatever whole numbers you like: As well as the shape and colour options, you can set how many 'stars' to display and whether 0/10 is permitted. If you change the star range at a later date, any existing ratings will be 'stretched' across the new range. As values are collapsed to the nearest integer, this is best done for scales that are multiples. \u2156 will neatly become 4/10 on a zero-allowed service, for instance, and 0/4 can nicely become \u2155 if you disallow zero ratings in the same step. If you didn't intuitively understand that, just don't touch the number of stars or zero rating checkbox after you have created the numerical rating service!","title":"numerical"},{"location":"getting_started_ratings.html#using_ratings","text":"Ratings are displayed in the top-right of the media viewer: Hovering over each control will pop up its name, in case you forget which is which. You can set then them with a left- or right-click. Like/dislike and numerical have slightly different click behaviour, so have a play with them to get their feel. Pressing F4 on a selection of thumbnails will open a dialog with a very similar layout, which will let you set the same rating to many files simultaneously. Once you have some ratings set, you can search for them using system:rating, which produces this dialog: On my own client, I find it useful to have several like/dislike ratings set up as one-click pseudo-tags, like the 'OP images' above.","title":"now what?"},{"location":"getting_started_subscriptions.html","text":"getting started with subscriptions \u00b6 Do not try to create a subscription until you are comfortable with a normal gallery download page! Go here . Let's say you found an artist you like. You downloaded everything of theirs from some site, but one or two pieces of new work is posted every week. You'd like to keep up with the new stuff, but you don't want to manually make a new download job every week for every single artist you like. what are subs? \u00b6 Subscriptions are a way of telling the client to regularly and quietly repeat a gallery search. You set up a number of saved queries, and the client will 'sync' with the latest files in the gallery and download anything new, just as if you were running the download yourself. Subscriptions only work for booru-like galleries that put the newest files first, and they only keep up with new content--once they have done their first sync, which usually gets the most recent hundred files or so, they will never reach further into the past. Getting older files, as you will see later, is a job best done with a normal download page. Here's the dialog, which is under network->downloaders->manage subscriptions : This is a very simple example--there is only one subscription, for safebooru. It has two 'queries' (i.e. searches to keep up with). It is important to note that while subscriptions can have multiple queries (even hundreds!), they generally only work on one site. Expect to create one subscription for safebooru, one for artstation, one for paheal, and so on for every site you care about. Advanced users may be able to think of ways to get around this, but I recommend against it as it throws off some of the internal check timing calculations. Before we trip over the advanced buttons here, let's zoom in on the actual subscription: This is a big and powerful panel! I recommend you open the screenshot up in a new browser tab, or in the actual client, so you can refer to it. Despite all the controls, the basic idea is simple: Up top, I have selected the 'safebooru tag search' download source, and then I have added two artists--\"hong_soon-jae\" and \"houtengeki\". These two queries have their own panels for reviewing what URLs they have worked on and further customising their behaviour, but all they really are is little bits of search text. When the subscription runs, it will put the given search text into the given download source just as if you were running the regular downloader. For the most part, all you need to do to set up a good subscription is give it a name, select the download source, and use the 'paste queries' button to paste what you want to search. Subscriptions have great default options for almost all query types, so you don't have to go any deeper than that to get started. Danger Do not change the max number of new files options until you know exactly what they do and have a good reason to alter them! how do subscriptions work? \u00b6 Once you hit ok on the main subscription dialog, the subscription system should immediately come alive. If any queries are due for a 'check', they will perform their search and look for new files (i.e. URLs it has not seen before). Once that is finished, the file download queue will be worked through as normal. Typically, the sub will make a popup like this while it works: The initial sync can sometimes take a few minutes, but after that, each query usually only needs thirty seconds' work every few days. If you leave your client on in the background, you'll rarely see them. If they ever get in your way, don't be afraid to click their little cancel button or call a global halt with network->pause->subscriptions --the next time they run, they will resume from where they were before. Similarly, the initial sync may produce a hundred files, but subsequent runs are likely to only produce one to ten. If a subscription comes across a lot of big files at once, it may not download them all in one go--but give it time, and it will catch back up before you know it. When it is done, it leaves a little popup button that will open a new page for you: This can often be a nice surprise! what makes a good subscription? \u00b6 The same rules as for downloaders apply: start slow, be hesitant, and plan for the long-term. Artist queries make great subscriptions as they update reliably but not too often and have very stable quality. Pick the artists you like most, see where their stuff is posted, and set up your subs like that. Series and character subscriptions are sometimes valuable, but they can be difficult to keep up with and have highly variable quality. It is not uncommon for users to only keep 15% of what a character sub produces. I do not recommend them for anything but your waifu. Attribute subscriptions like 'blue_eyes' or 'smile' make for terrible subs as the quality is all over the place and you will be inundated by too much content. The only exceptions are for specific, low-count searches that really matter to you, like 'contrapposto' or 'gothic trap thighhighs'. If you end up subscribing to eight hundred things and get ten thousand new files a week, you made a mistake. Subscriptions are for keeping up with things you like. If you let them overwhelm you, you'll resent them. Warning Subscriptions syncs are somewhat fragile. Do not try to play with the limits or checker options to download a whole 5,000 file query in one go--if you want everything for a query, run it in the manual downloader and get everything, then set up a normal sub for new stuff. There is no benefit to having a 'large' subscription, and it will trim itself down in time anyway. It is a good idea to run a 'full' download for a search before you set up a subscription. As well as making sure you have the exact right query text and that you have everything ever posted (beyond the 100 files deep a sub will typically look), it saves the bulk of the work (and waiting on bandwidth) for the manual downloader, where it belongs. When a new subscription picks up off a freshly completed download queue, its initial subscription sync only takes thirty seconds since its initial URLs are those that were already processed by the manual downloader. I recommend you stack artist searches up in the manual downloader using 'no limit' file limit, and when they are all finished, select them in the list and right-click->copy queries , which will put the search texts in your clipboard, newline-separated. This list can be pasted into the subscription dialog in one go with the 'paste queries' button again! Note The entire subscription system assumes the source is a typical 'newest first' booru-style search. If you dick around with some order_by:rating/random metatag, it will not work reliably. images/how often do subscriptions check? \u00b6 Hydrus subscriptions use the same variable-rate checking system as its thread watchers, just on a larger timescale. If you subscribe to a busy feed, it might check for new files once a day, but if you enter an artist who rarely posts, it might only check once every month. You don't have to do anything. The fine details of this are governed by the 'checker options' button. This is one of the things you should not mess with as you start out. If a query goes too 'slow' (typically, this means no new files for 180 days), it will be marked DEAD in the same way a thread will, and it will not be checked again. You will get a little popup when this happens. This is all editable as you get a better feel for the system--if you wish, it is completely possible to set up a sub that never dies and only checks once a year. I do not recommend setting up a sub that needs to check more than once a day. Any search that is producing that many files is probably a bad fit for a subscription. Subscriptions are for lightweight searches that are updated every now and then. (you might like to come back to this point once you have tried subs for a week or so and want to refine your workflow) ok, I set up three hundred queries, and now these popup buttons are a hassle \u00b6 One the edit subscription panel, the 'presentation' options let you publish files to a page. The page will have the subscription's name, just like the button makes, but it cuts out the middle-man and 'locks it in' more than the button, which will be forgotten if you restart the client. Also, if a page with that name already exists, the new files will be appended to it, just like a normal import page! I strongly recommend moving to this once you have several subs going. Make a 'page of pages' called 'subs' and put all your subscription landing pages in there, and then you can check it whenever is convenient. If you discover your subscription workflow tends to be the same for each sub, you can also customise the publication 'label' used. If multiple subs all publish to the 'nsfw subs' label, they will all end up on the same 'nsfw subs' popup button or landing page. Sending multiple subscriptions' import streams into just one or two locations like this can be great. You can also hide the main working popup. I don't recommend this unless you are really having a problem with it, since it is useful to have that 'active' feedback if something goes wrong. Note that subscription file import options will, by default, only present 'new' files. Anything already in the db will still be recorded in the internal import cache and used to calculate next check times and so on, but it won't clutter your import stream. This is different to the default for all the other importers, but when you are ready to enter the ranks of the Patricians, you will know to edit your 'loud' default file import options under options->importing to behave this way as well. Efficient workflows only care about new files. how exactly does the sync work? \u00b6 Figuring out when a repeating search has 'caught up' can be a tricky problem to solve. It sounds simple, but unusual situations like 'a file got tagged late, so it inserted deeper than it ideally should in the gallery search' or 'the website changed its URL format completely, help' can cause problems. Subscriptions are automatic systems, so they tend to be a bit more careful and paranoid about problems, lest they burn 10GB on 10,000 unexpected diaperfur images. The initial sync is simple. It does a regular search, stopping if it reaches the 'initial file limit' or the last file in the gallery, whichever comes first. The default initial file sync is 100, which is a great number for almost all situations. Subsequent syncs are more complicated. It ideally 'stops' searching when it reaches files it saw in a previous sync, but if it comes across new files mixed in with the old, it will search a bit deeper. It is not foolproof, and if a file gets tagged very late and ends up a hundred deep in the search, it will probably be missed. There is no good and computationally cheap way at present to resolve this problem, but thankfully it is rare. Remember that an important 'staying sane' philosophy of downloading and subscriptions is to focus on dealing with the 99.5% you have before worrying about the 0.5% you do not. The amount of time between syncs is calculated by the checker options. Based on the timestamps attached to existing urls in the subscription cache (either added time, or the post time as parsed from the url), the sub estimates how long it will be before n new files appear, and then next check is scheduled for then. Unless you know what you are doing, checker options, like file limits, are best left alone. A subscription will naturally adapt its checking speed to the file 'velocity' of the source, and there is usually very little benefit to trying to force a sub to check at a radically different speed. Tip If you want to force your subs to run at the same time, say every evening, it is easier to just use network->pause->subscriptions as a manual master on/off control. The ones that are due will catch up together, the ones that aren't won't waste your time. Remember that subscriptions only keep up with new content. They cannot search backwards in time in order to 'fill out' a search, nor can they fill in gaps. Do not change the file limits or check times to try to make this happen. If you want to ensure complete sync with all existing content for a particular search, use the manual downloader. In practice, most subs only need to check the first page of a gallery since only the first two or three urls are new. periodic file limit exceeded \u00b6 If, during a regular sync, the sub keeps finding new URLs, never hitting a block of already-seen URLs, it will stop upon hitting its 'periodic file limit', which is also usually 100. When it happens, you will get a popup message notification. There are two typical reasons for this: A user suddenly posted a large number of files to the site for that query. This sometimes happens with CG gallery spam. The website changed their URL format. The first case is a natural accident of statistics. The subscription now has a 'gap' in its sync. If you want to get what you missed, you can try to fill in the gap with a manual downloader page. Just download to 200 files or so, and the downloader will work quickly to one-time work through the URLs in the gap. The second case is a safety stopgap for hydrus. If a site decides to have /post/123456 style URLs instead of post.php?id=123456 style, hydrus will suddenly see those as entirely 'new' URLs. It could also be because of an updated downloader, which pulls URLs in API format or similar. This is again thankfully quite rare, but it triggers several problems--the associated downloader usually breaks, as it does not yet recognise those new URLs, and all your subs for that site will parse through and hit the periodic limit for every query. When this happens, you'll usually get several periodic limit popups at once, and you may need to update your downloader. If you know the person who wrote the original downloader, they'll likely want to know about the problem, or may already have a fix sorted. It is often a good idea to pause the affected subs until you have it figured out and working in a normal gallery downloader page. I put character queries in my artist sub, and now things are all mixed up \u00b6 On the main subscription dialog, there are 'merge' and 'separate' buttons. These are powerful, but they will walk you through the process of pulling queries out of a sub and merging them back into a different one. Only subs that use the same download source can be merged. Give them a go, and if it all goes wrong, just hit the cancel button on the dialog.","title":"subscriptions"},{"location":"getting_started_subscriptions.html#getting_started_with_subscriptions","text":"Do not try to create a subscription until you are comfortable with a normal gallery download page! Go here . Let's say you found an artist you like. You downloaded everything of theirs from some site, but one or two pieces of new work is posted every week. You'd like to keep up with the new stuff, but you don't want to manually make a new download job every week for every single artist you like.","title":"getting started with subscriptions"},{"location":"getting_started_subscriptions.html#intro","text":"Subscriptions are a way of telling the client to regularly and quietly repeat a gallery search. You set up a number of saved queries, and the client will 'sync' with the latest files in the gallery and download anything new, just as if you were running the download yourself. Subscriptions only work for booru-like galleries that put the newest files first, and they only keep up with new content--once they have done their first sync, which usually gets the most recent hundred files or so, they will never reach further into the past. Getting older files, as you will see later, is a job best done with a normal download page. Here's the dialog, which is under network->downloaders->manage subscriptions : This is a very simple example--there is only one subscription, for safebooru. It has two 'queries' (i.e. searches to keep up with). It is important to note that while subscriptions can have multiple queries (even hundreds!), they generally only work on one site. Expect to create one subscription for safebooru, one for artstation, one for paheal, and so on for every site you care about. Advanced users may be able to think of ways to get around this, but I recommend against it as it throws off some of the internal check timing calculations. Before we trip over the advanced buttons here, let's zoom in on the actual subscription: This is a big and powerful panel! I recommend you open the screenshot up in a new browser tab, or in the actual client, so you can refer to it. Despite all the controls, the basic idea is simple: Up top, I have selected the 'safebooru tag search' download source, and then I have added two artists--\"hong_soon-jae\" and \"houtengeki\". These two queries have their own panels for reviewing what URLs they have worked on and further customising their behaviour, but all they really are is little bits of search text. When the subscription runs, it will put the given search text into the given download source just as if you were running the regular downloader. For the most part, all you need to do to set up a good subscription is give it a name, select the download source, and use the 'paste queries' button to paste what you want to search. Subscriptions have great default options for almost all query types, so you don't have to go any deeper than that to get started. Danger Do not change the max number of new files options until you know exactly what they do and have a good reason to alter them!","title":"what are subs?"},{"location":"getting_started_subscriptions.html#description","text":"Once you hit ok on the main subscription dialog, the subscription system should immediately come alive. If any queries are due for a 'check', they will perform their search and look for new files (i.e. URLs it has not seen before). Once that is finished, the file download queue will be worked through as normal. Typically, the sub will make a popup like this while it works: The initial sync can sometimes take a few minutes, but after that, each query usually only needs thirty seconds' work every few days. If you leave your client on in the background, you'll rarely see them. If they ever get in your way, don't be afraid to click their little cancel button or call a global halt with network->pause->subscriptions --the next time they run, they will resume from where they were before. Similarly, the initial sync may produce a hundred files, but subsequent runs are likely to only produce one to ten. If a subscription comes across a lot of big files at once, it may not download them all in one go--but give it time, and it will catch back up before you know it. When it is done, it leaves a little popup button that will open a new page for you: This can often be a nice surprise!","title":"how do subscriptions work?"},{"location":"getting_started_subscriptions.html#good_subs","text":"The same rules as for downloaders apply: start slow, be hesitant, and plan for the long-term. Artist queries make great subscriptions as they update reliably but not too often and have very stable quality. Pick the artists you like most, see where their stuff is posted, and set up your subs like that. Series and character subscriptions are sometimes valuable, but they can be difficult to keep up with and have highly variable quality. It is not uncommon for users to only keep 15% of what a character sub produces. I do not recommend them for anything but your waifu. Attribute subscriptions like 'blue_eyes' or 'smile' make for terrible subs as the quality is all over the place and you will be inundated by too much content. The only exceptions are for specific, low-count searches that really matter to you, like 'contrapposto' or 'gothic trap thighhighs'. If you end up subscribing to eight hundred things and get ten thousand new files a week, you made a mistake. Subscriptions are for keeping up with things you like. If you let them overwhelm you, you'll resent them. Warning Subscriptions syncs are somewhat fragile. Do not try to play with the limits or checker options to download a whole 5,000 file query in one go--if you want everything for a query, run it in the manual downloader and get everything, then set up a normal sub for new stuff. There is no benefit to having a 'large' subscription, and it will trim itself down in time anyway. It is a good idea to run a 'full' download for a search before you set up a subscription. As well as making sure you have the exact right query text and that you have everything ever posted (beyond the 100 files deep a sub will typically look), it saves the bulk of the work (and waiting on bandwidth) for the manual downloader, where it belongs. When a new subscription picks up off a freshly completed download queue, its initial subscription sync only takes thirty seconds since its initial URLs are those that were already processed by the manual downloader. I recommend you stack artist searches up in the manual downloader using 'no limit' file limit, and when they are all finished, select them in the list and right-click->copy queries , which will put the search texts in your clipboard, newline-separated. This list can be pasted into the subscription dialog in one go with the 'paste queries' button again! Note The entire subscription system assumes the source is a typical 'newest first' booru-style search. If you dick around with some order_by:rating/random metatag, it will not work reliably.","title":"what makes a good subscription?"},{"location":"getting_started_subscriptions.html#checking","text":"Hydrus subscriptions use the same variable-rate checking system as its thread watchers, just on a larger timescale. If you subscribe to a busy feed, it might check for new files once a day, but if you enter an artist who rarely posts, it might only check once every month. You don't have to do anything. The fine details of this are governed by the 'checker options' button. This is one of the things you should not mess with as you start out. If a query goes too 'slow' (typically, this means no new files for 180 days), it will be marked DEAD in the same way a thread will, and it will not be checked again. You will get a little popup when this happens. This is all editable as you get a better feel for the system--if you wish, it is completely possible to set up a sub that never dies and only checks once a year. I do not recommend setting up a sub that needs to check more than once a day. Any search that is producing that many files is probably a bad fit for a subscription. Subscriptions are for lightweight searches that are updated every now and then. (you might like to come back to this point once you have tried subs for a week or so and want to refine your workflow)","title":"images/how often do subscriptions check?"},{"location":"getting_started_subscriptions.html#presentation","text":"One the edit subscription panel, the 'presentation' options let you publish files to a page. The page will have the subscription's name, just like the button makes, but it cuts out the middle-man and 'locks it in' more than the button, which will be forgotten if you restart the client. Also, if a page with that name already exists, the new files will be appended to it, just like a normal import page! I strongly recommend moving to this once you have several subs going. Make a 'page of pages' called 'subs' and put all your subscription landing pages in there, and then you can check it whenever is convenient. If you discover your subscription workflow tends to be the same for each sub, you can also customise the publication 'label' used. If multiple subs all publish to the 'nsfw subs' label, they will all end up on the same 'nsfw subs' popup button or landing page. Sending multiple subscriptions' import streams into just one or two locations like this can be great. You can also hide the main working popup. I don't recommend this unless you are really having a problem with it, since it is useful to have that 'active' feedback if something goes wrong. Note that subscription file import options will, by default, only present 'new' files. Anything already in the db will still be recorded in the internal import cache and used to calculate next check times and so on, but it won't clutter your import stream. This is different to the default for all the other importers, but when you are ready to enter the ranks of the Patricians, you will know to edit your 'loud' default file import options under options->importing to behave this way as well. Efficient workflows only care about new files.","title":"ok, I set up three hundred queries, and now these popup buttons are a hassle"},{"location":"getting_started_subscriptions.html#syncing_explanation","text":"Figuring out when a repeating search has 'caught up' can be a tricky problem to solve. It sounds simple, but unusual situations like 'a file got tagged late, so it inserted deeper than it ideally should in the gallery search' or 'the website changed its URL format completely, help' can cause problems. Subscriptions are automatic systems, so they tend to be a bit more careful and paranoid about problems, lest they burn 10GB on 10,000 unexpected diaperfur images. The initial sync is simple. It does a regular search, stopping if it reaches the 'initial file limit' or the last file in the gallery, whichever comes first. The default initial file sync is 100, which is a great number for almost all situations. Subsequent syncs are more complicated. It ideally 'stops' searching when it reaches files it saw in a previous sync, but if it comes across new files mixed in with the old, it will search a bit deeper. It is not foolproof, and if a file gets tagged very late and ends up a hundred deep in the search, it will probably be missed. There is no good and computationally cheap way at present to resolve this problem, but thankfully it is rare. Remember that an important 'staying sane' philosophy of downloading and subscriptions is to focus on dealing with the 99.5% you have before worrying about the 0.5% you do not. The amount of time between syncs is calculated by the checker options. Based on the timestamps attached to existing urls in the subscription cache (either added time, or the post time as parsed from the url), the sub estimates how long it will be before n new files appear, and then next check is scheduled for then. Unless you know what you are doing, checker options, like file limits, are best left alone. A subscription will naturally adapt its checking speed to the file 'velocity' of the source, and there is usually very little benefit to trying to force a sub to check at a radically different speed. Tip If you want to force your subs to run at the same time, say every evening, it is easier to just use network->pause->subscriptions as a manual master on/off control. The ones that are due will catch up together, the ones that aren't won't waste your time. Remember that subscriptions only keep up with new content. They cannot search backwards in time in order to 'fill out' a search, nor can they fill in gaps. Do not change the file limits or check times to try to make this happen. If you want to ensure complete sync with all existing content for a particular search, use the manual downloader. In practice, most subs only need to check the first page of a gallery since only the first two or three urls are new.","title":"how exactly does the sync work?"},{"location":"getting_started_subscriptions.html#periodic_file_limit","text":"If, during a regular sync, the sub keeps finding new URLs, never hitting a block of already-seen URLs, it will stop upon hitting its 'periodic file limit', which is also usually 100. When it happens, you will get a popup message notification. There are two typical reasons for this: A user suddenly posted a large number of files to the site for that query. This sometimes happens with CG gallery spam. The website changed their URL format. The first case is a natural accident of statistics. The subscription now has a 'gap' in its sync. If you want to get what you missed, you can try to fill in the gap with a manual downloader page. Just download to 200 files or so, and the downloader will work quickly to one-time work through the URLs in the gap. The second case is a safety stopgap for hydrus. If a site decides to have /post/123456 style URLs instead of post.php?id=123456 style, hydrus will suddenly see those as entirely 'new' URLs. It could also be because of an updated downloader, which pulls URLs in API format or similar. This is again thankfully quite rare, but it triggers several problems--the associated downloader usually breaks, as it does not yet recognise those new URLs, and all your subs for that site will parse through and hit the periodic limit for every query. When this happens, you'll usually get several periodic limit popups at once, and you may need to update your downloader. If you know the person who wrote the original downloader, they'll likely want to know about the problem, or may already have a fix sorted. It is often a good idea to pause the affected subs until you have it figured out and working in a normal gallery downloader page.","title":"periodic file limit exceeded"},{"location":"getting_started_subscriptions.html#merging_and_separating","text":"On the main subscription dialog, there are 'merge' and 'separate' buttons. These are powerful, but they will walk you through the process of pulling queries out of a sub and merging them back into a different one. Only subs that use the same download source can be merged. Give them a go, and if it all goes wrong, just hit the cancel button on the dialog.","title":"I put character queries in my artist sub, and now things are all mixed up"},{"location":"getting_started_tags.html","text":"getting started with tags \u00b6 If any of this is confusing, a simpler guide is here , and some video guides are here ! how do we find files? \u00b6 So, you have stored some media in your database. Everything is hashed and cached. You can search by inbox and resolution and size and so on, but if you really want to find what we are looking for, you will have to use tags . FAQ: what is a tag? Your client starts with one local tags service, called 'my tags', which keeps all of its file->tag mappings in your client's database where only you can see them. It is a good place to practise. So, select a file and press F3: The autocomplete dropdown in the manage tags dialog works very like the one in a normal search page--you type part of a tag, and matching results will appear below. You select the tag you want with the arrow keys and hit enter. Since your 'my tags' service doesn't have any tags in it yet, you won't get any results here except the exact match of what you typed. If you want to remove a tag, enter the exact same thing again or double-click it in the box above. Prefixing a tag with a category and a colon will create a namespaced tag. This helps inform the software and other users about what the tag is. Examples of namespaced tags are: character:batman series:street fighter person:jennifer lawrence title:vitruvian man The client is set up to draw common namespaces in different colours, just like boorus do. You can change these colours in the options. Once you are happy with your tags, hit 'apply' or just press enter on the text box if it is empty. The tags are now saved to your database. Searching for any of them will return this file and anything else so tagged: If you add more tags or system predicates to a search, you will limit the results to those files that match every single one: You can also exclude a tag by prefixing it with a hyphen (e.g. -heresy ). OR searching \u00b6 Searches find files that match every search 'predicate' in the list (it is an AND search), which makes it difficult to search for files that include one OR another tag. More recently, simple OR search support was added. All you have to do is hold down Shift when you enter/double-click a tag in the autocomplete entry area. Instead of sending the tag up to the active search list up top, it will instead start an under-construction 'OR chain' in the tag results below: You can keep searching for and entering new tags. Holding down Shift on new tags will extend the OR chain, and entering them as normal will 'cap' the chain and send it to the complete and active search predicates above. Any file that has one or more of those OR sub-tags will match. If you enter an OR tag incorrectly, you can either cancel or 'rewind' the under-construction search predicate with these new buttons that will appear: You can also cancel an under-construction OR by hitting Esc on an empty input. You can add any sort of search term to an OR search predicate, including system predicates. Some unusual sub-predicates (typically a -tag , or a very broad system predicate) can run very slowly, but they will run much faster if you include non-OR search predicates in the search: This search will return all files that have the tag fanfic and one or more of medium:text , a positive value for the like/dislike rating 'read later', or PDF mime. tag repositories \u00b6 It can take a long time to tag even small numbers of files well, so I created tag repositories so people can share the work. Tag repos store many file->tag relationships. Anyone who has an access key to the repository can sync with it and hence download all these relationships. If any of their own files match up, they will get those tags. Access keys will also usually have permission to upload new tags and ask for incorrect ones to be deleted. Anyone can run a tag repository, but it is a bit complicated for new users. I ran a public tag repository for a long time, and now this large central store is run by users. It has over a billion tags and is free to access and contribute to. To connect with it, please check here . Please read that page if you want to try out the PTR. It is only appropriate for someone on an SSD! If you add it, your client will download updates from the repository over time and, usually when it is idle or shutting down, 'process' them into its database until it is fully synchronised. The processing step is CPU and HDD heavy, and you can customise when it happens in file->options->maintenance and processing . As the repository synchronises, you should see some new tags appear, particularly on famous files that lots of people have. You can watch more detailed synchronisation progress in the services->review services window. Your new service should now be listed on the left of the manage tags dialog. Adding tags to a repository works very similarly to the 'my tags' service except hitting 'apply' will not immediately confirm your changes--it will put them in a queue to be uploaded. These 'pending' tags will be counted with a plus '+' or minus '-' sign: Notice that a 'pending' menu has appeared on the main window. This lets you start the upload when you are ready and happy with everything that you have queued. When you upload your pending tags, they will commit and look to you like any other tag. The tag repository will anonymously bundle them into the next update, which everyone else will download in a day or so. They will see your tags just like you saw theirs. If you attempt to remove a tag that has been uploaded, you may be prompted to give a reason, creating a petition that a janitor for the repository will review. I recommend you not spam tags to the public tag repo until you get a rough feel for the guidelines , and my original tag schema thoughts, or just lurk until you get the idea. It roughly follows what you will see on a typical booru. The general rule is to only add factual tags--no subjective opinion. You can connect to more than one tag repository if you like. When you are in the manage tags dialog, pressing the up or down arrow keys on an empty input switches between your services. FAQ: why can my friend not see what I just uploaded?","title":"tags"},{"location":"getting_started_tags.html#getting_started_with_tags","text":"If any of this is confusing, a simpler guide is here , and some video guides are here !","title":"getting started with tags"},{"location":"getting_started_tags.html#intro","text":"So, you have stored some media in your database. Everything is hashed and cached. You can search by inbox and resolution and size and so on, but if you really want to find what we are looking for, you will have to use tags . FAQ: what is a tag? Your client starts with one local tags service, called 'my tags', which keeps all of its file->tag mappings in your client's database where only you can see them. It is a good place to practise. So, select a file and press F3: The autocomplete dropdown in the manage tags dialog works very like the one in a normal search page--you type part of a tag, and matching results will appear below. You select the tag you want with the arrow keys and hit enter. Since your 'my tags' service doesn't have any tags in it yet, you won't get any results here except the exact match of what you typed. If you want to remove a tag, enter the exact same thing again or double-click it in the box above. Prefixing a tag with a category and a colon will create a namespaced tag. This helps inform the software and other users about what the tag is. Examples of namespaced tags are: character:batman series:street fighter person:jennifer lawrence title:vitruvian man The client is set up to draw common namespaces in different colours, just like boorus do. You can change these colours in the options. Once you are happy with your tags, hit 'apply' or just press enter on the text box if it is empty. The tags are now saved to your database. Searching for any of them will return this file and anything else so tagged: If you add more tags or system predicates to a search, you will limit the results to those files that match every single one: You can also exclude a tag by prefixing it with a hyphen (e.g. -heresy ).","title":"how do we find files?"},{"location":"getting_started_tags.html#or_searching","text":"Searches find files that match every search 'predicate' in the list (it is an AND search), which makes it difficult to search for files that include one OR another tag. More recently, simple OR search support was added. All you have to do is hold down Shift when you enter/double-click a tag in the autocomplete entry area. Instead of sending the tag up to the active search list up top, it will instead start an under-construction 'OR chain' in the tag results below: You can keep searching for and entering new tags. Holding down Shift on new tags will extend the OR chain, and entering them as normal will 'cap' the chain and send it to the complete and active search predicates above. Any file that has one or more of those OR sub-tags will match. If you enter an OR tag incorrectly, you can either cancel or 'rewind' the under-construction search predicate with these new buttons that will appear: You can also cancel an under-construction OR by hitting Esc on an empty input. You can add any sort of search term to an OR search predicate, including system predicates. Some unusual sub-predicates (typically a -tag , or a very broad system predicate) can run very slowly, but they will run much faster if you include non-OR search predicates in the search: This search will return all files that have the tag fanfic and one or more of medium:text , a positive value for the like/dislike rating 'read later', or PDF mime.","title":"OR searching"},{"location":"getting_started_tags.html#tag_repositories","text":"It can take a long time to tag even small numbers of files well, so I created tag repositories so people can share the work. Tag repos store many file->tag relationships. Anyone who has an access key to the repository can sync with it and hence download all these relationships. If any of their own files match up, they will get those tags. Access keys will also usually have permission to upload new tags and ask for incorrect ones to be deleted. Anyone can run a tag repository, but it is a bit complicated for new users. I ran a public tag repository for a long time, and now this large central store is run by users. It has over a billion tags and is free to access and contribute to. To connect with it, please check here . Please read that page if you want to try out the PTR. It is only appropriate for someone on an SSD! If you add it, your client will download updates from the repository over time and, usually when it is idle or shutting down, 'process' them into its database until it is fully synchronised. The processing step is CPU and HDD heavy, and you can customise when it happens in file->options->maintenance and processing . As the repository synchronises, you should see some new tags appear, particularly on famous files that lots of people have. You can watch more detailed synchronisation progress in the services->review services window. Your new service should now be listed on the left of the manage tags dialog. Adding tags to a repository works very similarly to the 'my tags' service except hitting 'apply' will not immediately confirm your changes--it will put them in a queue to be uploaded. These 'pending' tags will be counted with a plus '+' or minus '-' sign: Notice that a 'pending' menu has appeared on the main window. This lets you start the upload when you are ready and happy with everything that you have queued. When you upload your pending tags, they will commit and look to you like any other tag. The tag repository will anonymously bundle them into the next update, which everyone else will download in a day or so. They will see your tags just like you saw theirs. If you attempt to remove a tag that has been uploaded, you may be prompted to give a reason, creating a petition that a janitor for the repository will review. I recommend you not spam tags to the public tag repo until you get a rough feel for the guidelines , and my original tag schema thoughts, or just lurk until you get the idea. It roughly follows what you will see on a typical booru. The general rule is to only add factual tags--no subjective opinion. You can connect to more than one tag repository if you like. When you are in the manage tags dialog, pressing the up or down arrow keys on an empty input switches between your services. FAQ: why can my friend not see what I just uploaded?","title":"tag repositories"},{"location":"introduction.html","text":"on being anonymous \u00b6 Nearly all sites use the same pseudonymous username/password system, and nearly all of them have the same drama, sockpuppets, and egotistical mods. Censorship is routine. That works for many people, but not for me. I enjoy being anonymous online. When you aren't afraid of repercussions, you can be as truthful as you want. You can have conversations that can happen nowhere else. It's fun! I've been on the imageboards for a long time, saving everything I like to my hard drive. After a while, the whole collection was just too large to manage on my own. the hydrus network \u00b6 So! I'm developing a program that helps people organise their files together anonymously. I want to help you do what you want with your stuff, and that's it. You can share some tags and files with other people if you want to, but you don't have to connect to anything if you don't. The default is complete privacy, no sharing , and every upload requires a conscious action on your part. I don't plan to ever record metrics on users, nor serve ads, nor charge for my software. The software never phones home. This does a lot more than a normal image viewer. If you are totally new to the idea of personal media collections and tagging, I suggest you start slow, walk through the getting started guides, and experiment doing different things. If you aren't sure on what a button does, try clicking it! You'll be importing thousands of files and applying tens of thousands of tags in no time. The client is chiefly a file database. It stores your files inside its own folders, managing them far better than an explorer window or some online gallery. Here's a screenshot of one of my test installs with a search showing all files: As well as the client, there is also a server that anyone can run to store files or tags for sharing between many users. The mechanics of running a server is usually confusing to new users, so wait a little while before you explore this. Some users run a public tag repository with hundreds of millions of tags that you can access and contribute to if you wish. I have many plans to expand the client and the network. statement of principles \u00b6 No speech should be outlawed. Everyone should be able to control their own media diet. Computer data and network logs should be absolutely private. None of the above are currently true, but I would love to live in a world where they were. My software is an attempt to move us a little closer. I try to side with the person over the authority, the distributed over the centralised. I still use gmail and youtube just like pretty much everyone, but I would rather be using different systems, especially in ten years. No one seemed to be making what I wanted for file management, so I decided to do it myself, and here we are. If, after a few months, you find you enjoy the software and would like to further support it, I have set up a simple no-reward patreon, which you can read more about here . license \u00b6 These programs are free software. Everything I, hydrus dev, have made is under the Do What The Fuck You Want To Public License, Version 3, as published by Kris Craig. license.txt DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE Version 3, May 2010 Copyright (C) 2010 by Kris Craig Olympia, WA USA Everyone is permitted to copy and distribute verbatim or modified copies of this license document, and changing it is allowed as long as the name is changed. This license applies to any copyrightable work with which it is packaged and/or distributed, except works that are already covered by another license. Any other license that applies to the same work shall take precedence over this one. To the extent permitted by applicable law, the works covered by this license are provided \"as is\" and do not come with any warranty except where otherwise explicitly stated. DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION, AND MODIFICATION 0. You just DO WHAT THE FUCK YOU WANT TO. Do what the fuck you want to with my software, and if shit breaks, DEAL WITH IT.","title":"introduction and statement of principles"},{"location":"introduction.html#anonymous","text":"Nearly all sites use the same pseudonymous username/password system, and nearly all of them have the same drama, sockpuppets, and egotistical mods. Censorship is routine. That works for many people, but not for me. I enjoy being anonymous online. When you aren't afraid of repercussions, you can be as truthful as you want. You can have conversations that can happen nowhere else. It's fun! I've been on the imageboards for a long time, saving everything I like to my hard drive. After a while, the whole collection was just too large to manage on my own.","title":"on being anonymous"},{"location":"introduction.html#hydrus_network","text":"So! I'm developing a program that helps people organise their files together anonymously. I want to help you do what you want with your stuff, and that's it. You can share some tags and files with other people if you want to, but you don't have to connect to anything if you don't. The default is complete privacy, no sharing , and every upload requires a conscious action on your part. I don't plan to ever record metrics on users, nor serve ads, nor charge for my software. The software never phones home. This does a lot more than a normal image viewer. If you are totally new to the idea of personal media collections and tagging, I suggest you start slow, walk through the getting started guides, and experiment doing different things. If you aren't sure on what a button does, try clicking it! You'll be importing thousands of files and applying tens of thousands of tags in no time. The client is chiefly a file database. It stores your files inside its own folders, managing them far better than an explorer window or some online gallery. Here's a screenshot of one of my test installs with a search showing all files: As well as the client, there is also a server that anyone can run to store files or tags for sharing between many users. The mechanics of running a server is usually confusing to new users, so wait a little while before you explore this. Some users run a public tag repository with hundreds of millions of tags that you can access and contribute to if you wish. I have many plans to expand the client and the network.","title":"the hydrus network"},{"location":"introduction.html#principles","text":"No speech should be outlawed. Everyone should be able to control their own media diet. Computer data and network logs should be absolutely private. None of the above are currently true, but I would love to live in a world where they were. My software is an attempt to move us a little closer. I try to side with the person over the authority, the distributed over the centralised. I still use gmail and youtube just like pretty much everyone, but I would rather be using different systems, especially in ten years. No one seemed to be making what I wanted for file management, so I decided to do it myself, and here we are. If, after a few months, you find you enjoy the software and would like to further support it, I have set up a simple no-reward patreon, which you can read more about here .","title":"statement of principles"},{"location":"introduction.html#license","text":"These programs are free software. Everything I, hydrus dev, have made is under the Do What The Fuck You Want To Public License, Version 3, as published by Kris Craig. license.txt DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE Version 3, May 2010 Copyright (C) 2010 by Kris Craig Olympia, WA USA Everyone is permitted to copy and distribute verbatim or modified copies of this license document, and changing it is allowed as long as the name is changed. This license applies to any copyrightable work with which it is packaged and/or distributed, except works that are already covered by another license. Any other license that applies to the same work shall take precedence over this one. To the extent permitted by applicable law, the works covered by this license are provided \"as is\" and do not come with any warranty except where otherwise explicitly stated. DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION, AND MODIFICATION 0. You just DO WHAT THE FUCK YOU WANT TO. Do what the fuck you want to with my software, and if shit breaks, DEAL WITH IT.","title":"license"},{"location":"ipfs.html","text":"IPFS is a p2p protocol that makes it easy to share many sorts of data. The hydrus client can communicate with an IPFS daemon to send and receive files. You can read more about IPFS from their homepage , or this guide that explains its various rules in more detail. For our purposes, we only need to know about these concepts: IPFS daemon -- A running instance of the IPFS executable that can talk to the larger network. IPFS multihash -- An IPFS-specific identifier for a file or group of files. pin -- To tell our IPFS daemon to host a file or group of files. unpin -- To tell our IPFS daemon to stop hosting a file or group of files. getting ipfs \u00b6 Note there is now a nicer desktop package here . I haven't used it, but it may be a nicer intro to the program. Get the prebuilt executable here . Inside should be a very simple 'ipfs' executable that does everything. Extract it somewhere and open up a terminal in the same folder, and then type: ipfs init ipfs daemon The IPFS exe should now be running in that terminal, ready to respond to requests: You can kill it with Ctrl + C and restart it with the ipfs daemon call again (you only have to run ipfs init once). When it is running, opening this page should download and display an example 'Hello World!' file from ~~~across the internet~~~ . Your daemon listens for other instances of ipfs using port 4001, so if you know how to open that port in your firewall and router, make sure you do. connecting your client \u00b6 IPFS daemons are treated as services inside hydrus, so go to services->manage services->remote->ipfs daemons and add in your information. Hydrus uses the API port, default 5001, so you will probably want to use credentials of 127.0.0.1:5001 . You can click 'test credentials' to make sure everything is working. Thereafter, you will get the option to 'pin' and 'unpin' from a thumbnail's right-click menu, like so: This works like hydrus's repository uploads--it won't happen immediately, but instead will be queued up at the pending menu. Commit all your pins when you are ready: Notice how the IPFS icon appears on your pending and pinned files. You can search for these files using 'system:file service'. Unpin works the same as pin, just like a hydrus repository petition. Right-clicking any pinned file will give you a new 'share' action: Which will put it straight in your clipboard. In this case, it is QmP6BNvWfkNf74bY3q1ohtDZ9gAmss4LAjuFhqpDPQNm1S . If you want to share a pinned file with someone, you have to tell them this multihash. They can then: View it through their own ipfs daemon's gateway, at http://127.0.0.1:8080/ipfs/[multihash] View it through a public web gateway, such as the one the IPFS people run, at http://ipfs.io/ipfs/[multihash] Download it through their ipfs-connected hydrus client by going pages->new download popup->an ipfs multihash . directories \u00b6 If you have many files to share, IPFS also supports directories, and now hydrus does as well. IPFS directories use the same sorts of multihash as files, and you can download them into the hydrus client using the same pages->new download popup->an ipfs multihash menu entry. The client will detect the multihash represents a directory and give you a simple selection dialog: You may recognise those hash filenames--this example was created by hydrus, which can create ipfs directories from any selection of files from the same right-click menu: Hydrus will pin all the files and then wrap them in a directory, showing its progress in a popup. Your current directory shares are summarised on the respective services->review services panel: additional links \u00b6 If you find you use IPFS a lot, here are some add-ons for your web browser, as recommended by /tech/: This script changes all bare ipfs hashes into clickable links to the ipfs gateway (on page loads): https://greasyfork.org/en/scripts/14837-ipfs-hash-linker These redirect all gateway links to your local daemon when it's on, it works well with the previous script: https://github.com/lidel/ipfs-firefox-addon https://github.com/dylanPowers/ipfs-chrome-extension","title":"IPFS"},{"location":"ipfs.html#getting_ipfs","text":"Note there is now a nicer desktop package here . I haven't used it, but it may be a nicer intro to the program. Get the prebuilt executable here . Inside should be a very simple 'ipfs' executable that does everything. Extract it somewhere and open up a terminal in the same folder, and then type: ipfs init ipfs daemon The IPFS exe should now be running in that terminal, ready to respond to requests: You can kill it with Ctrl + C and restart it with the ipfs daemon call again (you only have to run ipfs init once). When it is running, opening this page should download and display an example 'Hello World!' file from ~~~across the internet~~~ . Your daemon listens for other instances of ipfs using port 4001, so if you know how to open that port in your firewall and router, make sure you do.","title":"getting ipfs"},{"location":"ipfs.html#connecting","text":"IPFS daemons are treated as services inside hydrus, so go to services->manage services->remote->ipfs daemons and add in your information. Hydrus uses the API port, default 5001, so you will probably want to use credentials of 127.0.0.1:5001 . You can click 'test credentials' to make sure everything is working. Thereafter, you will get the option to 'pin' and 'unpin' from a thumbnail's right-click menu, like so: This works like hydrus's repository uploads--it won't happen immediately, but instead will be queued up at the pending menu. Commit all your pins when you are ready: Notice how the IPFS icon appears on your pending and pinned files. You can search for these files using 'system:file service'. Unpin works the same as pin, just like a hydrus repository petition. Right-clicking any pinned file will give you a new 'share' action: Which will put it straight in your clipboard. In this case, it is QmP6BNvWfkNf74bY3q1ohtDZ9gAmss4LAjuFhqpDPQNm1S . If you want to share a pinned file with someone, you have to tell them this multihash. They can then: View it through their own ipfs daemon's gateway, at http://127.0.0.1:8080/ipfs/[multihash] View it through a public web gateway, such as the one the IPFS people run, at http://ipfs.io/ipfs/[multihash] Download it through their ipfs-connected hydrus client by going pages->new download popup->an ipfs multihash .","title":"connecting your client"},{"location":"ipfs.html#directories","text":"If you have many files to share, IPFS also supports directories, and now hydrus does as well. IPFS directories use the same sorts of multihash as files, and you can download them into the hydrus client using the same pages->new download popup->an ipfs multihash menu entry. The client will detect the multihash represents a directory and give you a simple selection dialog: You may recognise those hash filenames--this example was created by hydrus, which can create ipfs directories from any selection of files from the same right-click menu: Hydrus will pin all the files and then wrap them in a directory, showing its progress in a popup. Your current directory shares are summarised on the respective services->review services panel:","title":"directories"},{"location":"ipfs.html#additional_links","text":"If you find you use IPFS a lot, here are some add-ons for your web browser, as recommended by /tech/: This script changes all bare ipfs hashes into clickable links to the ipfs gateway (on page loads): https://greasyfork.org/en/scripts/14837-ipfs-hash-linker These redirect all gateway links to your local daemon when it's on, it works well with the previous script: https://github.com/lidel/ipfs-firefox-addon https://github.com/dylanPowers/ipfs-chrome-extension","title":"additional links"},{"location":"launch_arguments.html","text":"launch arguments \u00b6 You can launch the program with several different arguments to alter core behaviour. If you are not familiar with this, you are essentially putting additional text after the launch command that runs the program. You can run this straight from a terminal console (usually good to test with), or you can bundle it into an easy shortcut that you only have to double-click. An example of a launch command with arguments: C:\\Hydrus Network\\client.exe -d=\"E:\\hydrus db\" --no_db_temp_files You can also add --help to your program path, like this: client.py --help server.exe --help ./server --help Which gives you a full listing of all below arguments, however this will not work with the built client executables, which are bundled as a non-console programs and will not give you text results to any console they are launched from. As client.exe is the most commonly run version of the program, here is the list, with some more help about each command: -d DB_DIR, --db_dir DB_DIR \u00b6 Lets you customise where hydrus should use for its base database directory. This is install_dir/db by default, but many advanced deployments will move this around, as described here . When an argument takes a complicated value like a path that could itself include whitespace, you should wrap it in quote marks, like this: -d=\"E:\\\\my hydrus\\\\hydrus db\" --temp_dir TEMP_DIR \u00b6 This tells all aspects of the client, including the SQLite database, to use a different path for temp operations. This would be by default your system temp path, such as: C:\\\\Users\\\\You\\\\AppData\\\\Local\\\\Temp But you can also check it in help->about . A handful of database operations (PTR tag processing, vacuums) require a lot of free space, so if your system drive is very full, or you have unusual ramdisk-based temp storage limits, you may want to relocate to another location or drive. --db_journal_mode {WAL,TRUNCATE,PERSIST,MEMORY} \u00b6 Change the journal mode of the SQLite database. The default is WAL, which works great for SSD drives, but if you have a very old or slow drive, a different mode may work better. Full docs are here . Briefly: WAL - Clever write flushing that takes advantage of new drive synchronisation tools to maintain integrity and reduce total writes. TRUNCATE - Compatibility mode. Use this if your drive cannot launch WAL. PERSIST - This is newly added to hydrus. The ideal is that if you have a high latency HDD drive and want sync with the PTR, this will work more efficiently than WAL journals, which will be regularly wiped and recreated and be fraggy. Unfortunately, with hydrus's multiple database file system, SQLite ultimately treats this as DELETE, which in our situation is basically the same as TRUNCATE, so does not increase performance. Hopefully this will change in future. MEMORY - Danger mode. Extremely fast, but you had better guarantee a lot of free ram. --db_transaction_commit_period DB_TRANSACTION_COMMIT_PERIOD \u00b6 Change the regular duration at which any database changes are committed to disk. By default this is 30 (seconds) for the client, and 120 for the server. Minimum value is 10. Typically, if hydrus crashes, it may 'forget' what happened up to this duration on the next boot. Increasing the duration will result in fewer overall 'commit' writes during very heavy work that makes several changes to the same database pages (read up on WAL mode for more details here), but it will increase commit time and memory/storage needs. Note that changes can only be committed after a job is complete, so if a single job takes longer than this period, changes will not be saved until it is done. --db_cache_size DB_CACHE_SIZE \u00b6 Change the size of the cache SQLite will use for each db file, in MB. By default this is 256, for 256MB, which for the four main client db files could mean an absolute 1GB peak use if you run a very heavy client and perform a long period of PTR sync. This does not matter so much (nor should it be fully used) if you have a smaller client. --db_synchronous_override {0,1,2,3} \u00b6 Change the rules governing how SQLite writes committed changes to your disk. The hydrus default is 1 with WAL, 2 otherwise. A user has written a full guide on this value here ! SQLite docs here . --no_db_temp_files \u00b6 When SQLite performs very large queries, it may spool temporary table results to disk. These go in your temp directory. If your temp dir is slow but you have a ton of memory, set this to never spool to disk, as here . --boot_debug \u00b6 Prints additional debug information to the log during the bootup phase of the application. The server supports the same arguments. It also takes a positional argument of 'start' (start the server, the default), 'stop' (stop any existing server), or 'restart' (do a stop, then a start), which should go before any of the above arguments.","title":"launch arguments"},{"location":"launch_arguments.html#launch_arguments","text":"You can launch the program with several different arguments to alter core behaviour. If you are not familiar with this, you are essentially putting additional text after the launch command that runs the program. You can run this straight from a terminal console (usually good to test with), or you can bundle it into an easy shortcut that you only have to double-click. An example of a launch command with arguments: C:\\Hydrus Network\\client.exe -d=\"E:\\hydrus db\" --no_db_temp_files You can also add --help to your program path, like this: client.py --help server.exe --help ./server --help Which gives you a full listing of all below arguments, however this will not work with the built client executables, which are bundled as a non-console programs and will not give you text results to any console they are launched from. As client.exe is the most commonly run version of the program, here is the list, with some more help about each command:","title":"launch arguments"},{"location":"launch_arguments.html#-d_db_dir_--db_dir_db_dir","text":"Lets you customise where hydrus should use for its base database directory. This is install_dir/db by default, but many advanced deployments will move this around, as described here . When an argument takes a complicated value like a path that could itself include whitespace, you should wrap it in quote marks, like this: -d=\"E:\\\\my hydrus\\\\hydrus db\"","title":"-d DB_DIR, --db_dir DB_DIR"},{"location":"launch_arguments.html#--temp_dir_temp_dir","text":"This tells all aspects of the client, including the SQLite database, to use a different path for temp operations. This would be by default your system temp path, such as: C:\\\\Users\\\\You\\\\AppData\\\\Local\\\\Temp But you can also check it in help->about . A handful of database operations (PTR tag processing, vacuums) require a lot of free space, so if your system drive is very full, or you have unusual ramdisk-based temp storage limits, you may want to relocate to another location or drive.","title":"--temp_dir TEMP_DIR"},{"location":"launch_arguments.html#--db_journal_mode_waltruncatepersistmemory","text":"Change the journal mode of the SQLite database. The default is WAL, which works great for SSD drives, but if you have a very old or slow drive, a different mode may work better. Full docs are here . Briefly: WAL - Clever write flushing that takes advantage of new drive synchronisation tools to maintain integrity and reduce total writes. TRUNCATE - Compatibility mode. Use this if your drive cannot launch WAL. PERSIST - This is newly added to hydrus. The ideal is that if you have a high latency HDD drive and want sync with the PTR, this will work more efficiently than WAL journals, which will be regularly wiped and recreated and be fraggy. Unfortunately, with hydrus's multiple database file system, SQLite ultimately treats this as DELETE, which in our situation is basically the same as TRUNCATE, so does not increase performance. Hopefully this will change in future. MEMORY - Danger mode. Extremely fast, but you had better guarantee a lot of free ram.","title":"--db_journal_mode {WAL,TRUNCATE,PERSIST,MEMORY}"},{"location":"launch_arguments.html#--db_transaction_commit_period_db_transaction_commit_period","text":"Change the regular duration at which any database changes are committed to disk. By default this is 30 (seconds) for the client, and 120 for the server. Minimum value is 10. Typically, if hydrus crashes, it may 'forget' what happened up to this duration on the next boot. Increasing the duration will result in fewer overall 'commit' writes during very heavy work that makes several changes to the same database pages (read up on WAL mode for more details here), but it will increase commit time and memory/storage needs. Note that changes can only be committed after a job is complete, so if a single job takes longer than this period, changes will not be saved until it is done.","title":"--db_transaction_commit_period DB_TRANSACTION_COMMIT_PERIOD"},{"location":"launch_arguments.html#--db_cache_size_db_cache_size","text":"Change the size of the cache SQLite will use for each db file, in MB. By default this is 256, for 256MB, which for the four main client db files could mean an absolute 1GB peak use if you run a very heavy client and perform a long period of PTR sync. This does not matter so much (nor should it be fully used) if you have a smaller client.","title":"--db_cache_size DB_CACHE_SIZE"},{"location":"launch_arguments.html#--db_synchronous_override_0123","text":"Change the rules governing how SQLite writes committed changes to your disk. The hydrus default is 1 with WAL, 2 otherwise. A user has written a full guide on this value here ! SQLite docs here .","title":"--db_synchronous_override {0,1,2,3}"},{"location":"launch_arguments.html#--no_db_temp_files","text":"When SQLite performs very large queries, it may spool temporary table results to disk. These go in your temp directory. If your temp dir is slow but you have a ton of memory, set this to never spool to disk, as here .","title":"--no_db_temp_files"},{"location":"launch_arguments.html#--boot_debug","text":"Prints additional debug information to the log during the bootup phase of the application. The server supports the same arguments. It also takes a positional argument of 'start' (start the server, the default), 'stop' (stop any existing server), or 'restart' (do a stop, then a start), which should go before any of the above arguments.","title":"--boot_debug"},{"location":"local_booru.html","text":"local booru \u00b6 Warning This was a fun project, but it never advanced beyond a prototype. The future of this system is other people's nice applications plugging into the Client API . The hydrus client has a simple booru to help you share your files with others over the internet. First of all, this is hosted from your client , which means other people will be connecting to your computer and fetching files you choose to share from your hard drive. If you close your client or shut your computer down, the local booru will no longer work. how to do it \u00b6 First of all, turn the local booru server on by going to services->manage services and giving it a port: It doesn't matter what you pick, but make it something fairly high. When you ok that dialog, the client should start the booru. You may get a firewall warning. Then right click some files you want to share and select share->local booru . This will throw up a small dialog, like so: This lets you enter an optional name , which titles the share and helps you keep track of it, an optional text , which lets you say some words or html to the people you are sharing with, and an expiry , which lets you determine if and when the share will no longer work. You can also copy either the internal or external link to your clipboard. The internal link (usually starting something like http://127.0.0.1:45866/ ) works inside your network and is great just for testing, while the external link (starting http://[your external ip address]:[external port]/ ) will work for anyone around the world, as long as your booru's port is being forwarded correctly . If you use a dynamic-ip service like No-IP , you can replace your external IP with your redirect hostname. You have to do it by hand right now, but I'll add a way to do it automatically in future. Danger Note that anyone with the external link will be able to see your share, so make sure you only share links with people you trust. forwarding your port \u00b6 Your home router acts as a barrier between the computers inside the network and the internet. Those inside can see out, but outsiders can only see what you tell the router to permit. Since you want to let people connect to your computer, you need to tell the router to forward all requests of a certain kind to your computer, and thus your client. If you have never done this before, it can be a headache, especially doing it manually. Luckily, a technology called UPnP makes it a ton easier, and this is how your Skype or Bittorrent clients do it automatically. Not all routers support it, but most do. You can have hydrus try to open a port this way back on services->manage services . Unless you know what you are doing and have a good reason to make them different, you might as well keep the internal and external ports the same. Once you have it set up, the client will try to make sure your router keeps that port open for your client. If it all works, you should see the new mapping appear in your services->manage local upnp dialog, which lists all your router's current port mappings. If you want to test that the port forward is set up correctly, going to http://[external ip]:[external port]/ should give a little html just saying hello. Your ISP might not allow you to talk to yourself, though, so ask a friend to try if you are having trouble. If you still do not understand what is going on here, this is a good article explaining everything. If you do not like UPnP or your router does not support it, you can set the port forward up manually, but I encourage you to keep the internal and external port the same, because absent a 'upnp port' option, the 'copy external share link' button will use the internal port. so, what do you get? \u00b6 The html layout is very simple: It uses a very similar stylesheet to these help pages. If you would like to change the style, have a look at the html and then edit install_dir/static/local_booru_style.css. The thumbnails will be the same size as in your client. editing an existing share \u00b6 You can review all your shares on services->review services , under local->booru . You can copy the links again, change the title/text/expiration, and delete any shares you don't want any more. future plans \u00b6 This was a fun project, but it never advanced beyond a prototype. The future of this system is other people's nice applications plugging into the Client API .","title":"local booru"},{"location":"local_booru.html#local_booru","text":"Warning This was a fun project, but it never advanced beyond a prototype. The future of this system is other people's nice applications plugging into the Client API . The hydrus client has a simple booru to help you share your files with others over the internet. First of all, this is hosted from your client , which means other people will be connecting to your computer and fetching files you choose to share from your hard drive. If you close your client or shut your computer down, the local booru will no longer work.","title":"local booru"},{"location":"local_booru.html#setting_up","text":"First of all, turn the local booru server on by going to services->manage services and giving it a port: It doesn't matter what you pick, but make it something fairly high. When you ok that dialog, the client should start the booru. You may get a firewall warning. Then right click some files you want to share and select share->local booru . This will throw up a small dialog, like so: This lets you enter an optional name , which titles the share and helps you keep track of it, an optional text , which lets you say some words or html to the people you are sharing with, and an expiry , which lets you determine if and when the share will no longer work. You can also copy either the internal or external link to your clipboard. The internal link (usually starting something like http://127.0.0.1:45866/ ) works inside your network and is great just for testing, while the external link (starting http://[your external ip address]:[external port]/ ) will work for anyone around the world, as long as your booru's port is being forwarded correctly . If you use a dynamic-ip service like No-IP , you can replace your external IP with your redirect hostname. You have to do it by hand right now, but I'll add a way to do it automatically in future. Danger Note that anyone with the external link will be able to see your share, so make sure you only share links with people you trust.","title":"how to do it"},{"location":"local_booru.html#port_forwarding","text":"Your home router acts as a barrier between the computers inside the network and the internet. Those inside can see out, but outsiders can only see what you tell the router to permit. Since you want to let people connect to your computer, you need to tell the router to forward all requests of a certain kind to your computer, and thus your client. If you have never done this before, it can be a headache, especially doing it manually. Luckily, a technology called UPnP makes it a ton easier, and this is how your Skype or Bittorrent clients do it automatically. Not all routers support it, but most do. You can have hydrus try to open a port this way back on services->manage services . Unless you know what you are doing and have a good reason to make them different, you might as well keep the internal and external ports the same. Once you have it set up, the client will try to make sure your router keeps that port open for your client. If it all works, you should see the new mapping appear in your services->manage local upnp dialog, which lists all your router's current port mappings. If you want to test that the port forward is set up correctly, going to http://[external ip]:[external port]/ should give a little html just saying hello. Your ISP might not allow you to talk to yourself, though, so ask a friend to try if you are having trouble. If you still do not understand what is going on here, this is a good article explaining everything. If you do not like UPnP or your router does not support it, you can set the port forward up manually, but I encourage you to keep the internal and external port the same, because absent a 'upnp port' option, the 'copy external share link' button will use the internal port.","title":"forwarding your port"},{"location":"local_booru.html#example","text":"The html layout is very simple: It uses a very similar stylesheet to these help pages. If you would like to change the style, have a look at the html and then edit install_dir/static/local_booru_style.css. The thumbnails will be the same size as in your client.","title":"so, what do you get?"},{"location":"local_booru.html#editing_shares","text":"You can review all your shares on services->review services , under local->booru . You can copy the links again, change the title/text/expiration, and delete any shares you don't want any more.","title":"editing an existing share"},{"location":"local_booru.html#future","text":"This was a fun project, but it never advanced beyond a prototype. The future of this system is other people's nice applications plugging into the Client API .","title":"future plans"},{"location":"petitionPractices.html","text":"Petitions practices \u00b6 This document exists to give a rough idea what to do in regard to the PTR to avoid creating uncecessary work for the janitors. General practice \u00b6 Kindly avoid creating unnecessary work. Create siblings for underscore and non-namespaced/namespaced versions. Petition for deletion if they are wrong. Providing a reason outside of the stock choices helps the petition getting accepted. If, for whatever reason, you have some mega job that needs doing it's often a good idea to talk to a janitor instead since we can just go ahead and do the job directly without having to deal with potentially tens of petitions because of how Hydrus splits them on the server. An example that we often come across is the removal of the awful Sankaku URLs that are almost everywhere these days due to people using a faulty parser. It's a pretty easy search and delete for a janitor, but a lot of annoying clicking if dealt with as a petition since one big petition can be split out to God-only-knows-how many. Eventually the PTR janitors will get tools to replace various bad but correct tags on the server itself. These include underscored, wrong or no namespace, common misspelling, wrong locale, and so on. Since we're going to have to do the job eventually anyway there's not much of a point making us do it twice by petitioning the existing bad but correct tags. Just sibling them and leave them be for now. Ambiguity \u00b6 Don't make additions involving ambiguous tags. hibiki -> character:hibiki (kantai collection) is bad since there's far more than one character with that name. There's quite a few wrongly tagged images because of things like this. Petitioning the deletion of such a bad sibling is good. Petitions involving system predicates \u00b6 Anything that's covered by system predicates. Siblinging these is unecessary and parenting pointless. There's no harm leaving them be aside from crowding the tag list but there's no harm to deleting them either. system:dimensions covers most everything related to resolution and aspect ratios. medium:high resolution , 4:3 aspect ratio , and pixel count. system:duration for whether something has duration (is a video or animated gif/png/whatever), or is a still image. system:has audio for if an image has audio or not. system:has duration + system:no audio replaces video with no sound as an example. system:filesize for things like huge filesize . system:filetype for filetypes. Gif, webm, mp4, psd, and so on. Anything that Hydrus can recognise which is quite a bit. Parents \u00b6 Don't push parents for tags that are not top-level siblings. It makes tracking down potential issues hard. Only push parents for relations that are literally always true, no exceptions. character:james bond -> series:james bond is a good example because James Bond always belong to that series. -> gender:male is bad because an artist might decide to draw a genderbent piece of art. Similarily -> person:pierce brosnan is bad because there have been other actors for the character. List of some bad parents to character: tags as an example: - species: due to the various -zations (humanization, animalization, mechanization). - creator: since just about anybody can draw art of the character. - gender: Since genderswap and variations exists. - Any form of physical characteristics such as hair or eye colour, hair length, clothing and accessories, etc. Translations \u00b6 Translations should be siblinged to what the closest in-use romanised tag is if there's no proper translation. If the tag is ambiguous, such as \u97ff or \u30d2\u30d3\u30ad which means hibiki , just sibling them to the ambiguous tag. The tag can then later on be deleted and replaced by a less ambiguous tag. On the other hand, \u97ff(\u8266\u968a\u3053\u308c\u304f\u3057\u3087\u3093) straight up means hibiki (kantai kollection) and can safely be siblinged to the proper character: tag. Do the same for subjective tags. \u9b45\u60d1\u306e\u3075\u3068\u3082\u3082 can be translated to bewitching thighs . \u307e\u3063\u305f\u304f\u3001\u99c6\u9010\u8266\u306f\u6700\u9ad8\u3060\u305c!! straight up translates to Geez, destroyers are the best!! , which does not contain much usable information for Hydrus currently. These can then either be siblinged down to an unsubjective tag ( thighs ) if there's objective information in the tag, deleted if purely subjective, or deleted and replaced if ambiguous.","title":"Petition practices"},{"location":"petitionPractices.html#petitions_practices","text":"This document exists to give a rough idea what to do in regard to the PTR to avoid creating uncecessary work for the janitors.","title":"Petitions practices"},{"location":"petitionPractices.html#general_practice","text":"Kindly avoid creating unnecessary work. Create siblings for underscore and non-namespaced/namespaced versions. Petition for deletion if they are wrong. Providing a reason outside of the stock choices helps the petition getting accepted. If, for whatever reason, you have some mega job that needs doing it's often a good idea to talk to a janitor instead since we can just go ahead and do the job directly without having to deal with potentially tens of petitions because of how Hydrus splits them on the server. An example that we often come across is the removal of the awful Sankaku URLs that are almost everywhere these days due to people using a faulty parser. It's a pretty easy search and delete for a janitor, but a lot of annoying clicking if dealt with as a petition since one big petition can be split out to God-only-knows-how many. Eventually the PTR janitors will get tools to replace various bad but correct tags on the server itself. These include underscored, wrong or no namespace, common misspelling, wrong locale, and so on. Since we're going to have to do the job eventually anyway there's not much of a point making us do it twice by petitioning the existing bad but correct tags. Just sibling them and leave them be for now.","title":"General practice"},{"location":"petitionPractices.html#ambiguity","text":"Don't make additions involving ambiguous tags. hibiki -> character:hibiki (kantai collection) is bad since there's far more than one character with that name. There's quite a few wrongly tagged images because of things like this. Petitioning the deletion of such a bad sibling is good.","title":"Ambiguity"},{"location":"petitionPractices.html#petitions_involving_system_predicates","text":"Anything that's covered by system predicates. Siblinging these is unecessary and parenting pointless. There's no harm leaving them be aside from crowding the tag list but there's no harm to deleting them either. system:dimensions covers most everything related to resolution and aspect ratios. medium:high resolution , 4:3 aspect ratio , and pixel count. system:duration for whether something has duration (is a video or animated gif/png/whatever), or is a still image. system:has audio for if an image has audio or not. system:has duration + system:no audio replaces video with no sound as an example. system:filesize for things like huge filesize . system:filetype for filetypes. Gif, webm, mp4, psd, and so on. Anything that Hydrus can recognise which is quite a bit.","title":"Petitions involving system predicates"},{"location":"petitionPractices.html#parents","text":"Don't push parents for tags that are not top-level siblings. It makes tracking down potential issues hard. Only push parents for relations that are literally always true, no exceptions. character:james bond -> series:james bond is a good example because James Bond always belong to that series. -> gender:male is bad because an artist might decide to draw a genderbent piece of art. Similarily -> person:pierce brosnan is bad because there have been other actors for the character. List of some bad parents to character: tags as an example: - species: due to the various -zations (humanization, animalization, mechanization). - creator: since just about anybody can draw art of the character. - gender: Since genderswap and variations exists. - Any form of physical characteristics such as hair or eye colour, hair length, clothing and accessories, etc.","title":"Parents"},{"location":"petitionPractices.html#translations","text":"Translations should be siblinged to what the closest in-use romanised tag is if there's no proper translation. If the tag is ambiguous, such as \u97ff or \u30d2\u30d3\u30ad which means hibiki , just sibling them to the ambiguous tag. The tag can then later on be deleted and replaced by a less ambiguous tag. On the other hand, \u97ff(\u8266\u968a\u3053\u308c\u304f\u3057\u3087\u3093) straight up means hibiki (kantai kollection) and can safely be siblinged to the proper character: tag. Do the same for subjective tags. \u9b45\u60d1\u306e\u3075\u3068\u3082\u3082 can be translated to bewitching thighs . \u307e\u3063\u305f\u304f\u3001\u99c6\u9010\u8266\u306f\u6700\u9ad8\u3060\u305c!! straight up translates to Geez, destroyers are the best!! , which does not contain much usable information for Hydrus currently. These can then either be siblinged down to an unsubjective tag ( thighs ) if there's objective information in the tag, deleted if purely subjective, or deleted and replaced if ambiguous.","title":"Translations"},{"location":"privacy.html","text":"privacy \u00b6 tl;dr Using a trustworthy VPN for all your remotely fun internet traffic is a good idea. It is cheap and easy these days, and it offers multiple levels of general protection. I have tried very hard to ensure the hydrus network servers respect your privacy. They do not work like normal websites, and the amount of information your client will reveal to them is very limited. For most general purposes, normal users can rest assured that their activity on a repository like the Public Tag Repository (PTR) is effectively completely anonymous. You need an account to connect, but all that really means serverside is a random number with a random passcode. Your client tells nothing more to the server than the exact content you upload to it (e.g. tag mappings, which are a tag+file_hash pair). The server cannot help but be aware of your IP address to accept your network request, but in all but one situation--uploading a file to a file repository when the administrator has set to save IPs for DMCA purposes--it forgets your IP as soon as the job is done. So that janitors can process petitions efficiently and correct mistakes, servers remember which accounts upload which content, but they do not communicate this to any place, and the memory only lasts for a certain time--after which the content is completely anonymised. The main potential privacy worries are over a malicious janitor or--more realistically, since the janitor UI is even more buggy and feature-poor than the hydrus front-end!--a malicious server owner or anyone else who gains raw access to the server's raw database files or its code as it operates. Even in the case where you cannot trust the server you are talking to, hydrus should be fairly robust, simply because the client does not say much to the server, nor that often. The only realistic worries, as I talk about in detail below, are if you actually upload personal files or tag personal files with real names. I can't do much about being Anon if you (accidentally or not), declare who you are. So, in general, if you are on a good VPN and tagging anime babes from boorus, I think we are near perfect on privacy. That said, our community is rightly constantly thinking about this topic, so in the following I have tried to go into exhaustive detail. Some of the vulnerabilities are impractical and esoteric, but if nothing else it is fun to think about. If you can think of more problems, or decent mitigations, let me know! https certificates \u00b6 Hydrus servers only communicate in https, so anyone who is able to casually observe your traffic (say your roommate cracked your router, or the guy running the coffee shop whose wifi you are using likes to snoop) should not ever be able to see what data you are sending or receiving. If you do not use a VPN, they will be able to see that you are talking to the repository (and the repository will technically see who you are, too, though as above, it normally isn't interested). Someone more powerful, like your ISP or Government, may be able to do more: If you just start a new server yourself When you first make a server, the 'certificate' it creates to enable https is a low quality one. It is called 'self-signed' because it is only endorsed by itself and it is not tied to a particular domain on the internet that everyone agrees on via DNS. Your traffic to this server is still encrypted, but an advanced attacker who stands between you and the server could potentially perform what is called a man-in-the-middle attack and see your traffic. This problem is fairly mitigated by using a VPN, since even if someone were able to MitM your connection, they know no more than your VPN's location, not your IP. A future version of the network will further mitigate this problem by having you enter unverified certificates into a certificate manager and then compare to that store on future requests, to try to detect if a MitM attack is occurring. If the server is on a domain and now uses a proper verified certificate If the admin hosts the server on a website domain (rather than a raw IP address) and gets a proper certificate for that domain from a service like Let's Encrypt, they can swap that into the server and then your traffic should be protected from any eavesdropper. It is still good to use a VPN to further obscure who you are, including from the server admin. You can check how good a server's certificate is by loading its base address in the form https://host:port into your browser. If it has a nice certificate--like the PTR --the welcome page will load instantly. If it is still on self-signed, you'll get one of those 'can't show this page unless you make an exception' browser error pages before it will show. accounts \u00b6 An account has two hex strings, like this: Access key: 4a285629721ca442541ef2c15ea17d1f7f7578b0c3f4f5f2a05f8f0ab297786f This is in your services->manage services panel, and acts like a password. Keep this absolutely secret--only you know it, and no one else ever needs to. If the server has not had its code changed, it does not actually know this string, but it is stores special data that lets it verify it when you 'log in'. Account ID: 207d592682a7962564d52d2480f05e72a272443017553cedbd8af0fecc7b6e0a This can be copied from a button in your services->review services panel, and acts a bit like a semi-private username. Only janitors should ever have access to this. If you ever want to contact the server admin about an account upgrade or similar, they will need to know this so they can load up your account and alter it. When you generate a new account, the client first asks the server for a list of available auto-creatable account types, then asks for a registration token for one of them, then uses the token to generate an access key. The server is never told anything about you, and it forgets your IP address as soon as it finishes talking to you. Your account also stores a bandwidth use record and some miscellaneous data such as when the account was created, if and when it expires, what permissions and bandwidth rules it has, an aggregate score of how often it has petitions approved rather than denied, and whether it is currently banned. I do not think someone inspecting the bandwidth record could figure out what you were doing based on byte counts (especially as with every new month the old month's bandwidth records are compressed to just one number) beyond the rough time you synced and whether you have done much uploading. Since only a janitor can see your account and could feasibly attempt to inspect bandwidth data, they would already know this information. downloading \u00b6 When you sync with a repository, your client will download and then keep up to date with all the metadata the server knows. This metadata is downloaded the same way by all users, and it comes in a completely anonymous format. The server does not know what you are interested in, and no one who downloads knows who uploaded what. Since the client regularly updates, a detailed analysis of the raw update files will reveal roughly when a tag or other row was added or deleted, although that timestamp is no more precise than the duration of the update period (by default, 100,000 seconds, or a little over a day). Your client will never ask the server for information about a particular file or tag. You download everything in generic chunks, form a local index of that information, and then all queries are performed on your own hard drive with your own CPU. By just downloading, even if the server owner were to identify you by your IP address, all they know is that you sync. They cannot tell anything about your files. In the case of a file repository, you client downloads all the thumbnails automatically, but then you download actual files separately as you like. The server does not log which files you download. uploading \u00b6 When you upload, your account is temporarily linked to the rows of content you add. This is so janitors can group petitions by who makes them, undo large mistakes easily, and even leave you a brief message (like \"please stop adding those clothing siblings\") for your client to pick up the next time it syncs your account. After the temporary period is over, all submissions are anonymised. So, what are the privacy concerns with that? Isn't the account 'Anon'? Privacy can be tricky . Hydrus tech is obviously far, far better than anything normal consumers use, but here I believe are the remaining barriers to pure Anonymity, assuming someone with resources was willing to put a lot of work in to attack you: Note I am using the PTR as the example since that is what most people are using. If you are uploading to a server run between friends, privacy is obviously more difficult to preserve--if there are only three users, it may not be too hard to figure out who is uploading the NarutoXSonichu diaperfur content! If you are talking to a server with a small group of users, don't upload anything crazy or personally identifying unless that's the point of the server. IP Address Across Network \u00b6 Attacker: ISP/Government. Exposure: That you use the PTR. Problem: Your IP address may be recorded by servers in between you and the PTR (e.g. your ISP/Government). Anyone who could convert that IP address and timestamp into your identity would know you were a PTR user. Mitigation: Use a trustworthy VPN. IP Address At PTR \u00b6 Attacker: PTR administrator or someone else who has access to the server as it runs. Exposure: Which PTR account you are. Problem: I may be lying to you about the server forgetting IPs, or the admin running the PTR may have secretly altered its code. If the malicious admin were able to convert IP address and timestamp into your identity, they obviously be able to link that to your account and thus its various submissions. Mitigation: Use a trustworthy VPN. Time Identifiable Uploads \u00b6 Attacker: Anyone with an account on the PTR. Exposure: That you use the PTR. Problem: If a tag was added way before the file was public, then it is likely the original owner tagged it. An example would be if you were an artist and you tagged your own work on the PTR two weeks before publishing the work. Anyone who looked through the server updates carefully and compared to file publish dates, particularly if they were targeting you already, could notice the date discrepancy and know you were a PTR user. Mitigation: Don't tag any file you plan to share if you are currently the only person who has any copies. Upload it, then tag it. Content Identifiable Uploads \u00b6 Attacker: Anyone with an account on the PTR. Exposure: That you use the PTR. Problem: All uploads are shared anonymously with other users, but if the content itself is identifying, you may be exposed. An example would be if there was some popular lewd file floating around of you and your girlfriend, but no one knew who was in it. If you decided to tag it with accurate 'person:' tags, anyone synced with the PTR, when they next looked at that file, would see those person tags. The same would apply if the file was originally private but then leaked. Mitigation: Just like an imageboard, do not upload any personally identifying information. Individual Account Cross-referencing \u00b6 Attacker: PTR administrator or someone else with access to the server database files after one of your uploads has been connected to your real identity, perhaps with a Time/Content Identifiable Upload as above. Exposure: What you have been uploading recently. Problem: If you accidentally tie your identity to an individual content row (could be as simple as telling an admin 'yes, I, person whose name you know, uploaded that sibling last week'), then anyone who can see which accounts uploaded what will obviously be able to see your other uploads. Mitigation: Best practise is to not to reveal specifically what you upload. Note that this vulnerability (an admin looking up what else you uploaded after they discover something else you did) is now well mitigated by the account history anonymisation as below (assuming the admin has not altered the code to disable it!). If the server is set to anonymise content after 90 days, then your account can only be identified from specific content rows that were uploaded in the past 90 days, and cross-references would also only see the last 90 days of activity. Big Brain Individual Account Mapping Fingerprint Cross-referencing \u00b6 Attacker: Someone who has access to tag/file favourite lists on another site and gets access to a hydrus repository that has been compromised to not anonymise history for a long duration. Exposure: Which PTR account another website's account uses. Problem: Someone who had raw access to the PTR database's historical account record (i.e. they had disabled the anonymisation routine below) and also had compiled some booru users' 'favourite tag/artist' lists and was very clever could try to cross reference those two lists and connect a particular PTR account to a particular booru account based on similar tag distributions. There would be many holes in the PTR record, since only the first account to upload a tag mapping is linked to it, but maybe it would be possible to get high confidence on a match if you have really distinct tastes. Favourites lists are probably decent digital fingerprints, and there may be a shadow of that in your PTR uploads, although I also think there are enough users uploading and 'competing' for saved records on different tags that each users' shadow would be too indistinct to really pull this off. Mitigation: I am mostly memeing here. But privacy is tricky, and who knows what the scrapers of the future are going to do with all the cloud data they are sucking up. Even then, the historical anonymisation routine below now generally eliminates this threat , assuming the server has not been compromised to disable it, so it matters far less if its database files fall into bad hands in the future, but accounts on regular websites are already being aggregated by the big marketing engines, and this will only happen in more clever ways in future. I wouldn't be surprised if booru accounts are soon being connected to other online identities based on fingerprint profiles of likes and similar. Don't save your spicy favourites on a website, even if that list is private, since if that site gets hacked or just bought out one day, someone really smart could start connecting dots ten years from now. account history anonymisation \u00b6 As the PTR moved to multiple accounts, we talked more about the potential account cross-referencing worries. The threats are marginal today, but it may be a real problem in future. If the server database files were to ever fall into bad hands, having a years-old record of who uploaded what is not excellent. Like the AOL search leak, that data may have unpleasant rammifications, especially to an intelligent scraper in the future. This historical record is also not needed for most janitorial work. Therefore, hydrus repositories now completely anonymise all uploads after a certain delay. It works by assigning ownership of every file, mapping, or tag sibling/parent to a special 'null' account, so all trace that your account uploaded any of it is deleted. It happens by default 90 days after the content is uploaded, but it can be more or less depending on the local admin and janitors. You can see the current 'anonymisation' period under review services . If you are a janitor with the ability to modify accounts based on uploaded content, you will see anything old will bring up the null account. It is specially labelled, so you can't miss it. You cannot ban or otherwise alter this account. No one can actually use it.","title":"privacy"},{"location":"privacy.html#privacy","text":"tl;dr Using a trustworthy VPN for all your remotely fun internet traffic is a good idea. It is cheap and easy these days, and it offers multiple levels of general protection. I have tried very hard to ensure the hydrus network servers respect your privacy. They do not work like normal websites, and the amount of information your client will reveal to them is very limited. For most general purposes, normal users can rest assured that their activity on a repository like the Public Tag Repository (PTR) is effectively completely anonymous. You need an account to connect, but all that really means serverside is a random number with a random passcode. Your client tells nothing more to the server than the exact content you upload to it (e.g. tag mappings, which are a tag+file_hash pair). The server cannot help but be aware of your IP address to accept your network request, but in all but one situation--uploading a file to a file repository when the administrator has set to save IPs for DMCA purposes--it forgets your IP as soon as the job is done. So that janitors can process petitions efficiently and correct mistakes, servers remember which accounts upload which content, but they do not communicate this to any place, and the memory only lasts for a certain time--after which the content is completely anonymised. The main potential privacy worries are over a malicious janitor or--more realistically, since the janitor UI is even more buggy and feature-poor than the hydrus front-end!--a malicious server owner or anyone else who gains raw access to the server's raw database files or its code as it operates. Even in the case where you cannot trust the server you are talking to, hydrus should be fairly robust, simply because the client does not say much to the server, nor that often. The only realistic worries, as I talk about in detail below, are if you actually upload personal files or tag personal files with real names. I can't do much about being Anon if you (accidentally or not), declare who you are. So, in general, if you are on a good VPN and tagging anime babes from boorus, I think we are near perfect on privacy. That said, our community is rightly constantly thinking about this topic, so in the following I have tried to go into exhaustive detail. Some of the vulnerabilities are impractical and esoteric, but if nothing else it is fun to think about. If you can think of more problems, or decent mitigations, let me know!","title":"privacy"},{"location":"privacy.html#https_certificates","text":"Hydrus servers only communicate in https, so anyone who is able to casually observe your traffic (say your roommate cracked your router, or the guy running the coffee shop whose wifi you are using likes to snoop) should not ever be able to see what data you are sending or receiving. If you do not use a VPN, they will be able to see that you are talking to the repository (and the repository will technically see who you are, too, though as above, it normally isn't interested). Someone more powerful, like your ISP or Government, may be able to do more: If you just start a new server yourself When you first make a server, the 'certificate' it creates to enable https is a low quality one. It is called 'self-signed' because it is only endorsed by itself and it is not tied to a particular domain on the internet that everyone agrees on via DNS. Your traffic to this server is still encrypted, but an advanced attacker who stands between you and the server could potentially perform what is called a man-in-the-middle attack and see your traffic. This problem is fairly mitigated by using a VPN, since even if someone were able to MitM your connection, they know no more than your VPN's location, not your IP. A future version of the network will further mitigate this problem by having you enter unverified certificates into a certificate manager and then compare to that store on future requests, to try to detect if a MitM attack is occurring. If the server is on a domain and now uses a proper verified certificate If the admin hosts the server on a website domain (rather than a raw IP address) and gets a proper certificate for that domain from a service like Let's Encrypt, they can swap that into the server and then your traffic should be protected from any eavesdropper. It is still good to use a VPN to further obscure who you are, including from the server admin. You can check how good a server's certificate is by loading its base address in the form https://host:port into your browser. If it has a nice certificate--like the PTR --the welcome page will load instantly. If it is still on self-signed, you'll get one of those 'can't show this page unless you make an exception' browser error pages before it will show.","title":"https certificates"},{"location":"privacy.html#accounts","text":"An account has two hex strings, like this: Access key: 4a285629721ca442541ef2c15ea17d1f7f7578b0c3f4f5f2a05f8f0ab297786f This is in your services->manage services panel, and acts like a password. Keep this absolutely secret--only you know it, and no one else ever needs to. If the server has not had its code changed, it does not actually know this string, but it is stores special data that lets it verify it when you 'log in'. Account ID: 207d592682a7962564d52d2480f05e72a272443017553cedbd8af0fecc7b6e0a This can be copied from a button in your services->review services panel, and acts a bit like a semi-private username. Only janitors should ever have access to this. If you ever want to contact the server admin about an account upgrade or similar, they will need to know this so they can load up your account and alter it. When you generate a new account, the client first asks the server for a list of available auto-creatable account types, then asks for a registration token for one of them, then uses the token to generate an access key. The server is never told anything about you, and it forgets your IP address as soon as it finishes talking to you. Your account also stores a bandwidth use record and some miscellaneous data such as when the account was created, if and when it expires, what permissions and bandwidth rules it has, an aggregate score of how often it has petitions approved rather than denied, and whether it is currently banned. I do not think someone inspecting the bandwidth record could figure out what you were doing based on byte counts (especially as with every new month the old month's bandwidth records are compressed to just one number) beyond the rough time you synced and whether you have done much uploading. Since only a janitor can see your account and could feasibly attempt to inspect bandwidth data, they would already know this information.","title":"accounts"},{"location":"privacy.html#downloading","text":"When you sync with a repository, your client will download and then keep up to date with all the metadata the server knows. This metadata is downloaded the same way by all users, and it comes in a completely anonymous format. The server does not know what you are interested in, and no one who downloads knows who uploaded what. Since the client regularly updates, a detailed analysis of the raw update files will reveal roughly when a tag or other row was added or deleted, although that timestamp is no more precise than the duration of the update period (by default, 100,000 seconds, or a little over a day). Your client will never ask the server for information about a particular file or tag. You download everything in generic chunks, form a local index of that information, and then all queries are performed on your own hard drive with your own CPU. By just downloading, even if the server owner were to identify you by your IP address, all they know is that you sync. They cannot tell anything about your files. In the case of a file repository, you client downloads all the thumbnails automatically, but then you download actual files separately as you like. The server does not log which files you download.","title":"downloading"},{"location":"privacy.html#uploading","text":"When you upload, your account is temporarily linked to the rows of content you add. This is so janitors can group petitions by who makes them, undo large mistakes easily, and even leave you a brief message (like \"please stop adding those clothing siblings\") for your client to pick up the next time it syncs your account. After the temporary period is over, all submissions are anonymised. So, what are the privacy concerns with that? Isn't the account 'Anon'? Privacy can be tricky . Hydrus tech is obviously far, far better than anything normal consumers use, but here I believe are the remaining barriers to pure Anonymity, assuming someone with resources was willing to put a lot of work in to attack you: Note I am using the PTR as the example since that is what most people are using. If you are uploading to a server run between friends, privacy is obviously more difficult to preserve--if there are only three users, it may not be too hard to figure out who is uploading the NarutoXSonichu diaperfur content! If you are talking to a server with a small group of users, don't upload anything crazy or personally identifying unless that's the point of the server.","title":"uploading"},{"location":"privacy.html#ip_address_across_network","text":"Attacker: ISP/Government. Exposure: That you use the PTR. Problem: Your IP address may be recorded by servers in between you and the PTR (e.g. your ISP/Government). Anyone who could convert that IP address and timestamp into your identity would know you were a PTR user. Mitigation: Use a trustworthy VPN.","title":"IP Address Across Network"},{"location":"privacy.html#ip_address_at_ptr","text":"Attacker: PTR administrator or someone else who has access to the server as it runs. Exposure: Which PTR account you are. Problem: I may be lying to you about the server forgetting IPs, or the admin running the PTR may have secretly altered its code. If the malicious admin were able to convert IP address and timestamp into your identity, they obviously be able to link that to your account and thus its various submissions. Mitigation: Use a trustworthy VPN.","title":"IP Address At PTR"},{"location":"privacy.html#time_identifiable_uploads","text":"Attacker: Anyone with an account on the PTR. Exposure: That you use the PTR. Problem: If a tag was added way before the file was public, then it is likely the original owner tagged it. An example would be if you were an artist and you tagged your own work on the PTR two weeks before publishing the work. Anyone who looked through the server updates carefully and compared to file publish dates, particularly if they were targeting you already, could notice the date discrepancy and know you were a PTR user. Mitigation: Don't tag any file you plan to share if you are currently the only person who has any copies. Upload it, then tag it.","title":"Time Identifiable Uploads"},{"location":"privacy.html#content_identifiable_uploads","text":"Attacker: Anyone with an account on the PTR. Exposure: That you use the PTR. Problem: All uploads are shared anonymously with other users, but if the content itself is identifying, you may be exposed. An example would be if there was some popular lewd file floating around of you and your girlfriend, but no one knew who was in it. If you decided to tag it with accurate 'person:' tags, anyone synced with the PTR, when they next looked at that file, would see those person tags. The same would apply if the file was originally private but then leaked. Mitigation: Just like an imageboard, do not upload any personally identifying information.","title":"Content Identifiable Uploads"},{"location":"privacy.html#individual_account_cross-referencing","text":"Attacker: PTR administrator or someone else with access to the server database files after one of your uploads has been connected to your real identity, perhaps with a Time/Content Identifiable Upload as above. Exposure: What you have been uploading recently. Problem: If you accidentally tie your identity to an individual content row (could be as simple as telling an admin 'yes, I, person whose name you know, uploaded that sibling last week'), then anyone who can see which accounts uploaded what will obviously be able to see your other uploads. Mitigation: Best practise is to not to reveal specifically what you upload. Note that this vulnerability (an admin looking up what else you uploaded after they discover something else you did) is now well mitigated by the account history anonymisation as below (assuming the admin has not altered the code to disable it!). If the server is set to anonymise content after 90 days, then your account can only be identified from specific content rows that were uploaded in the past 90 days, and cross-references would also only see the last 90 days of activity.","title":"Individual Account Cross-referencing"},{"location":"privacy.html#big_brain_individual_account_mapping_fingerprint_cross-referencing","text":"Attacker: Someone who has access to tag/file favourite lists on another site and gets access to a hydrus repository that has been compromised to not anonymise history for a long duration. Exposure: Which PTR account another website's account uses. Problem: Someone who had raw access to the PTR database's historical account record (i.e. they had disabled the anonymisation routine below) and also had compiled some booru users' 'favourite tag/artist' lists and was very clever could try to cross reference those two lists and connect a particular PTR account to a particular booru account based on similar tag distributions. There would be many holes in the PTR record, since only the first account to upload a tag mapping is linked to it, but maybe it would be possible to get high confidence on a match if you have really distinct tastes. Favourites lists are probably decent digital fingerprints, and there may be a shadow of that in your PTR uploads, although I also think there are enough users uploading and 'competing' for saved records on different tags that each users' shadow would be too indistinct to really pull this off. Mitigation: I am mostly memeing here. But privacy is tricky, and who knows what the scrapers of the future are going to do with all the cloud data they are sucking up. Even then, the historical anonymisation routine below now generally eliminates this threat , assuming the server has not been compromised to disable it, so it matters far less if its database files fall into bad hands in the future, but accounts on regular websites are already being aggregated by the big marketing engines, and this will only happen in more clever ways in future. I wouldn't be surprised if booru accounts are soon being connected to other online identities based on fingerprint profiles of likes and similar. Don't save your spicy favourites on a website, even if that list is private, since if that site gets hacked or just bought out one day, someone really smart could start connecting dots ten years from now.","title":"Big Brain Individual Account Mapping Fingerprint Cross-referencing"},{"location":"privacy.html#account_history","text":"As the PTR moved to multiple accounts, we talked more about the potential account cross-referencing worries. The threats are marginal today, but it may be a real problem in future. If the server database files were to ever fall into bad hands, having a years-old record of who uploaded what is not excellent. Like the AOL search leak, that data may have unpleasant rammifications, especially to an intelligent scraper in the future. This historical record is also not needed for most janitorial work. Therefore, hydrus repositories now completely anonymise all uploads after a certain delay. It works by assigning ownership of every file, mapping, or tag sibling/parent to a special 'null' account, so all trace that your account uploaded any of it is deleted. It happens by default 90 days after the content is uploaded, but it can be more or less depending on the local admin and janitors. You can see the current 'anonymisation' period under review services . If you are a janitor with the ability to modify accounts based on uploaded content, you will see anything old will bring up the null account. It is specially labelled, so you can't miss it. You cannot ban or otherwise alter this account. No one can actually use it.","title":"account history anonymisation"},{"location":"reducing_lag.html","text":"hydrus is cpu and hdd hungry \u00b6 The hydrus client manages a lot of complicated data and gives you a lot of power over it. To add millions of files and tags to its database, and then to perform difficult searches over that information, it needs to use a lot of CPU time and hard drive time--sometimes in small laggy blips, and occasionally in big 100% CPU chunks. I don't put training wheels or limiters on the software either, so if you search for 300,000 files, the client will try to fetch that many. Furthermore, I am just one unprofessional guy dealing with a lot of legacy code from when I was even worse at programming. I am always working to reduce lag and other inconveniences, and improve UI feedback when many things are going on, but there is still a lot for me to do. In general, the client works best on snappy computers with low-latency hard drives where it does not have to constantly compete with other CPU- or HDD- heavy programs. Running hydrus on your games computer is no problem at all, but if you leave the client on all the time, then make sure under the options it is set not to do idle work while your CPU is busy, so your games can run freely. Similarly, if you run two clients on the same computer, you should have them set to work at different times, because if they both try to process 500,000 tags at once on the same hard drive, they will each slow to a crawl. If you run on an HDD, keeping it defragged is very important, and good practice for all your programs anyway. Make sure you know what this is and that you do it. maintenance and processing \u00b6 I have attempted to offload most of the background maintenance of the client (which typically means repository processing and internal database defragging) to time when you are not using the client. This can either be 'idle time' or 'shutdown time'. The calculations for what these exactly mean are customisable in file->options->maintenance and processing . If you run a quick computer, you likely don't have to change any of these options. Repositories will synchronise and the database will stay fairly optimal without you even noticing the work that is going on. This is especially true if you leave your client on all the time. If you have an old, slower computer though, or if your hard drive is high latency, make sure these options are set for whatever is best for your situation. Turning off idle time completely is often helpful as some older computers are slow to even recognise--mid task--that you want to use the client again, or take too long to abandon a big task half way through. If you set your client to only do work on shutdown, then you can control exactly when that happens. reducing search and general gui lag \u00b6 Searching for tags via the autocomplete dropdown and searching for files in general can sometimes take a very long time. It depends on many things. In general, the more predicates (tags and system:something) you have active for a search, and the more specific they are, the faster it will be. You can also look at file->options->speed and memory . Increasing the autocomplete thresholds under tags->manage tag display and search is also often helpful. You can even force autocompletes to only fetch results when you manually ask for them. Having lots of thumbnails open or downloads running can slow many things down. Check the 'pages' menu to see your current session weight. If it is about 50,000, or you have individual pages with more than 10,000 files or download URLs, try cutting down a bit. finally - profiles \u00b6 Programming is all about re-editing your first, second, third drafts of an idea. You are always going back to old code and adding new features or making it work better. If something is running slow for you, I can almost always speed it up or at least improve the way it schedules that chunk of work. However figuring out exactly why something is running slow or holding up the UI is tricky and often gives an unexpected result. I can guess what might be running inefficiently from reports, but what I really need to be sure is a profile , which drills down into every function of a job, counting how many times they are called and timing how long they take. A profile for a single call looks like this . So, please let me know: The general steps to reproduce the problem (e.g. \"Running system:numtags>4 is ridiculously slow on its own on 'all known tags'.\") Your client's approximate overall size (e.g. \"500k files, and it syncs to the PTR.\") The type of hard drive you are running hydrus from. (e.g. \"A 2TB 7200rpm drive that is 20% full. I regularly defrag it.\") Any profiles you have collected. You can generate a profile by hitting help->debug->profile mode , which tells the client to generate profile information for almost all of its behind the scenes jobs. This can be spammy, so don't leave it on for a very long time (you can turn it off by hitting the help menu entry again). Turn on profile mode, do the thing that runs slow for you (importing a file, fetching some tags, whatever), and then check your database folder (most likely install_dir/db ) for a new 'client profile - DATE.log' file. This file will be filled with several sets of tables with timing information. Please send that whole file to me, or if it is too large, cut what seems important. It should not contain any personal information, but feel free to look through it. There are several ways to contact me .","title":"reducing lag"},{"location":"reducing_lag.html#intro","text":"The hydrus client manages a lot of complicated data and gives you a lot of power over it. To add millions of files and tags to its database, and then to perform difficult searches over that information, it needs to use a lot of CPU time and hard drive time--sometimes in small laggy blips, and occasionally in big 100% CPU chunks. I don't put training wheels or limiters on the software either, so if you search for 300,000 files, the client will try to fetch that many. Furthermore, I am just one unprofessional guy dealing with a lot of legacy code from when I was even worse at programming. I am always working to reduce lag and other inconveniences, and improve UI feedback when many things are going on, but there is still a lot for me to do. In general, the client works best on snappy computers with low-latency hard drives where it does not have to constantly compete with other CPU- or HDD- heavy programs. Running hydrus on your games computer is no problem at all, but if you leave the client on all the time, then make sure under the options it is set not to do idle work while your CPU is busy, so your games can run freely. Similarly, if you run two clients on the same computer, you should have them set to work at different times, because if they both try to process 500,000 tags at once on the same hard drive, they will each slow to a crawl. If you run on an HDD, keeping it defragged is very important, and good practice for all your programs anyway. Make sure you know what this is and that you do it.","title":"hydrus is cpu and hdd hungry"},{"location":"reducing_lag.html#maintenance_and_processing","text":"I have attempted to offload most of the background maintenance of the client (which typically means repository processing and internal database defragging) to time when you are not using the client. This can either be 'idle time' or 'shutdown time'. The calculations for what these exactly mean are customisable in file->options->maintenance and processing . If you run a quick computer, you likely don't have to change any of these options. Repositories will synchronise and the database will stay fairly optimal without you even noticing the work that is going on. This is especially true if you leave your client on all the time. If you have an old, slower computer though, or if your hard drive is high latency, make sure these options are set for whatever is best for your situation. Turning off idle time completely is often helpful as some older computers are slow to even recognise--mid task--that you want to use the client again, or take too long to abandon a big task half way through. If you set your client to only do work on shutdown, then you can control exactly when that happens.","title":"maintenance and processing"},{"location":"reducing_lag.html#reducing_lag","text":"Searching for tags via the autocomplete dropdown and searching for files in general can sometimes take a very long time. It depends on many things. In general, the more predicates (tags and system:something) you have active for a search, and the more specific they are, the faster it will be. You can also look at file->options->speed and memory . Increasing the autocomplete thresholds under tags->manage tag display and search is also often helpful. You can even force autocompletes to only fetch results when you manually ask for them. Having lots of thumbnails open or downloads running can slow many things down. Check the 'pages' menu to see your current session weight. If it is about 50,000, or you have individual pages with more than 10,000 files or download URLs, try cutting down a bit.","title":"reducing search and general gui lag"},{"location":"reducing_lag.html#profiles","text":"Programming is all about re-editing your first, second, third drafts of an idea. You are always going back to old code and adding new features or making it work better. If something is running slow for you, I can almost always speed it up or at least improve the way it schedules that chunk of work. However figuring out exactly why something is running slow or holding up the UI is tricky and often gives an unexpected result. I can guess what might be running inefficiently from reports, but what I really need to be sure is a profile , which drills down into every function of a job, counting how many times they are called and timing how long they take. A profile for a single call looks like this . So, please let me know: The general steps to reproduce the problem (e.g. \"Running system:numtags>4 is ridiculously slow on its own on 'all known tags'.\") Your client's approximate overall size (e.g. \"500k files, and it syncs to the PTR.\") The type of hard drive you are running hydrus from. (e.g. \"A 2TB 7200rpm drive that is 20% full. I regularly defrag it.\") Any profiles you have collected. You can generate a profile by hitting help->debug->profile mode , which tells the client to generate profile information for almost all of its behind the scenes jobs. This can be spammy, so don't leave it on for a very long time (you can turn it off by hitting the help menu entry again). Turn on profile mode, do the thing that runs slow for you (importing a file, fetching some tags, whatever), and then check your database folder (most likely install_dir/db ) for a new 'client profile - DATE.log' file. This file will be filled with several sets of tables with timing information. Please send that whole file to me, or if it is too large, cut what seems important. It should not contain any personal information, but feel free to look through it. There are several ways to contact me .","title":"finally - profiles"},{"location":"running_from_source.html","text":"I write the client and server entirely in python , which can run straight from source. It is not simple to get hydrus running this way, but if none of the built packages work for you (for instance you use a non-Ubuntu-compatible flavour of Linux), it may be the only way you can get the program to run. Also, if you have a general interest in exploring the code or wish to otherwise modify the program, you will obviously need to do this. a quick note about Linux flavours \u00b6 I often point people here when they are running non-Ubuntu flavours of Linux and cannot run the build. One Debian user mentioned that he had an error like this: _ImportError: /home/user/hydrus/libX11.so.6: undefined symbol: xcb\\_poll\\_for_reply64_ But that by simply deleting the libX11.so.6 file in the hydrus install directory, he was able to boot. I presume this meant the build was then relying on his local libX11.so, which happened to have better API compatibility. If you receive a similar error, you might like to try the same sort of thing. Let me know if you discover anything! building packages on windows \u00b6 Installing some packages on windows with pip may need Visual Studio's C++ Build Tools for your version of python. Although these tools are free, it can be a pain to get them through the official (and often huge) downloader installer from Microsoft. Instead, install Chocolatey and use this one simple line: choco install -y vcbuildtools visualstudio2017buildtools Trust me, just do this, it will save a ton of headaches! This can also be helpful for Windows 10 python work generally: choco install -y windows-sdk-10.0 what you will need \u00b6 You will need basic python experience, python 3.x and a number of python modules, all through pip. First of all, get the actual program. The github repo is https://github.com/hydrusnetwork/hydrus . If you are familiar with git, you can just clone the repo to the location you want, but if not, then just go to the latest release and download and extract the source code .zip or .tar.gz somewhere. The same database location rules apply for the source release as the builds, so if you are not planning to redirect the database with the -d launch parameter, make sure the directory has write permissions (e.g. in Windows, don't put it in \"Program Files\") Inside the extract should be client.py, client.pyw, and server.py. You will be treating these basically the same as the 'client' and 'server' executables--you should be able to launch them the same way and they take the same launch parameters as the exes. On Windows, using client.pyw allows you to neatly launch the program without a command terminal appearing behind it, but both the .py and .pyw work fundamentally the same--feel free to play with them both. Hydrus needs a whole bunch of libraries, so let's now set your python up. If you are on Linux or macOS, or if you are on Windows and have an existing python you do not want to stomp all over with new modules, I recommend you create a virtual environment: Note, if you are on Linux, it may be easier to use your package manager instead of messing around with venv. A user has written a great summary with all needed packages here . To create a new venv environment: (navigate to your hydrus extract folder in a terminal) pip3 install virtualenv (if you need it) pip3 install wheel (if you need it) mkdir venv virtualenv --python=python3 venv . venv/bin/activate That . venv/bin/activate line turns your venv on, which is an isolated copy of python that you can install modules to without worrying about breaking something system-wide, and will be needed every time you run the client.pyw / server.py files. You should see your terminal note you are now in the venv. You can easily tuck this venv activation into a launch script. On Windows Powershell, the command is .\\venv\\Scripts\\activate , but you may find the whole deal is done much easier in cmd than Powershell. When in Powershell, just type cmd to get an old fashioned command line. In cmd, the launch command is just venv\\scripts\\activate , no leading period. After that, you can use pip to install everything you need from the appropriate requirements.txt in the base install directory. For instance, for Windows, you would go: pip3 install -r requirements_windows.txt If you prefer to do things manually, inspect the document and install the modules yourself. PyQt5 support \u00b6 For Qt, either PySide2 (default) or PyQt5 are supported, through qtpy. For PyQt5, go: pip3 install qtpy PyQtChart PyQt5 FFMPEG \u00b6 If you don't have FFMPEG in your PATH and you want to import anything more fun than jpegs, you will need to put a static FFMPEG executable in your PATH or the install_dir/bin directory. If you can't find a static exe on Windows, you can copy the exe from one of my extractable releases. mpv support \u00b6 MPV is optional and complicated, but it is great, so it is worth the time to figure out! As well as the python wrapper, 'python-mpv' as in the requirements.txt, you also need the underlying library. This is not mpv the program, but 'libmpv', often called 'libmpv1'. For Windows, the dll builds are here , although getting the right version for the current wrapper can be difficult (you will get errors when you try to load video if it is not correct). Just put it in your hydrus base install directory. You can also just grab the 'mpv-1.dll' I bundle in my release. In my experience, this works with python-mpv 0.5.2. If you are on Linux/macOS, you can usually get 'libmpv1' with apt . You might have to adjust your python-mpv version (e.g. pip3 install python-mpv==0.4.5 ) to get it to work. SQLite \u00b6 If you can, update python's SQLite--it'll improve performance. On Windows, get the 64-bit sqlite3.dll here , and just drop it in C:\\Python37\\DLLs or wherever you have python installed. You'll be overwriting the old file, so make a backup if you want to (I have never had trouble updating like this, however). I don't know how to do it for Linux or macOS, so if you do, please let me know! additional windows info \u00b6 This may not matter any more, but in the old days, Windows pip could have problems building modules like lz4 and lxml. This page has a lot of prebuilt binaries--I have found it very helpful many times. I have a fair bit of experience with Windows python, so send me a mail if you need help. running it \u00b6 Once you have everything set up, client.pyw and server.py should look for and run off client.db and server.db just like the executables. They will look in the 'db' directory by default, or anywhere you point them with the \"-d\" parameter, again just like the executables. Explictly, you will be entering something like this in the terminal: . venv/bin/activate ./client.py -d=\"/path/to/database\" Again, you may want to set up a shortcut to a script to make it easy. I develop hydrus on and am most experienced with Windows, so the program is more stable and reasonable on that. I do not have as much experience with Linux or macOS, but I still appreciate and will work on your Linux/macOS bug reports. Building the docs \u00b6 When running from source you will also need to build the hydrus help docs yourself. my code \u00b6 My coding style is unusual and unprofessional. Everything is pretty much hacked together. If you are interested in how things work, please do look through the source and ask me if you don't understand something. I'm constantly throwing new code together and then cleaning and overhauling it down the line. I work strictly alone, however, so while I am very interested in detailed bug reports or suggestions for good libraries to use, I am not looking for pull requests or suggestions on style. I know a lot of things are a mess. Everything I do is WTFPL , so feel free to fork and play around with things on your end as much as you like.","title":"running from source"},{"location":"running_from_source.html#linux_flavours","text":"I often point people here when they are running non-Ubuntu flavours of Linux and cannot run the build. One Debian user mentioned that he had an error like this: _ImportError: /home/user/hydrus/libX11.so.6: undefined symbol: xcb\\_poll\\_for_reply64_ But that by simply deleting the libX11.so.6 file in the hydrus install directory, he was able to boot. I presume this meant the build was then relying on his local libX11.so, which happened to have better API compatibility. If you receive a similar error, you might like to try the same sort of thing. Let me know if you discover anything!","title":"a quick note about Linux flavours"},{"location":"running_from_source.html#windows_build","text":"Installing some packages on windows with pip may need Visual Studio's C++ Build Tools for your version of python. Although these tools are free, it can be a pain to get them through the official (and often huge) downloader installer from Microsoft. Instead, install Chocolatey and use this one simple line: choco install -y vcbuildtools visualstudio2017buildtools Trust me, just do this, it will save a ton of headaches! This can also be helpful for Windows 10 python work generally: choco install -y windows-sdk-10.0","title":"building packages on windows"},{"location":"running_from_source.html#what_you_need","text":"You will need basic python experience, python 3.x and a number of python modules, all through pip. First of all, get the actual program. The github repo is https://github.com/hydrusnetwork/hydrus . If you are familiar with git, you can just clone the repo to the location you want, but if not, then just go to the latest release and download and extract the source code .zip or .tar.gz somewhere. The same database location rules apply for the source release as the builds, so if you are not planning to redirect the database with the -d launch parameter, make sure the directory has write permissions (e.g. in Windows, don't put it in \"Program Files\") Inside the extract should be client.py, client.pyw, and server.py. You will be treating these basically the same as the 'client' and 'server' executables--you should be able to launch them the same way and they take the same launch parameters as the exes. On Windows, using client.pyw allows you to neatly launch the program without a command terminal appearing behind it, but both the .py and .pyw work fundamentally the same--feel free to play with them both. Hydrus needs a whole bunch of libraries, so let's now set your python up. If you are on Linux or macOS, or if you are on Windows and have an existing python you do not want to stomp all over with new modules, I recommend you create a virtual environment: Note, if you are on Linux, it may be easier to use your package manager instead of messing around with venv. A user has written a great summary with all needed packages here . To create a new venv environment: (navigate to your hydrus extract folder in a terminal) pip3 install virtualenv (if you need it) pip3 install wheel (if you need it) mkdir venv virtualenv --python=python3 venv . venv/bin/activate That . venv/bin/activate line turns your venv on, which is an isolated copy of python that you can install modules to without worrying about breaking something system-wide, and will be needed every time you run the client.pyw / server.py files. You should see your terminal note you are now in the venv. You can easily tuck this venv activation into a launch script. On Windows Powershell, the command is .\\venv\\Scripts\\activate , but you may find the whole deal is done much easier in cmd than Powershell. When in Powershell, just type cmd to get an old fashioned command line. In cmd, the launch command is just venv\\scripts\\activate , no leading period. After that, you can use pip to install everything you need from the appropriate requirements.txt in the base install directory. For instance, for Windows, you would go: pip3 install -r requirements_windows.txt If you prefer to do things manually, inspect the document and install the modules yourself.","title":"what you will need"},{"location":"running_from_source.html#pyqt5","text":"For Qt, either PySide2 (default) or PyQt5 are supported, through qtpy. For PyQt5, go: pip3 install qtpy PyQtChart PyQt5","title":"PyQt5 support"},{"location":"running_from_source.html#ffmpeg","text":"If you don't have FFMPEG in your PATH and you want to import anything more fun than jpegs, you will need to put a static FFMPEG executable in your PATH or the install_dir/bin directory. If you can't find a static exe on Windows, you can copy the exe from one of my extractable releases.","title":"FFMPEG"},{"location":"running_from_source.html#mpv","text":"MPV is optional and complicated, but it is great, so it is worth the time to figure out! As well as the python wrapper, 'python-mpv' as in the requirements.txt, you also need the underlying library. This is not mpv the program, but 'libmpv', often called 'libmpv1'. For Windows, the dll builds are here , although getting the right version for the current wrapper can be difficult (you will get errors when you try to load video if it is not correct). Just put it in your hydrus base install directory. You can also just grab the 'mpv-1.dll' I bundle in my release. In my experience, this works with python-mpv 0.5.2. If you are on Linux/macOS, you can usually get 'libmpv1' with apt . You might have to adjust your python-mpv version (e.g. pip3 install python-mpv==0.4.5 ) to get it to work.","title":"mpv support"},{"location":"running_from_source.html#sqlite","text":"If you can, update python's SQLite--it'll improve performance. On Windows, get the 64-bit sqlite3.dll here , and just drop it in C:\\Python37\\DLLs or wherever you have python installed. You'll be overwriting the old file, so make a backup if you want to (I have never had trouble updating like this, however). I don't know how to do it for Linux or macOS, so if you do, please let me know!","title":"SQLite"},{"location":"running_from_source.html#additional_windows","text":"This may not matter any more, but in the old days, Windows pip could have problems building modules like lz4 and lxml. This page has a lot of prebuilt binaries--I have found it very helpful many times. I have a fair bit of experience with Windows python, so send me a mail if you need help.","title":"additional windows info"},{"location":"running_from_source.html#running_it","text":"Once you have everything set up, client.pyw and server.py should look for and run off client.db and server.db just like the executables. They will look in the 'db' directory by default, or anywhere you point them with the \"-d\" parameter, again just like the executables. Explictly, you will be entering something like this in the terminal: . venv/bin/activate ./client.py -d=\"/path/to/database\" Again, you may want to set up a shortcut to a script to make it easy. I develop hydrus on and am most experienced with Windows, so the program is more stable and reasonable on that. I do not have as much experience with Linux or macOS, but I still appreciate and will work on your Linux/macOS bug reports.","title":"running it"},{"location":"running_from_source.html#building_the_docs","text":"When running from source you will also need to build the hydrus help docs yourself.","title":"Building the docs"},{"location":"running_from_source.html#my_code","text":"My coding style is unusual and unprofessional. Everything is pretty much hacked together. If you are interested in how things work, please do look through the source and ask me if you don't understand something. I'm constantly throwing new code together and then cleaning and overhauling it down the line. I work strictly alone, however, so while I am very interested in detailed bug reports or suggestions for good libraries to use, I am not looking for pull requests or suggestions on style. I know a lot of things are a mess. Everything I do is WTFPL , so feel free to fork and play around with things on your end as much as you like.","title":"my code"},{"location":"server.html","text":"Note You do not need the server to do anything with hydrus! It is only for advanced users to do very specific jobs! The server is also hacked-together and quite technical. It requires a fair amount of experience with the client and its concepts, and it does not operate on a timescale that works well on a LAN. Only try running your own server once you have a bit of experience synchronising with something like the PTR and you think, 'Hey, I know exactly what that does, and I would like one!' Here is a document put together by a user describing whether you want the server. setting up a server \u00b6 I will use two terms, server and service , to mean two distinct things: A server is an instantiation of the hydrus server executable (e.g. server.exe in Windows). It has a complicated and flexible database that can run many different services in parallel. A service sits on a port (e.g. 45871) and responds to certain http requests (e.g. /file or /update ) that the hydrus client can plug into. A service might be a repository for a certain kind of data, the administration interface to manage what services run on a server, or anything else. Setting up a hydrus server is easy compared to, say, Apache. There are no .conf files to mess about with, and everything is controlled through the client. When started, the server will place an icon in your system tray in Windows or open a small frame in Linux or macOS. To close the server, either right-click the system tray icon and select exit, or just close the frame. The basic process for setting up a server is: Start the server. Set up your client with its address and initialise the admin account Set the server's options and services. Make some accounts for your users. ??? Profit Let's look at these steps in more detail: start the server \u00b6 Since the server and client have so much common code, I package them together. If you have the client, you have the server. If you installed in Windows, you can hit the shortcut in your start menu. Otherwise, go straight to 'server' or 'server.exe' or 'server.pyw' in your installation directory. The program will first try to take port 45870 for its administration interface, so make sure that is free. Open your firewall as appropriate. set up the client \u00b6 In the services->manage services dialog, add a new 'hydrus server administration service' and set up the basic options as appropriate. If you are running the server on the same computer as the client, its hostname is 'localhost'. In order to set up the first admin account and an access key, use 'init' as a registration token. This special registration token will only work to initialise this first super-account. YOU'LL WANT TO SAVE YOUR ACCESS KEY IN A SAFE PLACE If you lose your admin access key, there is no way to get it back, and if you are not sqlite-proficient, you'll have to restart from the beginning by deleting your server's database files. If the client can't connect to the server, it is either not running or you have a firewall/port-mapping problem. If you want a quick way to test the server's visibility, just put https://host:port into your browser (make sure it is https! http will not work)--if it is working, your browser will probably complain about its self-signed https certificate. Once you add a certificate exception, the server should return some simple html identifying itself. set up the server \u00b6 You should have a new submenu, 'administrate services', under 'services', in the client gui. This is where you control most server and service-wide stuff. admin->your server->manage services lets you add, edit, and delete the services your server runs. Every time you add one, you will also be added as that service's first administrator, and the admin menu will gain a new entry for it. making accounts \u00b6 Go admin->your service->create new accounts to create new registration tokens. Send the registration tokens to the users you want to give these new accounts. A registration token will only work once, so if you want to give several people the same account, they will have to share the access key amongst themselves once one of them has registered the account. (Or you can register the account yourself and send them all the same access key. Do what you like!) Go admin->manage account types to add, remove, or edit account types. Make sure everyone has at least downloader (get_data) permissions so they can stay synchronised. You can create as many accounts of whatever kind you like. Depending on your usage scenario, you may want to have all uploaders, one uploader and many downloaders, or just a single administrator. There are many combinations. ??? \u00b6 The most important part is to have fun! There are no losers on the INFORMATION SUPERHIGHWAY. profit \u00b6 I honestly hope you can get some benefit out of my code, whether just as a backup or as part of a far more complex system. Please mail me your comments as I am always keen to make improvements. btw, how to backup a repo's db \u00b6 All of a server's files and options are stored in its accompanying .db file and respective subdirectories, which are created on first startup (just like with the client). To backup or restore, you have two options: Shut down the server, copy the database files and directories, then restart it. This is the only way, currently, to restore a db. In the client, hit admin->your server->make a backup. This will lock the db server-side while it makes a copy of everything server-related to server_install_dir/db/server_backup . When the operation is complete, you can ftp/batch-copy/whatever the server_backup folder wherever you like. OMG EVERYTHING WENT WRONG \u00b6 If you get to a point where you can no longer boot the repository, try running SQLite Studio and opening server.db. If the issue is simple--like manually changing the port number--you may be in luck. Send me an email if it is tricky. Remember that everything is breaking all the time. Make regular backups, and you'll minimise your problems.","title":"running your own server"},{"location":"server.html#intro","text":"I will use two terms, server and service , to mean two distinct things: A server is an instantiation of the hydrus server executable (e.g. server.exe in Windows). It has a complicated and flexible database that can run many different services in parallel. A service sits on a port (e.g. 45871) and responds to certain http requests (e.g. /file or /update ) that the hydrus client can plug into. A service might be a repository for a certain kind of data, the administration interface to manage what services run on a server, or anything else. Setting up a hydrus server is easy compared to, say, Apache. There are no .conf files to mess about with, and everything is controlled through the client. When started, the server will place an icon in your system tray in Windows or open a small frame in Linux or macOS. To close the server, either right-click the system tray icon and select exit, or just close the frame. The basic process for setting up a server is: Start the server. Set up your client with its address and initialise the admin account Set the server's options and services. Make some accounts for your users. ??? Profit Let's look at these steps in more detail:","title":"setting up a server"},{"location":"server.html#start","text":"Since the server and client have so much common code, I package them together. If you have the client, you have the server. If you installed in Windows, you can hit the shortcut in your start menu. Otherwise, go straight to 'server' or 'server.exe' or 'server.pyw' in your installation directory. The program will first try to take port 45870 for its administration interface, so make sure that is free. Open your firewall as appropriate.","title":"start the server"},{"location":"server.html#setting_up_the_client","text":"In the services->manage services dialog, add a new 'hydrus server administration service' and set up the basic options as appropriate. If you are running the server on the same computer as the client, its hostname is 'localhost'. In order to set up the first admin account and an access key, use 'init' as a registration token. This special registration token will only work to initialise this first super-account. YOU'LL WANT TO SAVE YOUR ACCESS KEY IN A SAFE PLACE If you lose your admin access key, there is no way to get it back, and if you are not sqlite-proficient, you'll have to restart from the beginning by deleting your server's database files. If the client can't connect to the server, it is either not running or you have a firewall/port-mapping problem. If you want a quick way to test the server's visibility, just put https://host:port into your browser (make sure it is https! http will not work)--if it is working, your browser will probably complain about its self-signed https certificate. Once you add a certificate exception, the server should return some simple html identifying itself.","title":"set up the client"},{"location":"server.html#setting_up_the_server","text":"You should have a new submenu, 'administrate services', under 'services', in the client gui. This is where you control most server and service-wide stuff. admin->your server->manage services lets you add, edit, and delete the services your server runs. Every time you add one, you will also be added as that service's first administrator, and the admin menu will gain a new entry for it.","title":"set up the server"},{"location":"server.html#making_accounts","text":"Go admin->your service->create new accounts to create new registration tokens. Send the registration tokens to the users you want to give these new accounts. A registration token will only work once, so if you want to give several people the same account, they will have to share the access key amongst themselves once one of them has registered the account. (Or you can register the account yourself and send them all the same access key. Do what you like!) Go admin->manage account types to add, remove, or edit account types. Make sure everyone has at least downloader (get_data) permissions so they can stay synchronised. You can create as many accounts of whatever kind you like. Depending on your usage scenario, you may want to have all uploaders, one uploader and many downloaders, or just a single administrator. There are many combinations.","title":"making accounts"},{"location":"server.html#have_fun","text":"The most important part is to have fun! There are no losers on the INFORMATION SUPERHIGHWAY.","title":"???"},{"location":"server.html#profit","text":"I honestly hope you can get some benefit out of my code, whether just as a backup or as part of a far more complex system. Please mail me your comments as I am always keen to make improvements.","title":"profit"},{"location":"server.html#backing_up","text":"All of a server's files and options are stored in its accompanying .db file and respective subdirectories, which are created on first startup (just like with the client). To backup or restore, you have two options: Shut down the server, copy the database files and directories, then restart it. This is the only way, currently, to restore a db. In the client, hit admin->your server->make a backup. This will lock the db server-side while it makes a copy of everything server-related to server_install_dir/db/server_backup . When the operation is complete, you can ftp/batch-copy/whatever the server_backup folder wherever you like.","title":"btw, how to backup a repo's db"},{"location":"server.html#hell","text":"If you get to a point where you can no longer boot the repository, try running SQLite Studio and opening server.db. If the issue is simple--like manually changing the port number--you may be in luck. Send me an email if it is tricky. Remember that everything is breaking all the time. Make regular backups, and you'll minimise your problems.","title":"OMG EVERYTHING WENT WRONG"},{"location":"support.html","text":"can I contribute to hydrus development? \u00b6 I do not expect anything from anyone. I'm amazed and grateful that anyone wants to use my software and share tags with others. I enjoy the feedback and work, and I hope to keep putting completely free weekly releases out as long as there is more to do. That said, as I have developed the software, several users have kindly offered to contribute money, either as thanks for a specific feature or just in general. I kept putting the thought off, but I eventually got over my hesitance and set something up. I find the tactics of most internet fundraising very distasteful, especially when they promise something they then fail to deliver. I much prefer the 'if you like me and would like to contribute, then please do, meanwhile I'll keep doing what I do' model. I support several 'put out regular free content' creators on Patreon in this way, and I get a lot out of it, even though I have no direct reward beyond the knowledge that I helped some people do something neat. If you feel the same way about my work, I've set up a simple Patreon page here . If you can help out, it is deeply appreciated.","title":"financial support"},{"location":"support.html#support","text":"I do not expect anything from anyone. I'm amazed and grateful that anyone wants to use my software and share tags with others. I enjoy the feedback and work, and I hope to keep putting completely free weekly releases out as long as there is more to do. That said, as I have developed the software, several users have kindly offered to contribute money, either as thanks for a specific feature or just in general. I kept putting the thought off, but I eventually got over my hesitance and set something up. I find the tactics of most internet fundraising very distasteful, especially when they promise something they then fail to deliver. I much prefer the 'if you like me and would like to contribute, then please do, meanwhile I'll keep doing what I do' model. I support several 'put out regular free content' creators on Patreon in this way, and I get a lot out of it, even though I have no direct reward beyond the knowledge that I helped some people do something neat. If you feel the same way about my work, I've set up a simple Patreon page here . If you can help out, it is deeply appreciated.","title":"can I contribute to hydrus development?"},{"location":"wine.html","text":"running a client or server in wine \u00b6 Several Linux and macOS users have found success running hydrus with Wine. Here is a post from a Linux dude: Some things I picked up on after extended use: Wine is kinda retarded sometimes, do not try to close the window by pressing the red close button, while in fullscreen. It will just \"go through\" it, and do whatever to whats behind it. Flash do work, IF you download the internet explorer version, and install it through wine. Hydrus is selfcontained, and portable. That means that one instance of hydrus do not know what another is doing. This is great if you want different installations for different things. Some of the input fields behave a little wonky. Though that may just be standard Hydrus behavior. Mostly everything else works fine. I was able to connect to the test server and view there. Only thing I need to test is the ability to host a server. Installation process: Get a standard Wine installation. Download the latest hydrus .zip file. Unpack it with your chosen zip file opener, in the chosen folder. Do not need to be in the wine folder. Run it with wine, either though the file manager, or though the terminal. For Flash support install the IE version through wine. If you get the client running in Wine, please let me know how you get on!","title":"running in wine"},{"location":"wine.html#running_a_client_or_server_in_wine","text":"Several Linux and macOS users have found success running hydrus with Wine. Here is a post from a Linux dude: Some things I picked up on after extended use: Wine is kinda retarded sometimes, do not try to close the window by pressing the red close button, while in fullscreen. It will just \"go through\" it, and do whatever to whats behind it. Flash do work, IF you download the internet explorer version, and install it through wine. Hydrus is selfcontained, and portable. That means that one instance of hydrus do not know what another is doing. This is great if you want different installations for different things. Some of the input fields behave a little wonky. Though that may just be standard Hydrus behavior. Mostly everything else works fine. I was able to connect to the test server and view there. Only thing I need to test is the ability to host a server. Installation process: Get a standard Wine installation. Download the latest hydrus .zip file. Unpack it with your chosen zip file opener, in the chosen folder. Do not need to be in the wine folder. Run it with wine, either though the file manager, or though the terminal. For Flash support install the IE version through wine. If you get the client running in Wine, please let me know how you get on!","title":"running a client or server in wine"},{"location":"youDontWantTheServer.html","text":"You don't want the server \u00b6 The server.exe/server.py is the victim of many a misconception. You don't need to use the server to use Hydrus. The vast majority of features are contained in the client itself so if you're new to Hydrus, just use that. The server is only really useful for a few specific cases which will not apply for the vast majority of users. The server \u00b6 The Hydrus server doesn't really work as most people envision a server working. When you sync with a Hydrus server you get everything it has, a complete copy. You can't have it host files which you can then search and selectively retrieve, it's all or nothing. You don't want the server (probably) \u00b6 Do you want to remotely view your files? You don't want the server. Do you want to host your files on another computer since your daily driver don't have a lot of storage space? You don't want the server. Do you want to use multiple clients and have everything synced between them? You don't want the server. Do you want to expose API for Hydrus Web, Hydroid, or some other third-party tool? You don't want the server. Do you want to share some files and tags in a small group of friends? You might actually want the server. The options \u00b6 Now, you're not the first person to have any of the above ideas and some of the thinkers even had enough programming know-how to make something for it. Below is a list of some options, see this page for a few more. Hydrus Web \u00b6 Lets you browse and manage your collection. Hydroid \u00b6 Lets you browse and manage your collection. Animeboxes \u00b6 Lets you browse your collection. Database migration \u00b6 Lets you host your files on another drive, even on another computer in the network.","title":"You don't want the server"},{"location":"youDontWantTheServer.html#you_dont_want_the_server","text":"The server.exe/server.py is the victim of many a misconception. You don't need to use the server to use Hydrus. The vast majority of features are contained in the client itself so if you're new to Hydrus, just use that. The server is only really useful for a few specific cases which will not apply for the vast majority of users.","title":"You don't want the server"},{"location":"youDontWantTheServer.html#the_server","text":"The Hydrus server doesn't really work as most people envision a server working. When you sync with a Hydrus server you get everything it has, a complete copy. You can't have it host files which you can then search and selectively retrieve, it's all or nothing.","title":"The server"},{"location":"youDontWantTheServer.html#you_dont_want_the_server_probably","text":"Do you want to remotely view your files? You don't want the server. Do you want to host your files on another computer since your daily driver don't have a lot of storage space? You don't want the server. Do you want to use multiple clients and have everything synced between them? You don't want the server. Do you want to expose API for Hydrus Web, Hydroid, or some other third-party tool? You don't want the server. Do you want to share some files and tags in a small group of friends? You might actually want the server.","title":"You don't want the server (probably)"},{"location":"youDontWantTheServer.html#the_options","text":"Now, you're not the first person to have any of the above ideas and some of the thinkers even had enough programming know-how to make something for it. Below is a list of some options, see this page for a few more.","title":"The options"},{"location":"youDontWantTheServer.html#hydrus_web","text":"Lets you browse and manage your collection.","title":"Hydrus Web"},{"location":"youDontWantTheServer.html#hydroid","text":"Lets you browse and manage your collection.","title":"Hydroid"},{"location":"youDontWantTheServer.html#animeboxes","text":"Lets you browse your collection.","title":"Animeboxes"},{"location":"youDontWantTheServer.html#database_migration","text":"Lets you host your files on another drive, even on another computer in the network.","title":"Database migration"}]}